(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{325:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("go语言开发第二篇")]),t._v(" "),a("h2",{attrs:{id:"引用数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型"}},[t._v("#")]),t._v(" 引用数据类型")]),t._v(" "),a("h3",{attrs:{id:"结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[t._v("#")]),t._v(" 结构体")]),t._v(" "),a("p",[t._v("Go 通过类型别名（alias types）和结构体的形式支持用户自定义类型，或者叫定制类型。一个带属性的结构体试图表示一个现实世界中的实体。结构体是复合类型（composite types），当需要定义一个类型，它由一系列属性组成，每个属性都有自己的类型和值的时候，就应该使用结构体，它把数据聚集在一起。然后可以访问这些数据，就好像它是一个独立实体的一部分。结构体也是值类型，因此可以通过 "),a("strong",[t._v("new")]),t._v(" 函数来创建。")]),t._v(" "),a("p",[t._v("组成结构体类型的那些数据称为 "),a("strong",[t._v("字段（fields）")]),t._v("。每个字段都有一个类型和一个名字；在一个结构体中，字段名字必须是唯一的。")]),t._v(" "),a("p",[t._v("结构体的概念在软件工程上旧的术语叫 ADT（抽象数据类型：Abstract Data Type），在一些老的编程语言中叫 "),a("strong",[t._v("记录（Record）")]),t._v("，比如 Cobol，在 C 家族的编程语言中它也存在，并且名字也是 "),a("strong",[t._v("struct")]),t._v("，在面向对象的编程语言中，跟一个无方法的轻量级类一样。不过因为 Go 语言中没有类的概念，因此在 Go 中结构体有着更为重要的地位。")]),t._v(" "),a("p",[t._v("结构体的定义方式")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" identifier "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    field1 type1\n    field2 type2\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("type T struct {a, b int}")]),t._v(" 也是合法的语法，它更适用于简单的结构体。")]),t._v(" "),a("p",[t._v("结构体里的字段都有 "),a("strong",[t._v("名字")]),t._v("，像 field1、field2 等，如果字段在代码中从来也不会被用到，那么可以命名它为 "),a("strong",[t._v("_")]),t._v("。")]),t._v(" "),a("p",[t._v("标签")]),t._v(" "),a("p",[t._v("结构体中的字段除了有名字和类型外，还可以有一个可选的标签（tag）：它是一个附属于字段的字符串，可以是文档或其他的重要标记。标签的内容不可以在一般的编程中使用，只有包 "),a("code",[t._v("reflect")]),t._v(" 能获取它。")]),t._v(" "),a("p",[t._v("如果变量是一个结构体类型，就可以通过 Field 来索引结构体的字段，然后就可以使用 Tag 属性。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code")])]),a("p",[t._v("匿名字段")]),t._v(" "),a("h4",{attrs:{id:"递归结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归结构体"}},[t._v("#")]),t._v(" 递归结构体")]),t._v(" "),a("p",[t._v("结构体类型可以通过引用自身来定义。这在定义链表或二叉树的元素（通常叫节点）时特别有用，此时节点包含指向临近节点的链接（地址）。如下所示，链表中的 "),a("code",[t._v("su")]),t._v("，树中的 "),a("code",[t._v("ri")]),t._v(" 和 "),a("code",[t._v("le")]),t._v(" 分别是指向别的节点的指针。")]),t._v(" "),a("p",[t._v("这块的 "),a("code",[t._v("data")]),t._v(" 字段用于存放有效数据（比如 float64），"),a("code",[t._v("su")]),t._v(" 指针指向后继节点。")]),t._v(" "),a("h4",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("p",[t._v("在 Go 语言中，结构体就像是类的一种简化形式，那么面向对象程序员可能会问：类的方法在哪里呢？在 Go 中有一个概念，它和方法有着同样的名字，并且大体上意思相同：Go 方法是作用在接收者（receiver）上的一个函数，接收者是某种类型的变量。因此方法是一种特殊类型的函数。")]),t._v(" "),a("p",[t._v("接收者类型可以是（几乎）任何类型，不仅仅是结构体类型：任何类型都可以有方法，甚至可以是函数类型，可以是 int、bool、string 或数组的别名类型。但是接收者不能是一个接口类型（参考 第 11 章），因为接口是一个抽象定义，但是方法却是具体实现；如果这样做会引发一个编译错误："),a("strong",[t._v("invalid receiver type…")]),t._v("。")]),t._v(" "),a("p",[t._v("最后接收者不能是一个指针类型，但是它可以是任何其他允许类型的指针。")]),t._v(" "),a("h4",{attrs:{id:"函数和方法的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数和方法的区别"}},[t._v("#")]),t._v(" 函数和方法的区别")]),t._v(" "),a("p",[t._v("函数将变量作为参数："),a("strong",[t._v("Function1(recv)")])]),t._v(" "),a("p",[t._v("方法在变量上被调用："),a("strong",[t._v("recv.Method1()")])]),t._v(" "),a("p",[t._v("在接收者是指针时，方法可以改变接收者的值（或状态），这点函数也可以做到（当参数作为指针传递，即通过引用调用时，函数也可以改变参数的状态）。")]),t._v(" "),a("p",[a("strong",[t._v("不要忘记 Method1 后边的括号 ()，否则会引发编译器错误："),a("code",[t._v("method recv.Method1 is not an expression, must be called")])])]),t._v(" "),a("p",[t._v("接收者必须有一个显式的名字，这个名字必须在方法中被使用。")]),t._v(" "),a("p",[a("strong",[t._v("receiver_type")]),t._v(" 叫做 "),a("strong",[t._v("（接收者）基本类型")]),t._v("，这个类型必须在和方法同样的包中被声明。")]),t._v(" "),a("p",[t._v("在 Go 中，（接收者）类型关联的方法不写在类型结构里面，就像类那样；耦合更加宽松；类型和方法之间的关联由接收者来建立。")]),t._v(" "),a("p",[a("strong",[t._v("方法没有和数据定义（结构体）混在一起：它们是正交的类型；表示（数据）和行为（方法）是独立的。")])]),t._v(" "),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),a("p",[t._v("函数是Go语言的一等公民")]),t._v(" "),a("h3",{attrs:{id:"init函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init函数"}},[t._v("#")]),t._v(" init函数")]),t._v(" "),a("p",[t._v("变量除了可以在全局声明中初始化，也可以在 init 函数中初始化。这是一类非常特殊的函数，它不能够被人为调用，而是在每个包完成初始化后自动执行，并且执行优先级比 main 函数高")]),t._v(" "),a("p",[t._v("每个源文件可以包含多个 init 函数，同一个源文件中的 init函数会按照从上到下的顺序执行，如果一个包有多个源文件包含 init 函数的话，则官方鼓励但不保证以文件名的顺序调用。初始化总是以单线程并且按照包的依赖关系顺序执行")]),t._v(" "),a("p",[t._v("一个可能的用途是在开始执行程序之前对数据进行检验或修复，以保证程序状态的正确性")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" trans\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"math"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Pi "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   Pi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Atan")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// init() function computes Pi")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[t._v("#")]),t._v(" 接口")]),t._v(" "),a("p",[t._v("Go 语言不是一种 "),a("em",[t._v("“传统”")]),t._v(" 的面向对象编程语言：它里面没有类和继承的概念。")]),t._v(" "),a("p",[t._v("但是 Go 语言里有非常灵活的 "),a("strong",[t._v("接口")]),t._v(" 概念，通过它可以实现很多面向对象的特性。接口提供了一种方式来 "),a("strong",[t._v("说明")]),t._v(" 对象的行为：如果谁能搞定这件事，它就可以用在这儿。")]),t._v(" "),a("p",[t._v("接口定义了一组方法（方法集），但是这些方法不包含（实现）代码：它们没有被实现（它们是抽象的）。接口里也不能包含变量。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Namer "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Method1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("param_list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" return_type\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Method2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("param_list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" return_type\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("接口的名字由方法名加 "),a("code",[t._v("er")]),t._v(" 后缀组成，例如 "),a("code",[t._v("Printer")]),t._v("、"),a("code",[t._v("Reader")]),t._v("、"),a("code",[t._v("Writer")]),t._v("、"),a("code",[t._v("Logger")]),t._v("、"),a("code",[t._v("Converter")]),t._v(" 等等。还有一些不常用的方式（当后缀 "),a("code",[t._v("er")]),t._v(" 不合适时），比如 "),a("code",[t._v("Recoverable")]),t._v("，此时接口名以 "),a("code",[t._v("able")]),t._v(" 结尾，或者以 "),a("code",[t._v("I")]),t._v(" 开头（像 "),a("code",[t._v(".NET")]),t._v(" 或 "),a("code",[t._v("Java")]),t._v(" 中那样）。")]),t._v(" "),a("p",[t._v("一个接口可以包含一个或多个其他的接口，这相当于直接将这些内嵌接口的方法列举在外层接口中一样")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" ReadWrite "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b Buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b Buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Lock "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" File "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ReadWrite\n    Lock\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("空接口")]),t._v(" "),a("p",[a("strong",[t._v("空接口或者最小接口")]),t._v(" 不包含任何方法，它对实现不做任何要求")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Any "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("任何其他类型都实现了空接口（它不仅仅像 "),a("code",[t._v("Java/C#")]),t._v(" 中 "),a("code",[t._v("Object")]),t._v(" 引用类型），"),a("code",[t._v("any")]),t._v(" 或 "),a("code",[t._v("Any")]),t._v(" 是空接口一个很好的别名或缩写。")]),t._v(" "),a("p",[t._v("空接口类似 "),a("code",[t._v("Java/C#")]),t._v(" 中所有类的基类： "),a("code",[t._v("Object")]),t._v(" 类，二者的目标也很相近。")]),t._v(" "),a("p",[t._v("可以给一个空接口类型的变量 "),a("code",[t._v("var val interface {}")]),t._v(" 赋任何类型的值。")]),t._v(" "),a("h3",{attrs:{id:"反射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[t._v("#")]),t._v(" 反射")]),t._v(" "),a("p",[t._v("虽然在大多数的应用和服务中并不常见，但是很多框架都依赖 Go 语言的反射机制简化代码。因为 Go 语言的语法元素很少、设计简单，所以它没有特别强的表达能力，但是 Go 语言的 "),a("a",{attrs:{href:"https://golang.org/pkg/reflect/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("reflect")]),a("OutboundLink")],1),t._v(" 包能够弥补它在语法上"),a("a",{attrs:{href:"https://draveness.me/golang/tree/reflect.Type",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("reflect.Type")]),a("OutboundLink")],1),t._v("的一些劣势")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://golang.org/pkg/reflect/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("reflect")]),a("OutboundLink")],1),t._v(" 实现了运行时的反射能力，能够让程序操作不同类型的对象"),a("a",{attrs:{href:"https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-reflect/#fn:1",target:"_blank",rel:"noopener noreferrer"}},[t._v("1"),a("OutboundLink")],1),t._v("。反射包中有两对非常重要的函数和类型，两个函数分别是：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://draveness.me/golang/tree/reflect.TypeOf",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("reflect.TypeOf")]),a("OutboundLink")],1),t._v(" 能获取类型信息；")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://draveness.me/golang/tree/reflect.ValueOf",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("reflect.ValueOf")]),a("OutboundLink")],1),t._v(" 能获取数据的运行时表示；")])]),t._v(" "),a("p",[t._v("类型 "),a("a",{attrs:{href:"https://draveness.me/golang/tree/reflect.Type",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("reflect.Type")]),a("OutboundLink")],1),t._v(" 是反射包定义的一个接口，我们可以使用 "),a("a",{attrs:{href:"https://draveness.me/golang/tree/reflect.TypeOf",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("reflect.TypeOf")]),a("OutboundLink")],1),t._v(" 函数获取任意变量的类型")]),t._v(" "),a("p",[t._v("运行时反射是程序在运行期间检查其自身结构的一种方式。反射带来的灵活性是一把双刃剑，反射作为一种元编程方式可以减少重复代码"),a("a",{attrs:{href:"https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-reflect/#fn:2",target:"_blank",rel:"noopener noreferrer"}},[t._v("2"),a("OutboundLink")],1),t._v("，但是过量的使用反射会使我们的程序逻辑变得难以理解并且运行缓慢")]),t._v(" "),a("p",[t._v("反射的三大法则：")]),t._v(" "),a("ol",[a("li",[t._v("从 "),a("code",[t._v("interface{}")]),t._v(" 变量可以反射出反射对象；")]),t._v(" "),a("li",[t._v("从反射对象可以获取 "),a("code",[t._v("interface{}")]),t._v(" 变量；")]),t._v(" "),a("li",[t._v("要修改反射对象，其值必须可设置；")])]),t._v(" "),a("h2",{attrs:{id:"指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针"}},[t._v("#")]),t._v(" 指针")]),t._v(" "),a("p",[t._v("不像 Java 和 .NET，Go 语言为程序员提供了控制数据结构的指针的能力；但是，你不能进行指针运算。通过给予程序员基本内存布局，Go 语言允许你控制特定集合的数据结构、分配的数量以及内存访问模式，这些对构建运行良好的系统是非常重要的：指针对于性能的影响是不言而喻的，而如果你想要做的是系统编程、操作系统或者网络应用，指针更是不可或缺的一部分。")]),t._v(" "),a("p",[t._v("Go 语言和 C、C++ 以及 D 语言这些低级（系统）语言一样，都有指针的概念。但是对于经常导致 C 语言内存泄漏继而程序崩溃的指针运算（所谓的指针算法，如："),a("code",[t._v("pointer+2")]),t._v("，移动指针指向字符串的字节数或数组的某个位置）是不被允许的。Go 语言中的指针保证了内存安全，更像是 Java、C# 和 VB.NET 中的引用。")]),t._v(" "),a("p",[t._v("程序在内存中存储它的值，每个内存块（或字）有一个地址，通常用十六进制数表示，如："),a("code",[t._v("0x6b0820")]),t._v(" 或 "),a("code",[t._v("0xf84001d7f0")]),t._v("。")]),t._v(" "),a("p",[t._v("Go 语言的取地址符是 "),a("code",[t._v("&")]),t._v("，放到一个变量前使用就会返回相应变量的内存地址。")]),t._v(" "),a("p",[a("strong",[t._v("一个指针变量可以指向任何一个值的内存地址")]),t._v(" 它指向那个值的内存地址，在 32 位机器上占用 4 个字节，在 64 位机器上占用 8 个字节，并且与它所指向的值的大小无关。当然，可以声明指针指向任何类型的值来表明它的原始性或结构性；你可以在指针类型前面加上 * 号（前缀）来获取指针所指向的内容，这里的 * 号是一个类型更改器。使用一个指针引用一个值被称为间接引用。")]),t._v(" "),a("p",[t._v("当一个指针被定义后没有分配到任何变量时，它的值为 "),a("code",[t._v("nil")]),t._v("。")]),t._v(" "),a("p",[t._v("一个指针变量通常缩写为 "),a("code",[t._v("ptr")]),t._v("。")]),t._v(" "),a("p",[t._v("指针也可以指向另一个指针，并且可以进行任意深度的嵌套，导致你可以有多级的间接引用，但在大多数情况这会使你的代码结构不清晰。")]),t._v(" "),a("h2",{attrs:{id:"控制结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#控制结构"}},[t._v("#")]),t._v(" 控制结构")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n")])])]),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unhex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'0'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'9'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'0'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'f'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'A'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'F'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'A'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("类型选择")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("functionOfSomeType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  \tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unexpected type"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  \tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unexpected type"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  \tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unexpected type"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  \tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unexpected type"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  \tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unexpected type"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[t._v("#")]),t._v(" 关键字")]),t._v(" "),a("p",[t._v("defer")]),t._v(" "),a("p",[t._v("Go 语言的 "),a("code",[t._v("defer")]),t._v(" 会在当前函数返回前执行传入的函数，它会经常被用于关闭文件描述符、关闭数据库连接以及解锁资源")]),t._v(" "),a("p",[t._v("select")]),t._v(" "),a("p",[t._v("panic与recover")]),t._v(" "),a("p",[a("code",[t._v("panic")]),t._v(" 能够改变程序的控制流，函数调用"),a("code",[t._v("panic")]),t._v(" 时会立刻停止执行函数的其他代码，并在执行结束后在当前 Goroutine 中递归执行调用方的延迟函数调用 "),a("code",[t._v("defer")]),t._v("；")]),t._v(" "),a("p",[a("code",[t._v("recover")]),t._v(" 可以中止 "),a("code",[t._v("panic")]),t._v(" 造成的程序崩溃。它是一个只能在 "),a("code",[t._v("defer")]),t._v(" 中发挥作用的函数，在其他作用域中调用不会发挥任何作用；")]),t._v(" "),a("p",[t._v("Panic和recover常用于错误处理")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CubeRoot")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  z "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    prevz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" z\n    z "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("veryClose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("prez"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" z\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("panic")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CubeRoot(g%) did not converge"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workChan "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("chan")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Work"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" work "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" workChan "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("safelyDo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("work"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("safeliDo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("work "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Work"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("recover")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"work failed"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("do")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("work"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("make和new")]),t._v(" "),a("p",[a("code",[t._v("make")]),t._v(" 的作用是初始化内置的数据结构，也就是我们在前面提到的切片、哈希表和 Channel"),a("a",{attrs:{href:"https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-make-and-new/#fn:2",target:"_blank",rel:"noopener noreferrer"}},[t._v("2"),a("OutboundLink")],1),t._v("；")]),t._v(" "),a("p",[a("code",[t._v("new")]),t._v(" 的作用是根据传入的类型分配一片内存空间并返回指向这片内存空间的指针"),a("a",{attrs:{href:"https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-make-and-new/#fn:3",target:"_blank",rel:"noopener noreferrer"}},[t._v("3"),a("OutboundLink")],1),t._v("；")]),t._v(" "),a("h2",{attrs:{id:"路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[t._v("#")]),t._v(" 路由")]),t._v(" "),a("h3",{attrs:{id:"httprouter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#httprouter"}},[t._v("#")]),t._v(" httprouter")]),t._v(" "),a("p",[t._v("https://github.com/julienschmidt/httprouter")]),t._v(" "),a("h2",{attrs:{id:"文件读写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件读写"}},[t._v("#")]),t._v(" 文件读写")]),t._v(" "),a("p",[t._v("在 Go 语言中，文件使用指向 "),a("code",[t._v("os.File")]),t._v(" 类型的指针来表示的，也叫做文件句柄。我们在前面章节使用到过标准输入 "),a("code",[t._v("os.Stdin")]),t._v(" 和标准输出 "),a("code",[t._v("os.Stdout")]),t._v("，他们的类型都是 "),a("code",[t._v("*os.File")])]),t._v(" "),a("h3",{attrs:{id:"用切片读取文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用切片读取文件"}},[t._v("#")]),t._v(" 用切片读取文件")]),t._v(" "),a("p",[t._v("切片提供了 Go 中处理 I/O 缓冲的标准方式，下面 "),a("code",[t._v("cat")]),t._v(" 函数的第二版中，在一个切片缓冲内使用无限 for 循环（直到文件尾部 EOF）读取文件，并写入到标准输出（"),a("code",[t._v("os.Stdout")]),t._v("）")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("File"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NBUF "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" buf "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NBUF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" nr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Stderr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat: error reading: %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\tos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" nr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// EOF")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" nr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" nw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ew "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Stdout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" nw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" nr "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Stderr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat: error writing: %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ew"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拷贝"}},[t._v("#")]),t._v(" 拷贝")]),t._v(" "),a("p",[t._v("拷贝文件最简单的方式就是使用 io 包")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// filecopy.go")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"io"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"os"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CopyFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Copy done!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CopyFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" srcName "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("written "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tsrc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("srcName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tdst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" dst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Copy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"json包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json包"}},[t._v("#")]),t._v(" Json包")]),t._v(" "),a("p",[t._v("数据结构要在网络中传输或保存到文件，就必须对其编码和解码；目前存在很多编码格式：JSON，XML，gob，Google 缓冲协议等等。Go 语言支持所有这些编码格式；")]),t._v(" "),a("p",[t._v("结构可能包含二进制数据，如果将其作为文本打印，那么可读性是很差的。另外结构内部可能包含匿名字段，而不清楚数据的用意。")]),t._v(" "),a("p",[t._v("通过把数据转换成纯文本，使用命名的字段来标注，让其具有可读性。这样的数据格式可以通过网络传输，而且是与平台无关的，任何类型的应用都能够读取和输出，不与操作系统和编程语言的类型相关。")]),t._v(" "),a("p",[t._v("下面是一些术语说明：")]),t._v(" "),a("ul",[a("li",[t._v("数据结构 --\x3e 指定格式 = "),a("strong",[t._v("序列化")]),t._v(" 或 "),a("strong",[t._v("编码")]),t._v("（传输之前）")]),t._v(" "),a("li",[t._v("指定格式 --\x3e 数据结构 = "),a("strong",[t._v("反序列化")]),t._v(" 或 "),a("strong",[t._v("解码")]),t._v("（传输之后）")])]),t._v(" "),a("p",[t._v("序列化是在内存中把数据转换成指定格式（数据 -> 字符串），反之亦然（字符串 -> 数据）。")]),t._v(" "),a("p",[t._v("编码也是一样的，只是输出一个数据流（实现了 "),a("code",[t._v("io.Writer")]),t._v(" 接口）；解码是从一个数据流（实现了 "),a("code",[t._v("io.Reader")]),t._v("）输出到一个数据结构。")]),t._v(" "),a("p",[t._v("我们都比较熟悉 XML 格式(参阅 "),a("a",{attrs:{href:"https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/12.9.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("12.10"),a("OutboundLink")],1),t._v(")；但有些时候 JSON（JavaScript Object Notation，参阅 "),a("a",{attrs:{href:"http://json.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://json.org"),a("OutboundLink")],1),t._v("）被作为首选，主要是由于其格式上非常简洁。通常 JSON 被用于 web 后端和浏览器之间的通讯，但是在其它场景也同样的有用。")]),t._v(" "),a("p",[t._v("尽管 XML 被广泛的应用，但是 JSON 更加简洁、轻量（占用更少的内存、磁盘及网络带宽）和更好的可读性，这也使它越来越受欢迎。")]),t._v(" "),a("p",[t._v("Go 语言的 "),a("code",[t._v("json")]),t._v(" 包可以让你在程序中方便的读取和写入 JSON 数据。")]),t._v(" "),a("p",[t._v("我们将在下面的例子里使用 "),a("code",[t._v("json")]),t._v(" 包，并使用练习 10.1 "),a("a",{attrs:{href:"https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/exercises/chapter_10/vcard.go",target:"_blank",rel:"noopener noreferrer"}},[t._v("vcard.go"),a("OutboundLink")],1),t._v(" 中一个简化版本的 "),a("code",[t._v("Address")]),t._v(" 和 "),a("code",[t._v("VCard")]),t._v(" 结构")]),t._v(" "),a("p",[t._v("JSON 与 Go 类型对应如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("bool")]),t._v(" 对应 JSON 的 boolean")]),t._v(" "),a("li",[a("code",[t._v("float64")]),t._v(" 对应 JSON 的 number")]),t._v(" "),a("li",[a("code",[t._v("string")]),t._v(" 对应 JSON 的 string")]),t._v(" "),a("li",[a("code",[t._v("nil")]),t._v(" 对应 JSON 的 null")])]),t._v(" "),a("p",[t._v("不是所有的数据都可以编码为 JSON 类型，只有验证通过的数据结构才能被编码：")]),t._v(" "),a("ul",[a("li",[t._v("JSON 对象只支持字符串类型的 key；要编码一个 Go "),a("code",[t._v("map")]),t._v(" 类型，"),a("code",[t._v("map")]),t._v(" 必须是 "),a("code",[t._v("map[string]T")]),t._v("（"),a("code",[t._v("T")]),t._v(" 是 "),a("code",[t._v("json")]),t._v(" 包中支持的任何类型）")]),t._v(" "),a("li",[t._v("Channel，复杂类型和函数类型不能被编码")]),t._v(" "),a("li",[t._v("不支持循环数据结构；它将引起序列化进入一个无限循环")]),t._v(" "),a("li",[t._v("指针可以被编码，实际上是对指针指向的值进行编码（或者指针是 "),a("code",[t._v("nil")]),t._v("）")])]),t._v(" "),a("h2",{attrs:{id:"包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包"}},[t._v("#")]),t._v(" 包")]),t._v(" "),a("p",[t._v("包是结构化代码的一种方式：每个程序都由包（通常简称为 pkg）的概念组成，可以使用自身的包或者从其它包中导入内容。")]),t._v(" "),a("p",[t._v("包是函数和数据的集合。用package保留字定义一个包，文件名不需要与包名一致，包名的约定是小写字符。")]),t._v(" "),a("p",[t._v("如同其它一些编程语言中的类库或命名空间的概念，每个 Go 文件都属于且仅属于一个包。一个包可以由许多以 "),a("code",[t._v(".go")]),t._v(" 为扩展名的源文件组成，因此文件名和包名一般来说都是不相同的。")]),t._v(" "),a("p",[t._v("你必须在源文件中非注释的第一行指明这个文件属于哪个包，如："),a("code",[t._v("package main")]),t._v("。"),a("code",[t._v("package main")]),t._v("表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 "),a("code",[t._v("main")]),t._v(" 的包。")]),t._v(" "),a("p",[t._v("一个应用程序可以包含不同的包，而且即使你只使用 main 包也不必把所有的代码都写在一个巨大的文件里：你可以用一些较小的文件，并且在每个文件非注释的第一行都使用 "),a("code",[t._v("package main")]),t._v(" 来指明这些文件都属于 main 包。如果你打算编译包名不是为 main 的源文件，如 "),a("code",[t._v("pack1")]),t._v("，编译后产生的对象文件将会是 "),a("code",[t._v("pack1.a")]),t._v(" 而不是可执行程序。另外要注意的是，所有的包名都应该使用小写字母")]),t._v(" "),a("p",[t._v("引入包")]),t._v(" "),a("p",[t._v("单个引入包")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"os"')]),t._v("\n")])])]),a("h3",{attrs:{id:"可见性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可见性"}},[t._v("#")]),t._v(" 可见性")]),t._v(" "),a("p",[t._v("如果想在一个包中引用另外一个包里的标识符（如变量、常量、类型、函数等）时，该标识符必须是对外可见的（public）。在Go语言中只需要将标识符、结构体中的字段名和接口中的方法名的"),a("strong",[t._v("首字母大写")]),t._v("就可以让标识符对外可见了")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" pkg2\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 包变量可见性")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母小写，外部包不可见，只能在当前包内使用")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母大写外部包可见，可在其他包中使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母小写，外部包不可见，只能在当前包内使用")]),t._v("\n\tname "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母大写，外部包可见，可在其他包中使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母小写，外部包不可见，只能在当前包内使用")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数局部变量，外部包不可见，只能在当前函数内使用")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"初始化函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化函数"}},[t._v("#")]),t._v(" 初始化函数")]),t._v(" "),a("p",[t._v("在Go语言程序执行时导入包语句会自动触发包内部"),a("code",[t._v("init()")]),t._v("函数的调用。需要注意的是： "),a("code",[t._v("init()")]),t._v("函数没有参数也没有返回值。 "),a("code",[t._v("init()")]),t._v("函数在程序运行时自动被调用执行，不能在代码中主动调用它。")]),t._v(" "),a("p",[t._v("Go语言包会从"),a("code",[t._v("main")]),t._v("包开始检查其导入的所有包，每个包中又可能导入了其他的包。Go编译器由此构建出一个树状的包引用关系，再根据引用顺序决定编译顺序，依次编译这些包的代码。")]),t._v(" "),a("p",[t._v("在运行时，被最后导入的包会最先初始化并调用其"),a("code",[t._v("init()")]),t._v("函数")]),t._v(" "),a("h3",{attrs:{id:"常用包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用包"}},[t._v("#")]),t._v(" 常用包")]),t._v(" "),a("p",[t._v("fmt:包fmt实现了格式化的I/O函数，这与C的printf和scanf类似")]),t._v(" "),a("p",[t._v("io：这个包提供了原始的I/O操作界面")]),t._v(" "),a("p",[t._v("bufio：这个包实现了缓冲的io")]),t._v(" "),a("p",[t._v("sync：sync包提供了基本的同步原语")]),t._v(" "),a("p",[t._v("sort:sort包提供了对数组和用户定义集合的原始的排序功能")]),t._v(" "),a("p",[t._v("strconv：strconv包提供了字符串与基本数据类型的转换功能")]),t._v(" "),a("p",[t._v("text/template:数据驱动的模版，用于生成文本输出，例如HTML")]),t._v(" "),a("p",[t._v("net/http:net/http实现了http请求、响应和URL的解析，并提供了可扩展的HTTP服务和基本的HTTP客户端")]),t._v(" "),a("p",[t._v("unsafe:unsafe包包含了Go程序中数据类型上所有不安全的操作，通常无须使用这个")]),t._v(" "),a("p",[t._v("encoding/json:实现了编码和解码RFC 4627定义的JSON对象")]),t._v(" "),a("p",[t._v("reflect:实现了运行时反射，允许程序通过抽象类型操作对象")]),t._v(" "),a("p",[t._v("flag：flag包实现了命令行的解析")]),t._v(" "),a("p",[t._v("os/exec:os/exec包执行外部命令")]),t._v(" "),a("h2",{attrs:{id:"错误处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[t._v("#")]),t._v(" 错误处理")]),t._v(" "),a("p",[t._v("Go 语言中，比较常见的错误处理方法是返回 error，由调用者决定后续如何处理。但是如果是无法恢复的错误，可以手动触发 panic，当然如果在程序运行过程中出现了类似于数组越界的错误，panic 也会被触发。panic 会中止当前执行的程序，退出")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello.go")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"before panic"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("panic")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"crash"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"after panic"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("还有像数组越界会触发panic")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello.go")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tarr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("defer")]),t._v(" "),a("p",[t._v("panic 会导致程序被中止，但是在退出前，会先处理完当前协程上已经 defer 的任务，执行完成后再退出。效果类似于 java 语言的 "),a("code",[t._v("try...catch")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello.go")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"defer func"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tarr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("可以 defer 多个任务，在同一个函数中 defer 多个任务，会逆序执行。即先执行最后 defer 的任务。")]),t._v(" "),a("p",[t._v("recover")]),t._v(" "),a("p",[t._v("Go 语言还提供了 recover 函数，可以避免因为 panic 发生而导致整个程序终止，recover 函数只在 defer 中生效")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello.go")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_recover")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"defer func"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("recover")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"recover success"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tarr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"after panic"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_recover")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"after recover"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("库函数很多时候必须将错误信息返回给函数的调用者，Go允许函数有多个返回值的特性，使得函数的调用者在得到正常返回值的同时，可以获取更为详细的错误信息。")]),t._v(" "),a("p",[t._v("简单的错误类型为内置的简单接口，错误类型为error")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("库开发者可以使用更丰富的模型实现这个接口，这样不仅可以看到错误，还可以提供一些上下文，比如像这样返回文件路径")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" PathError "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tOp "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n  Path "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n  Err "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("PathError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Op "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"模版引擎-hugo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模版引擎-hugo"}},[t._v("#")]),t._v(" 模版引擎/Hugo")]),t._v(" "),a("p",[t._v("hugo是基于go语言实现的静态站点生成器，并且利用了Go html/template模版，Go modules等多项技术")]),t._v(" "),a("p",[t._v("Hugo静态网页的数据内容主要来源有四个：")]),t._v(" "),a("p",[t._v("一是Markdown文件，每个文件顶部都可以设置参数，这个区域叫做扉页，文件后面是内容")]),t._v(" "),a("p",[t._v("二是config.toml站点的配置文件")]),t._v(" "),a("p",[t._v("三是data目录下的数据文件")]),t._v(" "),a("p",[t._v("四是通过ajax请求，还可以在页面请求外部服务器的数据服务，比如表单数据，评论数据等等")]),t._v(" "),a("p",[t._v("页面与文件目录结构")]),t._v(" "),a("p",[t._v("文件目录为：")]),t._v(" "),a("p",[t._v("static：静态资源存放目录，图片、css、js库等，可以放到这里，编译时会自动原样复制到public目录。可以有多个静态目录")]),t._v(" "),a("p",[t._v("public：静态站点的文件输出目录")]),t._v(" "),a("p",[t._v("config：Hugo有大量的配置指令，此目录用于保存Json、Yaml、toml等配置文件。最简单的项目只需要一个config.toml文件")]),t._v(" "),a("p",[t._v("每个文件对应一个配置根对象，比如Params，Menus、Languages等")]),t._v(" "),a("p",[t._v("content：所有内容页面存放页，")]),t._v(" "),a("p",[t._v("resouce：资源缓冲目录，非默认创建，用于加速hugo的生成过程，也可以用作给模版作者分发构建好的sass文件，因此不必另外安装预处理器")]),t._v(" "),a("h3",{attrs:{id:"模版引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模版引擎"}},[t._v("#")]),t._v(" 模版引擎")]),t._v(" "),a("p",[t._v("条件判断")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" pipeline "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      T1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" pipeline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      T0\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n      T\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("循环")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" pipeline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \tT1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("模版嵌套")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" partial "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<path>/<patial>.html"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"路由-列表页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由-列表页"}},[t._v("#")]),t._v(" 路由/列表页")]),t._v(" "),a("p",[t._v("Hugo中一切皆页面，“everything in Hugo is a Page”。当需要新路由时，在对应的content下面新建子目录，并在子目录下面新建_index.md")]),t._v(" "),a("p",[t._v("当需要列表页时，在")]),t._v(" "),a("h3",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),a("p",[t._v("Hugo中可以使用自定义变量，并且它提供很多预定义的全局变量可以使用")]),t._v(" "),a("p",[t._v(".Site Params")]),t._v(" "),a("p",[t._v("在配置文件中添加Params参数，在模版中就能使用")]),t._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[t._v("baseURL: https://yoursite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com/\nparams: \n  author: Nikola Tesla\n  description:Tesla's Awesome Hugo Site\n")])])]),a("p",[t._v("然后在模版引擎中使用")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v('<meta name="description" content="{{if IsHome}}"\n')])])]),a("p",[t._v(".Site.Pages")]),t._v(" "),a("h2",{attrs:{id:"go-sum和go-mod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-sum和go-mod"}},[t._v("#")]),t._v(" Go.sum和Go.mod")]),t._v(" "),a("p",[t._v("Go在做依赖管理时会创建两个文件，go.mod和go.sum")]),t._v(" "),a("p",[t._v("gomod是官方推荐的包管理方式，开始于go1.11，在go1.12基本稳定，go1.13默认开启")]),t._v(" "),a("p",[t._v("通过go mod init方式产生go mod文件")]),t._v(" "),a("p",[t._v("go mod提供了module、require、replace、和exclude四个命令")]),t._v(" "),a("p",[t._v("go mod tidy：移除所有代码中不需要的包")]),t._v(" "),a("p",[t._v("go mod edit fmt：格式化文本")]),t._v(" "),a("p",[t._v("go sum类似于package-lock json文件，")]),t._v(" "),a("h2",{attrs:{id:"调试工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调试工具"}},[t._v("#")]),t._v(" 调试工具")]),t._v(" "),a("p",[t._v("编译指令")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("go tool compile "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-S")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-N")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-l")]),t._v(" main.go\n")])])]),a("h2",{attrs:{id:"格式化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#格式化"}},[t._v("#")]),t._v(" 格式化")]),t._v(" "),a("p",[t._v("Go 开发团队不想要 Go 语言像许多其它语言那样总是在为代码风格而引发无休止的争论，浪费大量宝贵的开发时间，因此他们制作了一个工具："),a("code",[t._v("go fmt")]),t._v("（"),a("code",[t._v("gofmt")]),t._v("）。这个工具可以将你的源代码格式化成符合官方统一标准的风格，属于语法风格层面上的小型重构。遵循统一的代码风格是 Go 开发中无可撼动的铁律，因此你必须在编译或提交版本管理系统之前使用 "),a("code",[t._v("gofmt")]),t._v(" 来格式化你的代码。")]),t._v(" "),a("p",[t._v("尽管这种做法也存在一些争论，但使用 "),a("code",[t._v("gofmt")]),t._v(" 后你不再需要自成一套代码风格而是和所有人使用相同的规则。这不仅增强了代码的可读性，而且在接手外部 Go 项目时，可以更快地了解其代码的含义。此外，大多数开发工具也都内置了这一功能。")]),t._v(" "),a("p",[t._v("Go 对于代码的缩进层级方面使用 tab 还是空格并没有强制规定，一个 tab 可以代表 4 个或 8 个空格。在实际开发中，1 个 tab 应该代表 4 个空格，而在本身的例子当中，每个 tab 代表 8 个空格。至于开发工具方面，一般都是直接使用 tab 而不替换成空格。")]),t._v(" "),a("p",[t._v("在命令行输入 "),a("code",[t._v("gofmt –w program.go")]),t._v(" 会格式化该源文件的代码然后将格式化后的代码覆盖原始内容（如果不加参数 "),a("code",[t._v("-w")]),t._v(" 则只会打印格式化后的结果而不重写文件）；"),a("code",[t._v("gofmt -w *.go")]),t._v(" 会格式化并重写所有 Go 源文件；"),a("code",[t._v("gofmt map1")]),t._v(" 会格式化并重写 map1 目录及其子目录下的所有 Go 源文件。")]),t._v(" "),a("p",[a("code",[t._v("gofmt")]),t._v(" 也可以通过在参数 "),a("code",[t._v("-r")]),t._v(" 后面加入用双引号括起来的替换规则实现代码的简单重构，规则的格式："),a("code",[t._v("<原始内容> -> <替换内容>")]),t._v("。")]),t._v(" "),a("p",[t._v("实例：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("gofmt "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'(a) -> a'")]),t._v(" –w *.go\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 上面的代码会将源文件中没有意义的括号去掉")]),t._v("\ngofmt "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a[n:len(a)] -> a[n:]'")]),t._v(" –w *.go\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 上面的代码会将源文件中多余的 len(a) 去掉")]),t._v("\ngofmt –r "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A.Func1(a,b) -> A.Func2(b,a)'")]),t._v(" –w *.go\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 上面的代码会将源文件中符合条件的函数的参数调换位置。")]),t._v("\n")])])]),a("h2",{attrs:{id:"代码文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码文档"}},[t._v("#")]),t._v(" 代码文档")]),t._v(" "),a("p",[a("code",[t._v("go doc")]),t._v(" 工具会从 Go 程序和包文件中提取顶级声明的首行注释以及每个对象的相关注释，并生成相关文档。")]),t._v(" "),a("p",[t._v("它也可以作为一个提供在线文档浏览的 web 服务器，"),a("a",{attrs:{href:"http://golang.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://golang.org"),a("OutboundLink")],1),t._v(" 就是通过这种形式实现的。")]),t._v(" "),a("p",[a("strong",[t._v("一般用法")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("go doc package")]),t._v(" 获取包的文档注释，例如："),a("code",[t._v("go doc fmt")]),t._v(" 会显示使用 "),a("code",[t._v("godoc")]),t._v(" 生成的 "),a("code",[t._v("fmt")]),t._v(" 包的文档注释。")]),t._v(" "),a("li",[a("code",[t._v("go doc package/subpackage")]),t._v(" 获取子包的文档注释，例如："),a("code",[t._v("go doc container/list")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("go doc package function")]),t._v(" 获取某个函数在某个包中的文档注释，例如："),a("code",[t._v("go doc fmt Printf")]),t._v(" 会显示有关 "),a("code",[t._v("fmt.Printf()")]),t._v(" 的使用说明。")])]),t._v(" "),a("p",[t._v("这个工具只能获取在 Go 安装目录下 "),a("code",[t._v("../go/src")]),t._v(" 中的注释内容。此外，它还可以作为一个本地文档浏览 web 服务器。在命令行输入 "),a("code",[t._v("godoc -http=:6060")]),t._v("，然后使用浏览器打开 "),a("a",{attrs:{href:"http://localhost:6060/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:6060"),a("OutboundLink")],1),t._v(" 后，你就可以看到本地文档浏览服务器提供的页面。")]),t._v(" "),a("p",[a("code",[t._v("godoc")]),t._v(" 也可以用于生成非标准库的 Go 源码文件的文档注释")]),t._v(" "),a("h2",{attrs:{id:"其他工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他工具"}},[t._v("#")]),t._v(" 其他工具")]),t._v(" "),a("p",[t._v("Go 自带的工具集主要使用脚本和 Go 语言自身编写的，目前版本的 Go 实现了以下三个工具：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("go install")]),t._v(" 是安装 Go 包的工具，类似 Ruby 中的 rubygems。主要用于安装非标准库的包文件，将源代码编译成对象文件。")]),t._v(" "),a("li",[a("code",[t._v("go fix")]),t._v(" 用于将你的 Go 代码从旧的发行版迁移到最新的发行版，它主要负责简单的、重复的、枯燥无味的修改工作，如果像 API 等复杂的函数修改，工具则会给出文件名和代码行数的提示以便让开发人员快速定位并升级代码。Go 开发团队一般也使用这个工具升级 Go 内置工具以及 谷歌内部项目的代码。"),a("code",[t._v("go fix")]),t._v(" 之所以能够正常工作是因为 Go 在标准库就提供生成抽象语法树和通过抽象语法树对代码进行还原的功能。该工具会尝试更新当前目录下的所有 Go 源文件，并在完成代码更新后在控制台输出相关的文件名称。")]),t._v(" "),a("li",[a("code",[t._v("go test")]),t._v(" 是一个轻量级的单元测试框架（第 13 章）。")])]),t._v(" "),a("h2",{attrs:{id:"protobuf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protobuf"}},[t._v("#")]),t._v(" Protobuf")]),t._v(" "),a("p",[t._v("protobuf 即 Protocol Buffers，是一种轻便高效的结构化数据存储格式，与语言、平台无关，可扩展可序列化。protobuf 性能和效率大幅度优于 JSON、XML 等其他的结构化数据格式。protobuf 是以二进制方式存储的，占用空间小，但也带来了可读性差的缺点。protobuf 在通信协议和数据存储等领域应用广泛。例如著名的分布式缓存工具 "),a("a",{attrs:{href:"https://memcached.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Memcached"),a("OutboundLink")],1),t._v(" 的 Go 语言版本"),a("a",{attrs:{href:"https://github.com/golang/groupcache",target:"_blank",rel:"noopener noreferrer"}},[t._v("groupcache"),a("OutboundLink")],1),t._v(" 就使用了 protobuf 作为其 RPC 数据格式。")]),t._v(" "),a("p",[t._v("Protobuf 在 "),a("code",[t._v(".proto")]),t._v(" 定义需要处理的结构化数据，可以通过 "),a("code",[t._v("protoc")]),t._v(" 工具，将 "),a("code",[t._v(".proto")]),t._v(" 文件转换为 C、C++、Golang、Java、Python 等多种语言的代码，兼容性好，易于使用。")]),t._v(" "),a("p",[t._v("如果需要在 Golang 中使用 protobuf，还需要安装 protoc-gen-go，这个工具用来将 "),a("code",[t._v(".proto")]),t._v(" 文件转换为 Golang 代码。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("go get "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-u")]),t._v(" github.com/golang/protobuf/protoc-gen-go\n")])])]),a("p",[t._v("protoc-gen-go 将自动安装到 "),a("code",[t._v("$GOPATH/bin")]),t._v(" 目录下，也需要将这个目录加入到环境变量中。")]),t._v(" "),a("h2",{attrs:{id:"webassembly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webassembly"}},[t._v("#")]),t._v(" WebAssembly")]),t._v(" "),a("p",[t._v("Go 语言在 1.11 版本(2018年8月) 加入了对 WebAssembly (Wasm) 的原生支持，使用 Go 语言开发 WebAssembly 相关的应用变得更加地简单。Go 语言的内建支持是 Go 语言进军前端的一个重要的里程碑。")]),t._v(" "),a("p",[t._v("在这之前，如果想使用 Go 语言开发前端，需要使用 "),a("a",{attrs:{href:"https://github.com/gopherjs/gopherjs",target:"_blank",rel:"noopener noreferrer"}},[t._v("GopherJS"),a("OutboundLink")],1),t._v("，GopherJS 是一个编译器，可以将 Go 语言转换成可以在浏览器中运行的 JavaScript 代码。新版本的 Go 则直接将 Go 代码编译为 wasm 二进制文件，而不再需要转为 JavaScript 代码。更巧的是，实现 GopherJS 和在 Go 语言中内建支持 WebAssembly 的是同一拨人。")]),t._v(" "),a("p",[t._v("Go 语言实现的函数可以直接导出供 JavaScript 代码调用，同时，Go 语言内置了 "),a("a",{attrs:{href:"https://github.com/golang/go/tree/master/src/syscall/js",target:"_blank",rel:"noopener noreferrer"}},[t._v("syscall/js"),a("OutboundLink")],1),t._v(" 包，可以在 Go 语言中直接调用 JavaScript 函数，包括对 DOM 树的操作。")]),t._v(" "),a("h2",{attrs:{id:"资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源"}},[t._v("#")]),t._v(" 资源")]),t._v(" "),a("p",[t._v("go语言入门指南：https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/preface.md")]),t._v(" "),a("p",[t._v("https://draveness.me/golang/docs/")]),t._v(" "),a("p",[t._v("effective go")]),t._v(" "),a("p",[t._v("go语言资源库 :https://github.com/Unknwon/go-study-index")]),t._v(" "),a("p",[t._v("Go 优质blog: https://czyt.tech/post/golang-perf-reference/")]),t._v(" "),a("p",[t._v("七天go：https://geektutu.com/post/geecache-day6.html")])])}),[],!1,null,null,null);s.default=e.exports}}]);