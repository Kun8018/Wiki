(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{390:function(t,s,a){"use strict";a.r(s);var e=a(44),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Git是最常用的版本管理工具，利于协同开发")]),t._v(" "),a("p",[t._v("​        原来的标题是Github使用技巧，但是后来开发之后发现github和gitlab都是git的衍生产品，因此改为Git")]),t._v(" "),a("h2",{attrs:{id:"多人协同开发流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多人协同开发流程"}},[t._v("#")]),t._v(" 多人协同开发流程")]),t._v(" "),a("p",[t._v("​        一般在开发产品适合，通常挑选一个分支作为可以上线的正式版本分支，比如master或者release，develop是用来开发的，可能带有bug。 当很多人参与同一个项目的时候，如果给每个人都有Commit到master和release分支的权限是非常不合理的。这个时候，就可以使用Fork + PR/MR的方式来实现多人协作开发。 每个开发者先Fork一份代码到自己的账号下，功能完成后发PR给项目管理者，项目管理者Code Review后确认无误后即可进行Merge操作，这样协作开发效率高，问题少。")]),t._v(" "),a("h2",{attrs:{id:"安装git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装git"}},[t._v("#")]),t._v(" 安装Git")]),t._v(" "),a("p",[t._v("windows端")]),t._v(" "),a("p",[t._v("下载git工具，"),a("code",[t._v("[这里是链接](https://git-scm.com/downloads)")]),t._v("，选择适合自己的版本进行安装。")]),t._v(" "),a("p",[t._v("mac端")]),t._v(" "),a("p",[t._v("苹果电脑自带Git。")]),t._v(" "),a("p",[t._v("linux")]),t._v(" "),a("p",[t._v("以centos为例")]),t._v(" "),a("p",[t._v("下载git源代码压缩文件")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.23.0.tar.xz\n")])])]),a("p",[t._v("解压缩和解归档")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("xz -d git-2.23.0.tar.xz\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -xvf git-2.23.0.tar\n")])])]),a("p",[t._v("安装底层依赖库")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("yum -y "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" libcurl-devel\n")])])]),a("p",[t._v("构建和安装")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),a("h2",{attrs:{id:"github设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#github设置"}},[t._v("#")]),t._v(" Github设置")]),t._v(" "),a("p",[t._v("Windows新安装Git需要设置github账户。Mac默认没有修改的情况mac使用icloud账户登录系统，提交时会提示"),a("code",[t._v("Your name and email address were configured automatically based on your username and hostname. Please check that they are accurate")]),t._v(".也需要将提交用户改为github账户。")]),t._v(" "),a("p",[t._v("windows在cmd窗口输入命令，mac在终端输入。")]),t._v(" "),a("p",[t._v("方式一：直接设置自己的用户名和邮箱")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git config"),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --global")]),t._v(" user.name ")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coliyin@163.com"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git config"),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --global")]),t._v(" user.email ")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coliyin@163.com"')]),t._v("\n")])])]),a("p",[t._v("设置SSHkey")]),t._v(" "),a("p",[t._v("方式二：修改配置文件")]),t._v(" "),a("p",[t._v("在终端输入")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git config --global --edit\n")])])]),a("p",[t._v("然后会进入vi修改配置文件，将name=和email=之后的内容修改为自己的用户名和邮箱。记得将首列的#号去掉。")]),t._v(" "),a("p",[t._v("修改完后渐入命令使配置生效")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git commit --amend --reset-author\n")])])]),a("p",[t._v("也可以按照windows设置，最后使其")]),t._v(" "),a("p",[a("strong",[t._v("通常来说，本地的Git只能建议只有一个版本，否则提交代码或者pr时会显示多个账号，会造成混乱")])]),t._v(" "),a("h3",{attrs:{id:"邮箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邮箱"}},[t._v("#")]),t._v(" 邮箱")]),t._v(" "),a("p",[t._v("邮箱是GitHub验证账户的重要标识，包括SSH key的生成。所以一般入职公司之后，如果使用GitHub都会要求改成公司的，所以更换邮箱之后都要重新生成一次public key,直接使用原来的会报错，像这样子")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("fatal: unable to access "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://github.com/Kun8018/Kun8018.github.io.git/'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" LibreSSL SSL_connect: SSL_ERROR_SYSCALL "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" connection to github.com:443 \n")])])]),a("p",[t._v("在本地环境执行")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("ssh-keygen -t rsa -b "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),t._v(" -C "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"your-github@email.com"')]),t._v("\n")])])]),a("p",[t._v("然后找到对应的ssh key")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" .ssh\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~/.ssh\n")])])]),a("p",[t._v("查看key中的内容")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" id_rsa.pub\n")])])]),a("p",[t._v("复制输出并且在GitHub常见ssh key")]),t._v(" "),a("p",[t._v("在GitHub。account -> settings -> create a SSH and GPG keys，把本地的key粘贴进去就好")]),t._v(" "),a("p",[t._v("现在已经可以运行了，可以在本地验证一下")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ssh")]),t._v(" -vT git@github.com\n")])])]),a("p",[t._v("输出是这样就代表可以")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("debug1: channel "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(": free: client-session, nchannels "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nTransferred: sent "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3848")]),t._v(", received "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2040")]),t._v(" bytes, "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),t._v(" seconds\nBytes per second: sent "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16032.4")]),t._v(", received "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8499.5")]),t._v("\ndebug1: Exit status "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),a("h2",{attrs:{id:"从远程仓库拉取项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从远程仓库拉取项目"}},[t._v("#")]),t._v(" 从远程仓库拉取项目")]),t._v(" "),a("p",[t._v("GitHub可以使用http和ssh两种方式获取代码")]),t._v(" "),a("p",[t._v("https比较简单，但是每次fetch和push都需要账号密码")]),t._v(" "),a("p",[t._v("sshfetch和push不需要在输入账号密码：")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("ssh-keygen -t rsa -b 4096 -C "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1027690173@qq.com"')]),t._v("\n")])])]),a("p",[t._v("会请求你输入文件名和设置密码，可以不设置直接enter跳过，文件名为默认id_rsa，密码默认为空")]),t._v(" "),a("p",[t._v("在.ssh下查看文件，有id_rsa或id_dsa命名的文件即是，后缀为.pub的是公钥，没有的是私钥")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("cd ~/.ssh\nls\n")])])]),a("p",[t._v("运行ssh-agent")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("eval "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$(ssh-agent -s)"')]),t._v("\n")])])]),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("Host * IdentityFile ~/.ssh/id_rsa\n")])])]),a("p",[t._v("添加ssh key到github或gitlab")]),t._v(" "),a("p",[t._v("复制公钥")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("pbcopy < ~/.ssh/id_rsa.pub\n")])])]),a("p",[t._v("粘贴到github ssh-key或者gitlab")]),t._v(" "),a("p",[t._v("首次下载项目")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git clone \n")])])]),a("p",[t._v("获取远程修改到本地")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git  git@github.com:anyangxaut/LearnGit.git\n")])])]),a("h2",{attrs:{id:"基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本操作"}},[t._v("#")]),t._v(" 基本操作")]),t._v(" "),a("p",[t._v("将文件夹变成git仓库")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init \n")])])]),a("p",[t._v("当你完成了上述操作后，本地目录就变成了工作区（正在操作的工作目录）、仓库和工作区和本地仓库之间的暂存区（也称为缓存区）。")]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("git add")]),t._v("可以将指定的文件或所有文件添加到暂存区。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("如果不希望将文件添加到暂存区，可以按照提示，使用"),a("code",[t._v("git rm --cached <file>")]),t._v("命令将文件从暂存区放回到工作区。")]),t._v(" "),a("p",[t._v("如果这个时候对工作区的文件又进行了修改使得工作区和暂存区的内容并不相同了，再次执行"),a("code",[t._v("git status")]),t._v("可以看到哪个或哪些文件被修改了，如果希望用暂存区的内容恢复工作区，可以使用下面的命令。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" restore "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" restore "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("通过下面的命令可以将暂存区的内容纳入本地仓库，")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'本次提交的说明'")]),t._v("\n")])])]),a("p",[t._v("提交commit可以直接关联issue，在issue下面可以直接显示关联的commit代码")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'说明 #issue链接'")]),t._v("\n")])])]),a("p",[t._v("在pr的comment中添加issue的链接可以关联pr与issue，当pr被合并时issue会被自动关闭")]),t._v(" "),a("p",[t._v("可以通过"),a("code",[t._v("git log")]),t._v("查看每次提交对应的日志。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --graph --oneline --abbrev-commit\n")])])]),a("p",[t._v("gitlog不能显示已经删除的commit记录，需要查看时使用git reflog命令")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog\n")])])]),a("p",[t._v("reflog可以显示所有分支的操作记录，包括已经删除的commit，要回复已经删除的commit使用cherry-pick")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherru-pick 4c97ff3\n")])])]),a("h2",{attrs:{id:"远程操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程操作"}},[t._v("#")]),t._v(" 远程操作")]),t._v(" "),a("p",[t._v("添加远程仓库（Git服务器）")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin git@gitee.com:jackfrued/python.git\n")])])]),a("p",[t._v("从远程仓库取回代码。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master\n")])])]),a("p",[t._v("将本地代码（工作成果）推送到远程仓库。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master:master\n")])])]),a("p",[t._v("删除远程分支")]),t._v(" "),a("p",[t._v("执行此命令时慎重操作")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -r -d origin/develop\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin :develop\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --delete develop\n")])])]),a("h2",{attrs:{id:"分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),a("p",[t._v("创建分支")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("切换分支")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("分支合并")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("dev")]),t._v("分支上完成开发任务之后，如果希望将"),a("code",[t._v("dev")]),t._v("分支上的成果合并到"),a("code",[t._v("master")]),t._v("，可以先切回到"),a("code",[t._v("master")]),t._v("分支然后使用"),a("code",[t._v("git merge")]),t._v("来做分支合并，合并的结果如下图右上方所示。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch master\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --no-ff dev\n")])])]),a("p",[t._v("在合并分支时，没有冲突的部分Git会做自动合并。如果发生了冲突（如"),a("code",[t._v("dev")]),t._v("和"),a("code",[t._v("master")]),t._v("分支上都修改了同一个文件），会看到"),a("code",[t._v("CONFLICT (content): Merge conflict in <filename>. Automatic merge failed; fix conflicts and then commit the result")]),t._v("（自动合并失败，修复冲突之后再次提交）的提示，这个时候我们可以用"),a("code",[t._v("git diff")]),t._v("来查看产生冲突的内容。解决冲突通常需要当事人当面沟通之后才能决定保留谁的版本，冲突解决后需要重新提交代码。")]),t._v(" "),a("p",[t._v("删除分支")]),t._v(" "),a("p",[t._v("如果分支上的工作成果还没有合并，那么在删除分支时会看到"),a("code",[t._v("error: The branch '<branch-name>' is not fully merged.")]),t._v("这样的错误提示。如果希望强行删除分支，可以使用"),a("code",[t._v("-D")]),t._v("参数。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nerror: The branch "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<branch-name>'")]),t._v(" is not fully merged.\nIf you are sure you want to delete it, run "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git branch -D <branch-name>'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("分支变基")]),t._v(" "),a("p",[t._v("分支合并操作可以将多个分支上的工作成果最终合并到一个分支上，但是再多次合并操作之后，分支可能会变得非常的混乱和复杂，为了解决这个问题，可以使用"),a("code",[t._v("git rebase")]),t._v("操作来实现分支变基。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch master\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev\n")])])]),a("p",[t._v("关联远程分支")]),t._v(" "),a("p",[t._v("如果当前所在的分支还没有关联到远程分支，可以使用下面的命令为它们建立关联。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to origin/develop\n")])])]),a("p",[t._v("也可以指定别的分支关联到远程分支")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to origin/develop "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("也创建分支时使用了"),a("code",[t._v("--track")]),t._v("参数，直接指定与本地分支关联的远程分支")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --track "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin/develop\n")])])]),a("p",[t._v("解除关联远程分支")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --track "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin/develop\n")])])]),a("h3",{attrs:{id:"rebase、squash与merge的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase、squash与merge的区别"}},[t._v("#")]),t._v(" rebase、squash与merge的区别")]),t._v(" "),a("p",[t._v("rebase可以尽可能保持master分支干净，并且易于识别author")]),t._v(" "),a("p",[t._v("squash也可以保持master分支干净，但是master中author都是maintainer，而不是原owner")]),t._v(" "),a("p",[t._v("merge不能保持master分支干净，但是保持了所有的commit history，大多数情况下都是不好的，个别情况好")]),t._v(" "),a("h2",{attrs:{id:"子模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子模块"}},[t._v("#")]),t._v(" 子模块")]),t._v(" "),a("p",[t._v("当你在一个git项目上工作时，你需要在其中使用另一个Git项目。也许它是一个第三方开发的库或者是你独立开发合并在多个父项目中使用。")]),t._v(" "),a("p",[t._v("在git中可以用子模块submodule来管理这些项目，submodule允许你将一个git仓库当作另外一个git仓库的子目录，这允许你克隆另外一个仓库到你的项目中并且保持你的提交相对独立")]),t._v(" "),a("p",[t._v("克隆含有子模块的项目")]),t._v(" "),a("p",[t._v("克隆含有子模块的项目可以先克隆父项目，再更新子模块，另一种是直接递归克隆整个项目")]),t._v(" "),a("p",[t._v("先克隆父项目，再更新子模块")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("./.git assets\n")])])]),a("p",[t._v("此时子模块子模块还未初始化")]),t._v(" "),a("p",[t._v("初始化子模块")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule init\n")])])]),a("p",[t._v("更新子模块")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule update\n")])])]),a("p",[t._v("直接递归克隆整个项目")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("./.git assets --recursive\n")])])]),a("p",[t._v("添加子模块")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" https://"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("./.git assets\n")])])]),a("p",[t._v("查看子模块")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule\n")])])]),a("p",[t._v("更新子模块")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 更新项目内子模块到最新版本")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule update\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 更新子模块为远程项目的最新版本")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule update --remote\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 更新所有子模块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule foreach "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n")])])]),a("p",[t._v("修改子模块")]),t._v(" "),a("p",[t._v("在子模块中修改文件后，直接提交到远程项目分支")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" ci -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin HEAD:master\n")])])]),a("p",[t._v("删除子模块")]),t._v(" "),a("p",[t._v("删除子模块比较麻烦，需要手动删除相关的文件，否则在添加子模块时有可能出现错误。")]),t._v(" "),a("p",[t._v("首先删除子模块文件夹")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" --cached assets\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf assets\n")])])]),a("p",[t._v("删除相关子模块信息")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("submodule "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"assets"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\tpath "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" assets\n\turl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" https://github.com/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/.git\n")])])]),a("p",[t._v("删除相关子模块信息")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("submodule "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"assets"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\turl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" https://github.com/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/.git\n")])])]),a("p",[t._v("删除相关子模块文件")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf ./git/modules/assets\n")])])]),a("h2",{attrs:{id:"子仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子仓库"}},[t._v("#")]),t._v(" 子仓库")]),t._v(" "),a("p",[t._v("与submodule的异同")]),t._v(" "),a("p",[t._v("git submodule:")]),t._v(" "),a("p",[t._v("允许其他仓库指定以一个commit嵌入仓库的子目录")]),t._v(" "),a("p",[t._v("仓库clone下来要init和update")]),t._v(" "),a("p",[t._v("会产生文件记录和submodule版本信息")]),t._v(" "),a("p",[t._v("git submodule删除起来比较费劲")]),t._v(" "),a("p",[t._v("git subtree：")]),t._v(" "),a("p",[t._v("避免以上问题")]),t._v(" "),a("p",[t._v("管理和更新流程比较方便")]),t._v(" "),a("p",[t._v("git subtree合并子仓库到项目中的子目录，不用像submodule一样每次子目录修改之后都要init和update，万一每次没update就直接add，将")]),t._v(" "),a("p",[t._v("git 1.5之后建议使用git submodule")]),t._v(" "),a("p",[t._v("使用方法")]),t._v(" "),a("p",[t._v("如果p1项目和p2项目共用S项目")]),t._v(" "),a("p",[t._v("添加subtree")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" subtree "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --prefix"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("s project path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("s project url"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --squash\n")])])]),a("p",[t._v("修改代码，可以改subtree里面的代码，添加相关commit")]),t._v(" "),a("p",[t._v("pull&push")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" subtree pull --prefix"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("s project path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("s project url"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --squash\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" subtree push --prefix"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("s project path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("s project url"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --squash\n")])])]),a("p",[t._v("拆分已有项目,比如P项目拆分出s项目")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" subtree "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),t._v(" -P "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("S project path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" -b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tmp branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("git会遍历所有commit，分离与S项目有关的commit，并存入临时分支branch中")]),t._v(" "),a("p",[t._v("创建子repo")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" s new path\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("S project path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tmp branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("S github"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin -u master\n")])])]),a("p",[t._v("清理原项目中的子项目数据")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" P project\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D \n")])])]),a("p",[t._v("在新项目中添加subtree")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" subtree "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --prefix"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("s project path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("s project url"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --squash\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])])]),a("h2",{attrs:{id:"其他操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他操作"}},[t._v("#")]),t._v(" 其他操作")]),t._v(" "),a("p",[a("code",[t._v("git fetch")]),t._v("：下载远程仓库的所有变动，可以将远程仓库下载到一个临时分支，然后再根据需要进行合并操作，"),a("code",[t._v("git fetch")]),t._v("命令和"),a("code",[t._v("git merge")]),t._v("命令可以看作是之前讲的"),a("code",[t._v("git pull")]),t._v("命令的分解动作。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch origin master:temp\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge temp\n")])])]),a("p",[a("code",[t._v("git push -f")]),t._v("：强制提交，完全以自己的提交为准，之前其他人的提交都会被覆盖，适用于pr被block之后重新提交，提交后不需要重新提pr.")]),t._v(" "),a("p",[a("code",[t._v("git rebase dev")]),t._v("：解决合并冲突。rebase之后如果有冲突，会进入临时变基分支，手动消除冲突之后在rebase")]),t._v(" "),a("p",[a("code",[t._v("git diff")]),t._v("：常用于比较工作区和仓库、暂存区与仓库、两个分支之间有什么差别。")]),t._v(" "),a("p",[a("code",[t._v("git diff --cached")]),t._v("：查看邮件add但没有commit的改动")]),t._v(" "),a("p",[a("code",[t._v("git diff HEAD")]),t._v(":是上面两条命令的合并")]),t._v(" "),a("p",[a("code",[t._v("git stash")]),t._v("：将当前工作区和暂存区发生的变动放到一个临时的区域，让工作区变干净。这个命令适用于手头工作还没有提交，但是突然有一个更为紧急的任务（如线上bug需要修正）需要去处理的场景。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop\n")])])]),a("p",[a("code",[t._v("git reset")]),t._v("：回退到指定的版本。")]),t._v(" "),a("p",[a("code",[t._v("git revert")]),t._v("：撤回提交信息。")]),t._v(" "),a("p",[a("code",[t._v("git cherry-pick")]),t._v("：挑选某个分支的提交并作为一个新的提交引入到你当前分支上。")]),t._v(" "),a("p",[t._v("默认cherry-pick只挑选单次的commit，如果想转移多个commit，使用命令git cherry-pick commitid1...commitid100")]),t._v(" "),a("p",[t._v("...命令默认不包含第一个commit id，如果你想包含第一个commit，也就是闭区间，使用git cherry-pick A^...B")]),t._v(" "),a("p",[t._v("Cherry-pick的过程中如果有冲突，需要先修改冲突文件，再git add .，然后继续执行git cherry-pick --continue")]),t._v(" "),a("p",[t._v("在任何阶段都可以执行"),a("code",[t._v("git cherry-pick --abort")]),t._v("放弃本次cherry-pick")]),t._v(" "),a("p",[a("code",[t._v("git tag")]),t._v("：经常用于查看或新增一个标签。")]),t._v(" "),a("p",[a("code",[t._v("git rebase")]),t._v("：分支变基，多用于合并commit和重新合并master分支的代码")]),t._v(" "),a("p",[t._v("如果一次开发提交过多commit，会有很多弊端：")]),t._v(" "),a("p",[t._v("1.不利于代码review：如果做一个很小的功能有很多commit，会很多。")]),t._v(" "),a("p",[t._v("2.会造成分支污染：如果项目充满了无用的commit，有一天项目出现紧急问题需要回滚代码，却发现海量commit，会很崩溃")]),t._v(" "),a("p",[t._v("合并最近四次commit")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i HEAD~4\n")])])]),a("p",[t._v("rebase之后进入vim模式，把不需要的commit前面的pick改为squash就可以")]),t._v(" "),a("p",[t._v("合并其他分支")]),t._v(" "),a("p",[t._v("每次开发完都要先在master分支下拉取别的同事的远程代码，然后当前分支对master分支进行合并才不会冲突")]),t._v(" "),a("p",[t._v("具体操作")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("git:"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("feature1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":git rebase master\n")])])]),a("p",[t._v("执行命令后：")]),t._v(" "),a("p",[t._v("首先git会把feature1分支里面的每个commit取消掉")]),t._v(" "),a("p",[t._v("然后把上面的操作临时保存成一个patch文件，存在"),a("code",[t._v(".git/rebase")]),t._v("目录下")]),t._v(" "),a("p",[t._v("然后把feature1分支更新到最新的master分支下")]),t._v(" "),a("p",[t._v("最后把上面保存的patch文件应用到feature1分支上")]),t._v(" "),a("p",[t._v("出现冲突时需要先解决冲突，然后执行命令")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --continue\n")])])]),a("p",[t._v("在任何时候都可以随时取消rebase操作")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --abort\n")])])]),a("p",[a("code",[t._v("git alias")]),t._v("可以配置命令的别名，简化命令")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\n\ngit ci -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit message"')]),t._v("\n")])])]),a("h2",{attrs:{id:"pr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pr"}},[t._v("#")]),t._v(" pr")]),t._v(" "),a("p",[t._v("GitHub pr")]),t._v(" "),a("p",[t._v("强制push之后pr不能重开")]),t._v(" "),a("h2",{attrs:{id:"gitflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitflow"}},[t._v("#")]),t._v(" Gitflow")]),t._v(" "),a("p",[t._v("进入本地文件夹，打开Git bash,")]),t._v(" "),a("p",[t._v("执行指令进行初始化，会在原始文件夹中生成一个隐藏的文件夹.git")]),t._v(" "),a("div",{staticClass:"language-node extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("rm -rf .git//删掉原来的.git目录\n$ git init\n")])])]),a("p",[t._v("将文件添加到本地仓库,运行命令：")]),t._v(" "),a("div",{staticClass:"language-node extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git add . \n")])])]),a("p",[t._v("输入本次提交说明")]),t._v(" "),a("div",{staticClass:"language-node extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git commit -m "layout"\n')])])]),a("p",[t._v("将本地仓库与远程仓库相关联，")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git remote add origin https://github.com/CongliYin/CSS.git")]),t._v("\n")])])]),a("p",[t._v("如果出现错误：fatal: remote origin already exists，则执行以下语句：")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git remote rm origin")]),t._v("\n")])])]),a("p",[t._v("执行上传命令")]),t._v(" "),a("div",{staticClass:"language-node extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push origin master\n")])])]),a("p",[t._v("新建远程仓库需要添加-u参数")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git push -u origin master\n")])])]),a("p",[t._v("如果出现错误failed to push som refs to…….，则执行以下语句，先把远程服务器github上面的文件拉先来，再push 上去。：")]),t._v(" "),a("div",{staticClass:"language-node extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git pull origin master\n")])])]),a("p",[t._v("如果出现错误fatal: refusing to merge unrelated histories，后面加上--allow-unrelated-histories")]),t._v(" "),a("div",{staticClass:"language-node extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git pull origin master --allow-unrelated-histories\n")])])]),a("p",[t._v("特别注意：执行命令后，git会弹出一个GitHub登陆的小界面，你登录成功后要求你输入用户名和密码。这里的密码并不是你的GitHub的密码或者本地git的密码。"),a("strong",[t._v("而是GitHub的Personal access tokens")])]),t._v(" "),a("p",[t._v("https://github.com/settings/tokens")]),t._v(" "),a("h3",{attrs:{id:"错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误"}},[t._v("#")]),t._v(" 错误")]),t._v(" "),a("p",[t._v("GitHub pull之后有冲突")]),t._v(" "),a("p",[t._v("尚未完成合并(MERGE_HEAD存在)？")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf .git/MERGE*\n")])])]),a("p",[t._v("或者")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --quit\n")])])]),a("h2",{attrs:{id:"git-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-action"}},[t._v("#")]),t._v(" git action")]),t._v(" "),a("p",[t._v("持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。")]),t._v(" "),a("p",[t._v("很多操作在不同项目里都是类似的，完全可以共享，因此github允许开发者把每个操作写成独立的脚本文件，存放到代码仓库里，使得其他开发者可以引用")]),t._v(" "),a("p",[t._v("如果你需要某个action，不必自己写复杂的脚本，直接引用别人写好的action即可，整个持续集成过程就变成了一个actions 的组合")]),t._v(" "),a("h3",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念：")]),t._v(" "),a("p",[t._v("workflow：持续集成一次运行的过程，就是一个workflow")]),t._v(" "),a("p",[t._v("job：一个workflow由一个或者多个job组成，含义是一次持续集成的运行可以完成多个任务")]),t._v(" "),a("p",[t._v("step：每个job由多个step组成，一步步完成")]),t._v(" "),a("p",[t._v("action：每个step可以依次执行一个或者多个命令(action)")]),t._v(" "),a("p",[t._v("github actions的配置文件叫做workflow文件，存放在代码仓库的.github/workflow目录")]),t._v(" "),a("p",[t._v("workflow采用yaml文件，文件名可以任取，后缀名统一为.yml，一个库可以有多个workflow文件，github只要发现.github/workflows目录里面有.yml文件就会自动运行该文件")]),t._v(" "),a("p",[t._v("workflow中常用的配置字段")]),t._v(" "),a("p",[a("strong",[t._v("name")]),t._v("：workflow的名称，如果省略该字段，则默认是workflow的文件名")]),t._v(" "),a("p",[a("strong",[t._v("on")]),t._v("：指定触发workflow的条件，通常是某些事件，可以是事件或事件的数组")]),t._v(" "),a("p",[t._v("例："),a("code",[t._v("on:[push,pull_request]")]),t._v("表示push或者pull_request事件都可以触发workflow")]),t._v(" "),a("p",[t._v("on也可以限定某些分支的事件或标签，")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master\n")])])]),a("p",[t._v("上面的代码表示是有master分支push时才触发")]),t._v(" "),a("p",[a("strong",[t._v("jobs")]),t._v("：jobs是workflow文件的主体，表示要执行的一项或者多项任务")]),t._v(" "),a("p",[t._v("jobs中：")]),t._v(" "),a("p",[t._v("首先写出每一项任务的joh_id，名称自定义就可以，添加name字段是任务的说明")]),t._v(" "),a("p",[t._v("needs字段指定当前任务的依赖关系，即运行顺序")]),t._v(" "),a("p",[t._v("runs-on字段指定运行所需要的虚拟机环境，这是必填字段")]),t._v(" "),a("p",[t._v("runs-on可以选择github提供的虚拟机或者自己的服务器，使用自己的机器需要github能进行访问并给其所需的权限")]),t._v(" "),a("p",[t._v("有时候需要对多个操作系统、多个编程语言版本、多个平台进行测试，此时可以在runs-on字段下面配置一个构建矩阵")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("runs-on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("matrix.os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("strategy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("matrix")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("16.04 ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18.04")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 上面的代码配置了两种os操作系统和三种node版本共六种情况的构建矩阵，`{{matrix.os}}`是一个上下文参数")]),t._v("\n")])])]),a("p",[t._v("strategy策略包括：")]),t._v(" "),a("p",[t._v("matrix：构建矩阵")]),t._v(" "),a("p",[t._v("fail-fast：默认为true，即一旦某个矩阵任务失败则立即取消所有还在进行中的任务")]),t._v(" "),a("p",[t._v("max-paraller：可同时执行的最大并发数，默认情况下github会动态调整")]),t._v(" "),a("p",[t._v("此外还可以使用include为一个特定的"),a("code",[t._v("os")]),t._v("版本声明，用exclude删除特定的配置项")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("runs-on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("matrix.os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("strategy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("matrix")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("macos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("latest windows"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("latest ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18.04")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("os")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" windows"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("latest\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("npm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exclude")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("os")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" macos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("latest\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])]),a("p",[t._v("上面的代码声明了当os为windows-latest时增加一个node和npm的特定版本，当os为Macos-latest时移出node为4的版本")]),t._v(" "),a("p",[a("strong",[t._v("jobs.steps")]),t._v("：steps字段指定每个job的运行步骤，可以包含一个或者多个步骤，每个steps可以指定三个字段")]),t._v(" "),a("p",[t._v("Steps.name：步骤名称")]),t._v(" "),a("p",[t._v("steps.run：该步骤的shell指令或者action")]),t._v(" "),a("p",[t._v("steps.env：该步骤所需的环境变量")]),t._v(" "),a("p",[t._v("steps.uses:使用哪个action")]),t._v(" "),a("p",[t._v("checkout action是一个标准动作，当有以下情况时必须率先使用checkout action：")]),t._v(" "),a("p",[t._v("1.workflow需要项目库当代码副本，如构建、测试、或持续集成这些操作")]),t._v(" "),a("p",[t._v("2.workflow中至少有一个action是在同一个项目库下定义的")]),t._v(" "),a("p",[t._v("此外，如果只是想浅克隆库或者只复制最新的版本，使用with:fetch-depth声明")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" actions/checkout@v1\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("fetch-depth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),a("p",[t._v("也可以引用现有库、自己的库或者docker的container")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("my_first_job")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("step")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" My first step\n         "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//alpine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.8")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ./.github/actions/hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("word"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("action\n         "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" actions/setup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("node@v1\n         "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n             "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("node-version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10.x\n")])])]),a("p",[a("strong",[t._v("if语句")]),t._v("：")]),t._v(" "),a("p",[t._v("在jobs和step中可以使用if条件语句，只有满足条件时才执行具体的job或者step")]),t._v(" "),a("p",[t._v("if语句中的任务检查语句")]),t._v(" "),a("p",[t._v("always():总是返回true")]),t._v(" "),a("p",[t._v("success():当上一步执行成功时才会返回true")]),t._v(" "),a("p",[t._v("failure()：当上一步执行失败时才会返回ture")]),t._v(" "),a("p",[t._v("cancelled()：当workflow被取消时返回true")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" step1\n      if"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("always()\n      \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" step2\n      if"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("success()\n      \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" step3\n      if"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("failure()\n")])])]),a("p",[a("strong",[t._v("上下文和表达式(expression)")])]),t._v(" "),a("p",[t._v("有时候我们需要和第三方平台交互，这时通常需要配置一个token，但是这个token不可能明文使用的，通过${ { } }")]),t._v(" "),a("p",[t._v("的表达式就能传入")]),t._v(" "),a("p",[t._v("具体做法：")]),t._v(" "),a("p",[t._v("1.在具体repo库Settings中添加一个密钥，如SOMEONE_TOKEN")]),t._v(" "),a("p",[t._v("2.在workflow中通过表达式将 token安全地传入环境变量")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" My first action\n     "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("env")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      SOMEONE_TOKEN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" secrets.SOMEONE_TOKEN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这里的secrets就是一个上下文，除此之外还有：")]),t._v(" "),a("p",[t._v("github.event_name:触发workflow的事件名称")]),t._v(" "),a("p",[t._v("job.status:当前job的状态，如success、failure等")]),t._v(" "),a("p",[t._v("Steps.output:某个action的输出")]),t._v(" "),a("p",[t._v("runner.os：runner的操作系统，如windows、linux或者macOS")]),t._v(" "),a("p",[t._v("github还做了一个官方市场，可以搜索到其他人提交的actions，另外还有一个awesome actions的仓库可以找到其他action")]),t._v(" "),a("h3",{attrs:{id:"回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回滚"}},[t._v("#")]),t._v(" 回滚")]),t._v(" "),a("p",[t._v("在github action下找到要回滚的版本，点击re-run就可以回到指定的版本")]),t._v(" "),a("h3",{attrs:{id:"触发其他repo的workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#触发其他repo的workflow"}},[t._v("#")]),t._v(" 触发其他repo的workflow")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Dispatch Event\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\n\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("runs-on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("latest\n\t\t\n\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" actions/checkout@v1\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("fetch-depth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\t\t\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dispatch event to another_repository\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("env")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("GITHUB_TOKEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" secrets.REPO_ACCESS_TOKEN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("EVENT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" YOUR_EVENT_TYPE\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ORG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" YOUR_ORG_NAME\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("REPO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" YOUR_TARGET_REPO_NAME\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v('\n\t\t\t\tcurl -d "{\\"event_type\\": \\"${EVENT}\\"}" -H "Content-Type: application/json" -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github.everest-preview+json" "https://api.github.com/repos/${ORG}/${REPO}/dispatches"')]),t._v("\n")])])]),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hugo publish\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("master\n\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("repository_dispatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("types")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" sub_commit\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build-deploy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("runs-on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18.04")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" actions/checkout@v2\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("submodule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" recursive\n")])])]),a("h3",{attrs:{id:"好用的git-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#好用的git-action"}},[t._v("#")]),t._v(" 好用的git action")]),t._v(" "),a("p",[t._v("action-js-inline")]),t._v(" "),a("p",[t._v("Https://github.com/marketplace/actions/execute-javascript-inline")]),t._v(" "),a("p",[t._v("可以在git action里执行js代码，而不只是shell代码")]),t._v(" "),a("h3",{attrs:{id:"本地跑git-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地跑git-action"}},[t._v("#")]),t._v(" 本地跑git action")]),t._v(" "),a("p",[t._v("https://www.github.com/nektos/act")]),t._v(" "),a("h2",{attrs:{id:"git-hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-hooks"}},[t._v("#")]),t._v(" Git Hooks")]),t._v(" "),a("h2",{attrs:{id:"更新不了代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新不了代码"}},[t._v("#")]),t._v(" 更新不了代码")]),t._v(" "),a("p",[t._v("代码加入本地仓库后，上传后显示everything -up-date，但是远程仓库没有更新")]),t._v(" "),a("p",[t._v("先创建新分支")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git branch newbranch\n")])])]),a("p",[t._v("检查分支创建是否成功")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git branch\n")])])]),a("p",[t._v("此时输出")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("* master\n  newbranch\n")])])]),a("p",[t._v("切换到新创建的分支")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git checkout newbranch\n")])])]),a("p",[t._v("将改动提交到新分支")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git add .\ngit commit -a\n")])])]),a("p",[t._v("回到主分支")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git checkout master\n")])])]),a("p",[t._v("将新分支与原分支合并")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git merge newbranch \n")])])]),a("p",[t._v("正常合并没有冲突，如果产生冲突，查看冲突文件修改后再一次提交")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git diff\n")])])]),a("p",[t._v("解决后就正常提交")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git push -u origin master\n")])])]),a("p",[t._v("删除分支")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git branch -d newbranch\n")])])]),a("h2",{attrs:{id:"检查版本信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查版本信息"}},[t._v("#")]),t._v(" 检查版本信息")]),t._v(" "),a("p",[t._v("查看远程仓库信息")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git remote -v\n")])])]),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git status\n")])])]),a("p",[t._v("检查文件或者文件夹在工作区或暂存区的状态，有三种")]),t._v(" "),a("p",[t._v("文件已经从工作区add到暂存区，git restore --staged filename")]),t._v(" "),a("p",[t._v("文件在工作区、暂存区都有，并且在工作区进行了修改或删除，没有add到暂存区")]),t._v(" "),a("p",[t._v("git add file")]),t._v(" "),a("p",[t._v("文件只在工作区")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git checkout -- <file>\n")])])]),a("p",[t._v("拉取暂存区文件为工作区文件")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git log\n")])])]),a("p",[t._v("git log 会按提交时间列出所有的更新，最近的更新排在最上面")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git open\n")])])]),a("p",[t._v("在git目录输入git open就能打开github对于的页面")]),t._v(" "),a("div",{staticClass:"language-node extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm install -g git-open\n")])])]),a("p",[t._v("将本地仓库文件撤回至工作区")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git reset --hard\ngit reser --mixed\n")])])]),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git revert HEAD\n")])])]),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git fetch origin\n")])])]),a("p",[t._v("创建并更新远程分支，并拉取代码到origin，一般默认是master")]),t._v(" "),a("p",[t._v("git pull可以认为是git fetch和git merge的组合体")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git rebase origin/master\n")])])]),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git diff\n")])])]),a("p",[t._v("git-diff能在命令行显示当前代码与上次提交时代码的修改，可以逐行见检查代码")]),t._v(" "),a("h2",{attrs:{id:"代码检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码检查"}},[t._v("#")]),t._v(" 代码检查")]),t._v(" "),a("h3",{attrs:{id:"js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js"}},[t._v("#")]),t._v(" js")]),t._v(" "),a("p",[t._v("使用husky")]),t._v(" "),a("p",[t._v("安装")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" husky -D\n")])])]),a("p",[t._v("编辑package。json 》 prepare 脚本并且运行")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" set-script prepare "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"husky install"')]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" run prepare\n")])])]),a("p",[t._v("添加钩子函数")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("npx husky "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" .husky/pre-commit "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm test"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" ./husky/pre-commit\n")])])]),a("p",[t._v("然后提交commit就会检查")]),t._v(" "),a("h2",{attrs:{id:"在github上工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在github上工作"}},[t._v("#")]),t._v(" 在Github上工作")]),t._v(" "),a("h3",{attrs:{id:"向开源项目贡献代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#向开源项目贡献代码"}},[t._v("#")]),t._v(" 向开源项目贡献代码")]),t._v(" "),a("p",[t._v("一般开源库不会给其他人开放push权限，如果有很好的想法或者发现开源库有bug，可以向作者提pr(pull request)/mr(merge request)")]),t._v(" "),a("p",[t._v("首先Fork（关联复制）一份开源库A的代码到自己的github账号下( A1)")]),t._v(" "),a("p",[t._v("自己对于A1有完全的权限，此时在A1上加入自己的代码，commitA")]),t._v(" "),a("p",[t._v("发送Merge Request到原A库作者")]),t._v(" "),a("p",[t._v("原A库作者审核同意后，将commitA merge到A库代码中")]),t._v(" "),a("h3",{attrs:{id:"github-activity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#github-activity"}},[t._v("#")]),t._v(" GitHub activity")]),t._v(" "),a("p",[t._v("一般来说，只有对GitHub上repo的master分支操作时，比如push或者合并到master时GitHub activity会有记录")]),t._v(" "),a("h3",{attrs:{id:"github-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#github-api"}},[t._v("#")]),t._v(" GitHub api")]),t._v(" "),a("p",[t._v("api.github.com/repos/{repo_name}/releases/tags/")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -o index.json https:api.github.com/repos/vesoft-inc/nebula-graph/releases/tags/v2.5.0\nhttps:api.github.com/repos/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("repo_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("/releases/latest\n")])])]),a("h3",{attrs:{id:"pr-issue-template"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pr-issue-template"}},[t._v("#")]),t._v(" pr/issue template")]),t._v(" "),a("h3",{attrs:{id:"github-release"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#github-release"}},[t._v("#")]),t._v(" GitHub release")]),t._v(" "),a("h2",{attrs:{id:"git-open"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-open"}},[t._v("#")]),t._v(" git-open")]),t._v(" "),a("p",[t._v("git-open是一个npm包，可以在git提交后在命令行输入，快速打开gitlab")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("npm install git"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("open\n")])])]),a("p",[t._v("使用时直接输入")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git open\n")])])]),a("p",[t._v("就可以在默认浏览器打开gitlab的提交页面")]),t._v(" "),a("p",[t._v("如果提交的分支不是master，需要在gitlab页面创建合并请求，选择审核人进行审核合并")]),t._v(" "),a("p",[t._v("在审核人确定合并之前，下次提交时不需要再次创建合并请求")]),t._v(" "),a("p",[t._v("确定合并之后下次提交到分支时则需要再次创建")]),t._v(" "),a("h2",{attrs:{id:"gitlab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab"}},[t._v("#")]),t._v(" Gitlab")]),t._v(" "),a("p",[t._v("gitlab自带nginx、redis等软件，所以运行起来较大，在RAM4GB及以上的服务器才可以跑起来")]),t._v(" "),a("h2",{attrs:{id:"gitbook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitbook"}},[t._v("#")]),t._v(" Gitbook")]),t._v(" "),a("p",[t._v("Gitbook是一个提供Markdown书籍托管的网络平台。支持通过git及github进行文档管理，使用它可以很简单地生成、发布电子图书。Gitbook也是一个Nodejs命令行工具，可以使用它搭建自己的gitbook站点。GitBook甚至提供Github hook，在每次push前自动更新书籍内容。")]),t._v(" "),a("p",[t._v("安装GitBook 控制台")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g gitbook-cli\n")])])]),a("p",[t._v("如果安装过gitbook旧版本需要卸载。")]),t._v(" "),a("p",[t._v("gitbook常用命令")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("gitbook serve -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("Gitbook首先把你的Markdown文件编译为HTML文件，并根据SUMMARY.md生成书的目录。所有生存的文件都保存在当前目录下的一个名为_book的子目录中。完成这些工作后，Gitbook会作为一个HTTP Server运行，并在8080端口监听HTTP请求。")]),t._v(" "),a("p",[t._v("运行以上命令后，打开浏览器，在地址栏输入："),a("code",[t._v("http://localhost:8080")]),t._v("即可看到你的书页了。")]),t._v(" "),a("p",[t._v("其中位于左侧书目顶部的"),a("code",[t._v("Introduction")]),t._v("一节就编译自README.md，而书目本身自编译自SUMMARY.md。你要在自己的网站上发布新书，只需把_book目录复制到服务器相应目录即可。至此Gitbook的基本用法就介绍完毕。")]),t._v(" "),a("h3",{attrs:{id:"gitbook的插件支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitbook的插件支持"}},[t._v("#")]),t._v(" Gitbook的插件支持")]),t._v(" "),a("p",[t._v("在页面中嵌入Disqus评论")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" gitbook-plugin-disqus\n")])])]),a("p",[t._v("然后建立一个book.json文件，其格式如下：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"plugins"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  \n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"disqus"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pluginsConfig"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  \n \t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"disqus"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  \n         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"shortName"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  \n           "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NAME-FROM-DISQUS"')]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("把上面的"),a("code",[t._v("NAME-FROM-DISQUS")]),t._v("修改为你在Disqus上的项目名即可。")]),t._v(" "),a("p",[t._v("再次运行命令：")]),t._v(" "),a("blockquote",[a("p",[t._v("$ gitbook serve -p 8080 .")])]),t._v(" "),a("p",[t._v("并刷新浏览器，即可看到附加了Disqus评论的页面。")]),t._v(" "),a("h3",{attrs:{id:"gitbook电子书封面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitbook电子书封面"}},[t._v("#")]),t._v(" Gitbook电子书封面")]),t._v(" "),a("p",[t._v("可以为电子书添加封面。只需添加2个名为"),a("code",[t._v("cover.jpg")]),t._v("和"),a("code",[t._v("cover_small.jpg")]),t._v("的两个图片即可。官方建议cover.jpg尺寸1800"),a("em",[t._v("2360，cover_small.jpg尺寸200")]),t._v("262。花2元即可在淘宝上找个做封面的人为你制造一个简单的封面，做得好就要花更多一些了 😃")]),t._v(" "),a("p",[t._v("总体而言，GitBook还是很好玩，比起其他写作平台而言，要自由、简单，并舒服得多，可以用Vim编辑，支持Markdown语法，用git管理，关联GitHub后每次push后还能自动编译，生成多种电子书格式。如果你的书极为畅销的话，还能获取到捐赠或购买，没有理由不尝试的呀。")]),t._v(" "),a("p",[a("strong",[t._v("删除电子书")])]),t._v(" "),a("p",[t._v("同样是在Book Setting中，可以删除电子书。在电子书列表中没有删除接口。")]),t._v(" "),a("h2",{attrs:{id:"svn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#svn"}},[t._v("#")]),t._v(" SVN")]),t._v(" "),a("p",[t._v("一般来说公司版本管理工具使用git的比较多，也有使用svn。SVN是sub vision的缩写，windows中svn客户端一般使用TortoiseSVN，mac中比较好用的当属CornerStone。TortoiseSVN是可视化svn界面，Cornerstone是收费的，因此你可以去网上下载破解版，直接安装即可。")]),t._v(" "),a("h3",{attrs:{id:"tortoisesvn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tortoisesvn"}},[t._v("#")]),t._v(" TortoiseSVN")]),t._v(" "),a("p",[t._v("TortoiseSVN 常年管理文件和目录。文件存储于一个中央版本库中。版本库就像一个常见的文件服 务器，除了它保存你对文件和目录所有的改变。这一特性使得你可以恢复文件的旧版本并查看历史-谁 在什么时间如何进行的修改。")]),t._v(" "),a("p",[t._v("创建版本库")]),t._v(" "),a("div",{staticClass:"language-svn extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("svnadmin create --fs-type bdb MyNewRepository\n")])])]),a("p",[t._v("图标重载")]),t._v(" "),a("p",[t._v("使用svn-checkout检查文件状态。对号表示状态正常，红色感叹号表示文件被修改未提交，黄色感叹号表示产生冲突。")]),t._v(" "),a("p",[t._v("拉取项目")]),t._v(" "),a("div",{staticClass:"language-svn extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n")])])]),a("p",[t._v("提交项目")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("svn commit\n")])])]),a("p",[t._v("更新文件")]),t._v(" "),a("div",{staticClass:"language-svn extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("svn update\n")])])]),a("h3",{attrs:{id:"cornerstone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cornerstone"}},[t._v("#")]),t._v(" Cornerstone")])])}),[],!1,null,null,null);s.default=n.exports}}]);