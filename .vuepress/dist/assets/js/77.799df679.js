(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{356:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("rust第二篇，主要讲多线程")]),t._v(" "),a("h2",{attrs:{id:"多线程并发编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程并发编程"}},[t._v("#")]),t._v(" 多线程并发编程")]),t._v(" "),a("p",[t._v("并发与并行")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("并发(Concurrent)")]),t._v(" 是多个队列使用同一个咖啡机，然后两个队列轮换着使用（未必是 1:1 轮换，也可能是其它轮换规则），最终每个人都能接到咖啡")]),t._v(" "),a("li",[a("strong",[t._v("并行(Parallel)")]),t._v(" 是每个队列都拥有一个咖啡机，最终也是每个人都能接到咖啡，但是效率更高，因为同时可以有两个人在接咖啡")]),t._v(" "),a("li",[t._v("串行：只有一个队列且仅使用一台咖啡机，前面哪个人接咖啡时突然发呆了几分钟，后面的人就只能等他结束才能继续接。如果其中一个队列占用太长时间，另外一个队列的人把他推开就行了，自己队友不能在背后开枪，但是其它队的可以")])]),t._v(" "),a("p",[a("strong",[t._v("并发和并行都是对“多任务”处理的描述，其中并发是轮流处理，而并行是同时处理")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("CPU 核心")]),t._v("对应的是上图的咖啡机，而"),a("strong",[t._v("多个线程的任务队列")]),t._v("就对应的多个排队的队列，由于终受限于 CPU 核心数，每个队列每次只会有一个任务被处理。")]),t._v(" "),a("p",[t._v("和排队一样，假如某个任务执行时间过长，就会导致用户界面的假死（相信使用 Windows 的同学或多或少都碰到过假死的问题）， 那么就需要 CPU 的任务调度了（真实 CPU 的调度很复杂，我们这里做了简化），有一个调度器会按照某些条件从队列中选择任务进行执行，并且当一个任务执行时间过长时，会强行切换该任务到后台中（或者放入任务队列，真实情况很复杂！），去执行新的任务。")]),t._v(" "),a("p",[t._v("不断这样的快速任务切换，对用户而言就实现了表面上的多任务同时处理，但是实际上最终也只有一个 CPU 核心在不停的工作。")]),t._v(" "),a("p",[t._v("因此并发的关键在于："),a("strong",[t._v("快速轮换处理不同的任务")]),t._v("，给用户带来所有任务同时在运行的假象。")]),t._v(" "),a("p",[t._v("在 OS 级别，多线程负责管理我们的任务队列，你可以简单认为一个线程管理着一个任务队列，然后线程之间还能根据空闲度进行任务调度。我们的程序只会跟 OS 线程打交道，并不关心 CPU 到底有多少个核心，真正关心的只是 OS，当线程把任务交给 CPU 核心去执行时，如果只有一个 CPU 核心，那么它就只能同时处理一个任务。")]),t._v(" "),a("p",[t._v("多核心并行")]),t._v(" "),a("p",[t._v("当 CPU 核心增多到 "),a("code",[t._v("N")]),t._v(" 时，那么同一时间就能有 "),a("code",[t._v("N")]),t._v(" 个任务被处理，那么我们的并行度就是 "),a("code",[t._v("N")]),t._v("，相应的处理效率也变成了单核心的 "),a("code",[t._v("N")]),t._v(" 倍（实际情况并没有这么高）")]),t._v(" "),a("p",[t._v("多核心并发")]),t._v(" "),a("p",[t._v("当核心增多到 "),a("code",[t._v("N")]),t._v(" 时，操作系统同时在进行的任务肯定远不止 "),a("code",[t._v("N")]),t._v(" 个，这些任务将被放入 "),a("code",[t._v("M")]),t._v(" 个线程队列中，接着交给 "),a("code",[t._v("N")]),t._v(" 个 CPU 核心去执行，最后实现了 "),a("code",[t._v("M:N")]),t._v(" 的处理模型，在这种情况下，"),a("strong",[t._v("并发跟并行时同时在发生的，所有用户任务从表面来看都在并发的运行，其实实际上，同一时刻只有 "),a("code",[t._v("N")]),t._v(" 个任务能被同时并行的处理")]),t._v("。")]),t._v(" "),a("p",[t._v("如果某个系统支持两个或者多个动作的"),a("strong",[t._v("同时存在")]),t._v("，那么这个系统就是一个并发系统。如果某个系统支持两个或者多个动作"),a("strong",[t._v("同时执行")]),t._v("，那么这个系统就是一个并行系统。")]),t._v(" "),a("p",[t._v("在并发程序中可以同时拥有两个或者多个线程。这意味着，如果程序在单核处理器上运行，那么这两个线程将交替地换入或者换出内存。这些线程是 "),a("strong",[t._v("同时“存在”")]),t._v(" 的——每个线程都处于执行过程中的某个状态。如果程序能够并行执行，那么就一定是运行在多核处理器上。此时，程序中的每个线程都将分配到一个独立的处理器核上，因此可以同时运行。")]),t._v(" "),a("p",[a("strong",[t._v("“并行”概念是“并发”概念的一个子集")]),t._v("。也就是说，你可以编写一个拥有多个线程或者进程的并发程序，但如果没有多核处理器来执行这个程序，那么就不能以并行方式来运行代码。因此，凡是在求解单个问题时涉及多个执行流程的编程模式或者执行行为，都属于并发编程的范畴。")]),t._v(" "),a("h3",{attrs:{id:"编程语言的并发模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程语言的并发模型"}},[t._v("#")]),t._v(" 编程语言的并发模型")]),t._v(" "),a("p",[t._v("不同语言对于线程的实现可能大相径庭：")]),t._v(" "),a("ul",[a("li",[t._v("由于操作系统提供了创建线程的 API，因此部分语言会直接调用该 API 来创建线程，因此最终程序内的线程数和该程序占用的操作系统线程数相等，一般称之为"),a("strong",[t._v("1:1 线程模型")]),t._v("，例如 Rust。")]),t._v(" "),a("li",[t._v("还有些语言在内部实现了自己的线程模型（绿色线程、协程），程序内部的 M 个线程最后会以某种映射方式使用 N 个操作系统线程去运行，因此称之为"),a("strong",[t._v("M:N 线程模型")]),t._v("，其中 M 和 N 并没有特定的彼此限制关系。一个典型的代表就是 Go 语言。")]),t._v(" "),a("li",[t._v("还有些语言使用了 Actor 模型，基于消息传递进行并发，例如 Erlang 语言。")])]),t._v(" "),a("p",[t._v("总之，每一种模型都有其优缺点及选择上的权衡，而 Rust 在设计时考虑的权衡就是运行时(Runtime)。出于 Rust 的系统级使用场景，且要保证调用 C 时的极致性能，它最终选择了尽量小的运行时实现")]),t._v(" "),a("p",[t._v("运行时是那些会被打包到所有程序可执行文件中的 Rust 代码，根据每个语言的设计权衡，运行时虽然有大有小（例如 Go 语言由于实现了协程和 GC，运行时相对就会更大一些），但是除了汇编之外，每个语言都拥有它。小运行时的其中一个好处在于最终编译出的可执行文件会相对较小，同时也让该语言更容易被其它语言引入使用")]),t._v(" "),a("p",[t._v("而绿色线程/协程的实现会显著增大运行时的大小，因此 Rust 只在标准库中提供了 "),a("code",[t._v("1:1")]),t._v(" 的线程模型，如果你愿意牺牲一些性能来换取更精确的线程控制以及更小的线程上下文切换成本，那么可以选择 Rust 中的 "),a("code",[t._v("M:N")]),t._v(" 模型，这些模型由三方库提供了实现，例如大名鼎鼎的 "),a("code",[t._v("tokio")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),a("p",[t._v("由于多线程的代码是同时运行的，因此我们无法保证线程间的执行顺序，这会导致一些问题：")]),t._v(" "),a("ul",[a("li",[t._v("竞态条件(race conditions)，多个线程以非一致性的顺序同时访问数据资源")]),t._v(" "),a("li",[t._v("死锁(deadlocks)，两个线程都想使用某个资源，但是又都在等待对方释放资源后才能使用，结果最终都无法继续执行")]),t._v(" "),a("li",[t._v("一些因为多线程导致的很隐晦的 BUG，难以复现和解决")])]),t._v(" "),a("p",[t._v("虽然 Rust 已经通过各种机制减少了上述情况的发生，但是依然无法完全避免上述情况，因此我们在编程时需要格外的小心")]),t._v(" "),a("p",[t._v("创建线程")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("thread::spawn")]),t._v(" 可以创建线程")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Duration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token closure-params"}},[a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi number {} from the spawned thread!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Duration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from_millis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi number {} from the main thread!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Duration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from_millis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("有几点值得注意：")]),t._v(" "),a("ul",[a("li",[t._v("线程内部的代码使用闭包来执行")]),t._v(" "),a("li",[a("code",[t._v("main")]),t._v(" 线程一旦结束，程序就立刻结束，因此需要保持它的存活，直到其它子线程完成自己的任务")]),t._v(" "),a("li",[a("code",[t._v("thread::sleep")]),t._v(" 会让当前线程休眠指定的时间，随后其它线程会被调度运行（上一节并发与并行中有简单介绍过），因此就算你的电脑只有一个 CPU 核心，该程序也会表现的如同多 CPU 核心一般，这就是并发！")])]),t._v(" "),a("p",[t._v("如果多运行几次，你会发现好像每次输出会不太一样，因为：虽说线程往往是轮流执行的，但是这一点无法被保证！线程调度的方式往往取决于你使用的操作系统。总之，"),a("strong",[t._v("千万不要依赖线程的执行顺序")])]),t._v(" "),a("p",[t._v("线程通信")]),t._v(" "),a("p",[t._v("在多线程间有多种方式可以共享、传递数据，最常用的方式就是通过消息传递或者将锁和"),a("code",[t._v("Arc")]),t._v("联合使用")]),t._v(" "),a("p",[t._v("与 Go 语言内置的"),a("code",[t._v("chan")]),t._v("不同，Rust 是在标准库里提供了消息通道("),a("code",[t._v("channel")]),t._v(")，你可以将其想象成一场直播，多个主播联合起来在搞一场直播，最终内容通过通道传输给屏幕前的我们，其中主播被称之为"),a("strong",[t._v("发送者")]),t._v("，观众被称之为"),a("strong",[t._v("接收者")]),t._v("，显而易见的是：一个通道应该支持多个发送者和接收者。")]),t._v(" "),a("p",[t._v("但是，在实际使用中，我们需要使用不同的库来满足诸如："),a("strong",[t._v("多发送者 -> 单接收者，多发送者 -> 多接收者")]),t._v("等场景形式")]),t._v(" "),a("p",[t._v("多发送者 单接收者")]),t._v(" "),a("p",[t._v("标准库提供了通道"),a("code",[t._v("std::sync::mpsc")]),t._v("，其中"),a("code",[t._v("mpsc")]),t._v("是"),a("em",[t._v("multiple producer, single consumer")]),t._v("的缩写，代表了该通道支持多个发送者，但是只支持唯一的接收者。 当然，支持多个发送者也意味着支持单个发送者，")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("mpsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个消息通道, 返回一个元组：(发送者，接收者)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("mpsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("channel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建线程，并发送消息")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("move")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token closure-params"}},[a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送一个数字1, send方法返回Result<T,E>，通过unwrap进行快速错误处理")]),t._v("\n        tx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面代码将报错，因为编译器自动推导出通道传递的值是i32类型，那么Option<i32>类型将产生不匹配错误")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tx.send(Some(1)).unwrap()")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在主线程中接收子线程发送的消息并输出")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"receive {}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("recv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("tx")]),t._v(","),a("code",[t._v("rx")]),t._v("对应发送者和接收者，它们的类型由编译器自动推导: "),a("code",[t._v("tx.send(1)")]),t._v("发送了整数，因此它们分别是"),a("code",[t._v("mpsc::Sender<i32>")]),t._v("和"),a("code",[t._v("mpsc::Receiver<i32>")]),t._v("类型，需要注意，由于内部是泛型实现，一旦类型被推导确定，该通道就只能传递对应类型的值, 例如此例中非"),a("code",[t._v("i32")]),t._v("类型的值将导致编译错误")]),t._v(" "),a("li",[t._v("接收消息的操作"),a("code",[t._v("rx.recv()")]),t._v("会阻塞当前线程，直到读取到值，或者通道被关闭")]),t._v(" "),a("li",[t._v("需要使用"),a("code",[t._v("move")]),t._v("将"),a("code",[t._v("tx")]),t._v("的所有权转移到子线程的闭包中")])]),t._v(" "),a("p",[t._v("共享内存可以说是同步的灵魂，因为消息传递的底层实际上也是通过共享内存来实现，两者的区别如下：")]),t._v(" "),a("ul",[a("li",[t._v("共享内存相对消息传递能节省多次内存拷贝的成本")]),t._v(" "),a("li",[t._v("共享内存的实现简洁的多")]),t._v(" "),a("li",[t._v("共享内存的锁竞争更多")])]),t._v(" "),a("p",[t._v("消息传递适用的场景很多，我们下面列出了几个主要的使用场景:")]),t._v(" "),a("ul",[a("li",[t._v("需要可靠和简单的(简单不等于简洁)实现时")]),t._v(" "),a("li",[t._v("需要模拟现实世界，例如用消息去通知某个目标执行相应的操作时")]),t._v(" "),a("li",[t._v("需要一个任务处理流水线(管道)时，等等")])]),t._v(" "),a("p",[t._v("而使用共享内存(并发原语)的场景往往就比较简单粗暴：需要简洁的实现以及更高的性能时。")]),t._v(" "),a("p",[t._v("总之，消息传递类似一个单所有权的系统：一个值同时只能有一个所有者，如果另一个线程需要该值的所有权，需要将所有权通过消息传递进行转移。而共享内存类似于一个多所有权的系统：多个线程可以同时访问同一个值。")]),t._v(" "),a("p",[t._v("互斥锁")]),t._v(" "),a("p",[t._v("既然是共享内存，那并发原语自然是重中之重，先来一起看看皇冠上的明珠: 互斥锁"),a("code",[t._v("Mutex")]),t._v("(mutual exclusion 的缩写)。")]),t._v(" "),a("p",[a("code",[t._v("Mutex")]),t._v("让多个线程并发的访问同一个值变成了排队访问：同一时间，只允许一个线程"),a("code",[t._v("A")]),t._v("访问该值，其它线程需要等待"),a("code",[t._v("A")]),t._v("访问完成后才能继续")]),t._v(" "),a("p",[t._v("单线程中使用Mutex")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 使用`Mutex`结构体的关联函数创建新的互斥锁实例    let m = Mutex::new(5);    {        // 获取锁，然后deref为`m`的引用        // lock返回的是Result        let mut num = m.lock().unwrap();        *num = 6;        // 锁自动被drop    }    println!("m = {:?}", m);}')]),t._v("\n")])])]),a("p",[t._v("和"),a("code",[t._v("Box")]),t._v("类似，数据被"),a("code",[t._v("Mutex")]),t._v("所拥有，要访问内部的数据，需要使用方法"),a("code",[t._v("m.lock()")]),t._v("向"),a("code",[t._v("m")]),t._v("申请一个锁, 该方法会"),a("strong",[t._v("阻塞当前线程，直到获取到锁")]),t._v("，因此当多个线程同时访问该数据时，只有一个线程能获取到锁，其它线程只能阻塞着等待，这样就保证了数据能被安全的修改！")]),t._v(" "),a("p",[a("code",[t._v("Mutex<T>")]),t._v("是一个智能指针，准确的说是"),a("code",[t._v("m.lock()")]),t._v("返回一个智能指针"),a("code",[t._v("MutexGuard<T>")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("它实现了"),a("code",[t._v("Deref")]),t._v("特征，会被自动解引用后获得一个引用类型，该引用指向"),a("code",[t._v("Mutex")]),t._v("内部的数据")]),t._v(" "),a("li",[t._v("它还实现了"),a("code",[t._v("Drop")]),t._v("特征，在超出作用域后，自动释放锁，以便其它线程能继续获取锁\\")])]),t._v(" "),a("p",[t._v("多线程中使用Mutex")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("Arc<T>")]),t._v("，得益于它的"),a("a",{attrs:{href:"https://course.rs/advance/smart-pointer/rc-arc.html#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%97%A0%E5%8A%9B%E7%9A%84rc",target:"_blank",rel:"noopener noreferrer"}},[t._v("内部计数器"),a("OutboundLink")],1),t._v("是多线程安全的，因此可以在多线程环境中使用")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" counter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" handles "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("vec!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" counter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("counter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" handle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("move")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token closure-params"}},[a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" counter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        handles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" handle "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" handles "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        handle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Result: {}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("counter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("Rc<T>/RefCell<T>")]),t._v("用于单线程内部可变性， "),a("code",[t._v("Arc<T>/Mutext<T>")]),t._v("用于多线程内部可变性")]),t._v(" "),a("p",[t._v("使用Mutex 需要注意的点：")]),t._v(" "),a("ul",[a("li",[t._v("在使用数据前必须先获取锁")]),t._v(" "),a("li",[t._v("在数据使用完成后，必须"),a("strong",[t._v("及时")]),t._v("的释放锁，比如文章开头的例子，使用内部语句块的目的就是为了及时的释放锁")])]),t._v(" "),a("p",[t._v("忘记释放锁是经常发生的，虽然 Rust 通过智能指针的"),a("code",[t._v("drop")]),t._v("机制帮助我们避免了这一点，但是由于不及时释放锁导致的性能问题也是常见的。")]),t._v(" "),a("p",[t._v("正因为这种困难性，导致很多用户都热衷于使用消息传递的方式来实现同步，例如 Go 语言直接把"),a("code",[t._v("channel")]),t._v("内置在语言特性中，甚至还有无锁的语言，例如"),a("code",[t._v("erlang")]),t._v("，完全使用"),a("code",[t._v("Actor")]),t._v("模型，依赖消息传递来完成共享和同步。幸好 Rust 的类型系统、所有权机制、智能指针等可以很好的帮助我们减轻使用锁时的负担。")]),t._v(" "),a("p",[t._v("另一个值的注意的是在使用"),a("code",[t._v("Mutex<T>")]),t._v("时，Rust 无法帮我们避免所有的逻辑错误，例如在之前章节，我们提到过使用"),a("code",[t._v("Rc<T>")]),t._v("可能会导致"),a("a",{attrs:{href:"https://course.rs/advance/circle-self-ref/circle-reference.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("循环引用的问题"),a("OutboundLink")],1),t._v("。类似的，"),a("code",[t._v("Mutex<T>")]),t._v("也存在使用上的风险，例如创建死锁(deadlock)：当一个操作试图锁住两个资源，然后两个线程各自获取其中一个锁，并试图获取另一个锁时，就会造成死锁。")]),t._v(" "),a("p",[t._v("死锁")]),t._v(" "),a("p",[t._v("当我们拥有两个锁，且两个线程各自使用了其中一个锁，然后试图去访问另一个锁时，就可能发生死锁：")]),t._v(" "),a("p",[t._v("多线程死锁")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MutexGuard")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("sleep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Duration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("lazy_static"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("lazy_static"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("lazy_static!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MUTEX1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i64")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MUTEX2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i64")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 存放子线程的句柄    let mut children = vec![];    for i_thread in 0..2 {        children.push(thread::spawn(move || {            for _ in 0..1 {                // 线程1                if i_thread % 2 == 0 {                    // 锁住MUTEX1                    let guard: MutexGuard<i64> = MUTEX1.lock().unwrap();                    println!("线程 {} 锁住了MUTEX1，接着准备去锁MUTEX2 !", i_thread);                    // 当前线程睡眠一小会儿，等待线程2锁住MUTEX2                    sleep(Duration::from_millis(10));                    // 去锁MUTEX2                    let guard = MUTEX2.lock().unwrap();                // 线程2                } else {                    // 锁住MUTEX2                    let _guard = MUTEX2.lock().unwrap();                    println!("线程 {} 锁住了MUTEX2, 准备去锁MUTEX1", i_thread);                    let _guard = MUTEX1.lock().unwrap();                }            }        }));    }    // 等子线程完成    for child in children {        let _ = child.join();    }    println!("死锁没有发生");}')]),t._v("\n")])])]),a("p",[t._v("上面的代码中，死锁发生的必然条件：线程 1 锁住了"),a("code",[t._v("MUTEX1")]),t._v("并且线程"),a("code",[t._v("2")]),t._v("锁住了"),a("code",[t._v("MUTEX2")]),t._v("，然后线程 1 试图去访问"),a("code",[t._v("MUTEX2")]),t._v("，同时线程"),a("code",[t._v("2")]),t._v("试图去访问"),a("code",[t._v("MUTEX1")]),t._v("，就会死锁。 因为线程 2 需要等待线程 1 释放"),a("code",[t._v("MUTEX1")]),t._v("后，才会释放"),a("code",[t._v("MUTEX2")]),t._v("，而与此同时，线程 1 需要等待线程 2 释放"),a("code",[t._v("MUTEX2")]),t._v("后才能释放"),a("code",[t._v("MUTEX1")]),t._v("，这种情况造成了两个线程都无法释放对方需要的锁，最终死锁。")]),t._v(" "),a("p",[t._v("那么为何某些时候，死锁不会发生？原因很简单，线程 2 在线程 1 锁"),a("code",[t._v("MUTEX1")]),t._v("之前，就已经全部执行完了，随之线程 2 的"),a("code",[t._v("MUTEX2")]),t._v("和"),a("code",[t._v("MUTEX1")]),t._v("被全部释放，线程 1 对锁的获取将不再有竞争者。 同理，线程 1 若全部被执行完，那线程 2 也不会被锁，因此我们在线程 1 中间加一个睡眠，增加死锁发生的概率。如果你在线程 2 中同样的位置也增加一个睡眠，那死锁将必然发生!")]),t._v(" "),a("p",[t._v("读写锁RwLock")]),t._v(" "),a("p",[a("code",[t._v("Mutex")]),t._v("会对每次读写都进行加锁，但某些时候，我们需要大量的并发读，"),a("code",[t._v("Mutex")]),t._v("就无法满足需求了，此时就可以使用"),a("code",[t._v("RwLock")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RwLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" lock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RwLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 同一时间允许多个读    {        let r1 = lock.read().unwrap();        let r2 = lock.read().unwrap();        assert_eq!(*r1, 5);        assert_eq!(*r2, 5);    } // 读锁在此处被drop    // 同一时间只允许一个写    {        let mut w = lock.write().unwrap();        *w += 1;        assert_eq!(*w, 6);        // 以下代码会panic，因为读和写不允许同时存在        // 写锁w直到该语句块结束才被释放，因此下面的读锁依然处于`w`的作用域中        // let r1 = lock.read();        // println!("{:?}",r1);    }// 写锁在此处被drop}')]),t._v("\n")])])]),a("p",[t._v("使用RwLock有几个问题：")]),t._v(" "),a("ul",[a("li",[t._v("读和写不能同时发生，如果使用"),a("code",[t._v("try_xxx")]),t._v("解决，就必须做大量的错误处理和失败重试机制")]),t._v(" "),a("li",[t._v("当读多写少时，写操作可能会因为一直无法获得锁导致连续多次失败("),a("a",{attrs:{href:"https://stackoverflow.com/questions/2190090/how-to-prevent-writer-starvation-in-a-read-write-lock-in-pthreads",target:"_blank",rel:"noopener noreferrer"}},[t._v("writer starvation"),a("OutboundLink")],1),t._v(")")]),t._v(" "),a("li",[t._v("RwLock 其实是操作系统提供的，实现原理要比"),a("code",[t._v("Mutex")]),t._v("复杂的多，因此单就锁的性能而言，比不上原生实现的"),a("code",[t._v("Mutex")])])]),t._v(" "),a("p",[t._v("因此和Mutex的使用场景略有差别")]),t._v(" "),a("ul",[a("li",[t._v("追求高并发读取时，使用"),a("code",[t._v("RwLock")]),t._v("，因为"),a("code",[t._v("Mutex")]),t._v("一次只允许一个线程去读取")]),t._v(" "),a("li",[t._v("如果要保证写操作的成功性，使用"),a("code",[t._v("Mutex")])]),t._v(" "),a("li",[t._v("不知道哪个合适，统一使用"),a("code",[t._v("Mutex")])])]),t._v(" "),a("p",[t._v("需要注意的是，"),a("code",[t._v("RwLock")]),t._v("虽然看上去貌似提供了高并发读取的能力，但这个不能说明它的性能比"),a("code",[t._v("Mutex")]),t._v("高，事实上"),a("code",[t._v("Mutex")]),t._v("性能要好不少，后者"),a("strong",[t._v("唯一的问题也仅仅在于不能并发读取")]),t._v("。")]),t._v(" "),a("p",[t._v("一个常见的、错误的使用"),a("code",[t._v("RwLock")]),t._v("的场景就是使用"),a("code",[t._v("HashMap")]),t._v("进行简单读写，因为"),a("code",[t._v("HashMap")]),t._v("的读和写都非常快，"),a("code",[t._v("RwLock")]),t._v("的复杂实现和相对低的性能反而会导致整体性能的降低，因此一般来说更适合使用"),a("code",[t._v("Mutex")]),t._v("。")]),t._v(" "),a("p",[t._v("总之，如果你要使用"),a("code",[t._v("RwLock")]),t._v("要确保满足以下两个条件："),a("strong",[t._v('并发读，且需要对读到的资源进行"长时间"的操作')]),t._v("，"),a("code",[t._v("HashMap")]),t._v('也许满足了并发读的需求，但是往往并不能满足后者："长时间"的操作。')]),t._v(" "),a("p",[a("code",[t._v("Mutex")]),t._v("用起来简单，但是无法并发读，"),a("code",[t._v("RwLock")]),t._v("可以并发读，但是使用场景较为受限且性能不够，那么有没有一种全能性选手呢？ 欢迎我们的"),a("code",[t._v("Atomic")]),t._v("闪亮登场")]),t._v(" "),a("p",[t._v("从 Rust1.34 版本后，就正式支持原子类型。原子指的是一系列不可被 CPU 上下文交换的机器指令，这些指令组合在一起就形成了原子操作。在多核 CPU 下，当某个 CPU 核心开始运行原子操作时，会先暂停其它 CPU 内核对内存的操作，以保证原子操作不会被其它 CPU 内核所干扰。")]),t._v(" "),a("p",[t._v("由于原子操作是通过指令提供的支持，因此它的性能相比锁和消息传递会好很多。相比较于锁而言，原子类型不需要开发者处理加锁和释放锁的问题，同时支持修改，读取等操作，还具备较高的并发性能，几乎所有的语言都支持原子类型。")]),t._v(" "),a("p",[t._v("可以看出原子类型是无锁类型，但是无锁不代表无需等待，因为原子类型内部使用了"),a("code",[t._v("CAS")]),t._v("循环，当大量的冲突发生时，该等待还是得"),a("a",{attrs:{href:"https://course.rs/advance/concurrency-with-threads/thread.html#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BC%80%E9%94%80",target:"_blank",rel:"noopener noreferrer"}},[t._v("等待"),a("OutboundLink")],1),t._v("！但是总归比锁要好")]),t._v(" "),a("p",[t._v("CAS 全称是 Compare and swap, 它通过一条指令读取指定的内存地址，然后判断其中的值是否等于给定的前置值，如果相等，则将其修改为新的值")]),t._v(" "),a("p",[t._v("原子类型的一个常用场景，就是作为全局变量来使用")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("ops"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sub")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("atomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicU64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordering")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JoinHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Instant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N_TIMES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("u64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N_THREADS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("usize")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("R")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicU64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicU64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("add_n_times")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("u64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JoinHandle")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("move")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token closure-params"}},[a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("R")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch_add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordering")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Relaxed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Instant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" threads "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("with_capacity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N_THREADS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N_THREADS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        threads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_n_times")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N_TIMES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" thread "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" threads "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N_TIMES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N_THREADS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("u64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("R")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordering")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Relaxed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{:?}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Instant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sub")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("以上代码启动了数个线程，每个线程都在疯狂对全局变量进行加 1 操作, 最后将它与"),a("code",[t._v("线程数 * 加1次数")]),t._v("进行比较，如果发生了因为多个线程同时修改导致了脏数据，那么这两个必将不相等。好在，它没有让我们失望，不仅快速的完成了任务，而且保证了 100%的并发安全性。")]),t._v(" "),a("p",[t._v("当然以上代码的功能其实也可以通过"),a("code",[t._v("Mutex")]),t._v("来实现，但是后者的强大功能是建立在额外的性能损耗基础上的，因此性能会逊色不少:")]),t._v(" "),a("p",[a("code",[t._v("Atomic")]),t._v("实现会比"),a("code",[t._v("Mutex")]),t._v("快"),a("strong",[t._v("41%")]),t._v("，实际上在复杂场景下还能更快(甚至达到 4 倍的性能差距)！")]),t._v(" "),a("p",[t._v("还有一点值得注意: "),a("strong",[t._v("和"),a("code",[t._v("Mutex")]),t._v("一样，"),a("code",[t._v("Atomic")]),t._v("的值具有内部可变性")]),t._v("，你无需将其声明为"),a("code",[t._v("mut")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("atomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordering")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicU64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Counter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("u64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Counter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicU64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch_add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordering")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Relaxed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("内存顺序是指 CPU 在访问内存时的顺序，该顺序可能受以下因素的影响：")]),t._v(" "),a("ul",[a("li",[t._v("代码中的先后顺序")]),t._v(" "),a("li",[t._v("编译器优化导致在编译阶段发生改变(内存重排序 reordering)")]),t._v(" "),a("li",[t._v("运行阶段因 CPU 的缓存机制导致顺序被打乱")])]),t._v(" "),a("p",[t._v("Rust 提供了"),a("code",[t._v("Ordering::Relaxed")]),t._v("用于限定内存顺序了，事实上，该枚举有 5 个成员:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Relaxed")]),t._v("， 这是最宽松的规则，它对编译器和 CPU 不做任何限制，可以乱序")]),t._v(" "),a("li",[a("strong",[t._v("Release 释放")]),t._v("，设定内存屏障(Memory barrier)，保证它之前的操作永远在它之前，但是它后面的操作可能被重排到它前面")]),t._v(" "),a("li",[a("strong",[t._v("Acquire 获取")]),t._v(", 设定内存屏障，保证在它之后的访问永远在它之后，但是它之前的操作却有可能被重排到它后面，往往和"),a("code",[t._v("Release")]),t._v("在不同线程中联合使用")]),t._v(" "),a("li",[a("strong",[t._v("AcqRel")]),t._v(", "),a("strong",[t._v("Acquire")]),t._v("和"),a("strong",[t._v("Release")]),t._v("的结合，同时拥有它们俩提供的保证。比如你要对一个 "),a("code",[t._v("atomic")]),t._v(" 自增 1，同时希望该操作之前和之后的读取或写入操作不会被重新排序")]),t._v(" "),a("li",[a("strong",[t._v("SeqCst 顺序一致性")]),t._v("， "),a("code",[t._v("SeqCst")]),t._v("就像是"),a("code",[t._v("AcqRel")]),t._v("的加强版，它不管原子操作是属于读取还是写入的操作，只要某个线程有用到"),a("code",[t._v("SeqCst")]),t._v("的原子操作，线程中该"),a("code",[t._v("SeqCst")]),t._v("操作前的数据操作绝对不会被重新排在该"),a("code",[t._v("SeqCst")]),t._v("操作之后，且该"),a("code",[t._v("SeqCst")]),t._v("操作后的数据操作也绝对不会被重新排在"),a("code",[t._v("SeqCst")]),t._v("操作前。")])]),t._v(" "),a("p",[t._v("这些规则由于是系统提供的，因此其它语言提供的相应规则也大同小异")]),t._v(" "),a("p",[t._v("在多线程环境中要使用"),a("code",[t._v("Atomic")]),t._v("需要配合"),a("code",[t._v("Arc")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("atomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicUsize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordering")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("hint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" spinlock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicUsize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" spinlock_clone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("spinlock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" thread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("move")]),a("span",{pre:!0,attrs:{class:"token closure-params"}},[a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        spinlock_clone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("store")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordering")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SeqCst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 等待其它线程释放锁    while spinlock.load(Ordering::SeqCst) != 0 {        hint::spin_loop();    }    if let Err(panic) = thread.join() {        println!("Thread had an error: {:?}", panic);    }}')]),t._v("\n")])])]),a("p",[t._v("那么原子类型既然这么全能，它可以替代锁吗？答案是不行：")]),t._v(" "),a("ul",[a("li",[t._v("对于复杂的场景下，锁的使用简单粗暴，不容易有坑")]),t._v(" "),a("li",[a("code",[t._v("std::sync::atomic")]),t._v("包中仅提供了数值类型的原子操作："),a("code",[t._v("AtomicBool")]),t._v(", "),a("code",[t._v("AtomicIsize")]),t._v(", "),a("code",[t._v("AtomicUsize")]),t._v(", "),a("code",[t._v("AtomicI8")]),t._v(", "),a("code",[t._v("AtomicU16")]),t._v("等，而锁可以应用于各种类型")]),t._v(" "),a("li",[t._v("在有些情况下，必须使用锁来配合，例如上一章节中使用"),a("code",[t._v("Mutex")]),t._v("配合"),a("code",[t._v("Condvar")])])]),t._v(" "),a("p",[t._v("事实上，"),a("code",[t._v("Atomic")]),t._v("虽然对于用户不太常用，但是对于高性能库的开发者、标准库开发者都非常常用，它是并发原语的基石，除此之外，还有一些场景适用：")]),t._v(" "),a("ul",[a("li",[t._v("无锁(lock free)数据结构")]),t._v(" "),a("li",[t._v("全局变量，例如全局自增 ID, 在后续章节会介绍")]),t._v(" "),a("li",[t._v("跨线程计数器，例如可以用于统计指标")])]),t._v(" "),a("h2",{attrs:{id:"cargo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cargo"}},[t._v("#")]),t._v(" Cargo")]),t._v(" "),a("h3",{attrs:{id:"包和模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包和模块"}},[t._v("#")]),t._v(" 包和模块")]),t._v(" "),a("p",[t._v("Rust 为我们提供了强大的包管理工具：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("项目(Package)")]),t._v("：可以用来构建、测试和分享包")]),t._v(" "),a("li",[a("strong",[t._v("工作空间(WorkSpace)")]),t._v("：对于大型项目，可以进一步将多个包联合在一起，组织成工作空间")]),t._v(" "),a("li",[a("strong",[t._v("包(Crate)")]),t._v("：一个由多个模块组成的树形结构，可以作为三方库进行分发，也可以生成可执行文件进行运行")]),t._v(" "),a("li",[a("strong",[t._v("模块(Module)")]),t._v("：可以一个文件多个模块，也可以一个文件一个模块，模块可以被认为是真实项目中的代码组织单元")])]),t._v(" "),a("p",[t._v("包Crate")]),t._v(" "),a("p",[t._v("对于 Rust 而言，包是一个独立的可编译单元，它编译后会生成一个可执行文件或者一个库。")]),t._v(" "),a("p",[t._v("一个包会将相关联的功能打包在一起，使得该功能可以很方便的在多个项目中分享。例如标准库中没有提供但是在三方库中提供的 "),a("code",[t._v("rand")]),t._v(" 包，它提供了随机数生成的功能，我们只需要将该包通过 "),a("code",[t._v("use rand;")]),t._v(" 引入到当前项目的作用域中，就可以在项目中使用 "),a("code",[t._v("rand")]),t._v(" 的功能："),a("code",[t._v("rand::XXX")]),t._v("。")]),t._v(" "),a("p",[t._v("同一个包中不能有同名的类型，但是在不同包中就可以。例如，虽然 "),a("code",[t._v("rand")]),t._v(" 包中，有一个 "),a("code",[t._v("Rng")]),t._v(" 特征，可是我们依然可以在自己的项目中定义一个 "),a("code",[t._v("Rng")]),t._v("，前者通过 "),a("code",[t._v("rand::Rng")]),t._v(" 访问，后者通过 "),a("code",[t._v("Rng")]),t._v(" 访问，对于编译器而言，这两者的边界非常清晰，不会存在引用歧义。")]),t._v(" "),a("p",[t._v("项目package")]),t._v(" "),a("p",[t._v("鉴于 Rust 团队标新立异的起名传统，以及包的名称被 "),a("code",[t._v("crate")]),t._v(" 占用，库的名称被 "),a("code",[t._v("library")]),t._v(" 占用，经过斟酌， 我们决定将 "),a("code",[t._v("Package")]),t._v(" 翻译成项目，你也可以理解为工程、软件包。")]),t._v(" "),a("p",[t._v("由于 "),a("code",[t._v("Package")]),t._v(" 就是一个项目，因此它包含有独立的 "),a("code",[t._v("Cargo.toml")]),t._v(" 文件，以及因为功能性被组织在一起的一个或多个包。一个 "),a("code",[t._v("Package")]),t._v(" 只能包含"),a("strong",[t._v("一个")]),t._v("库(library)类型的包，但是可以包含"),a("strong",[t._v("多个")]),t._v("二进制可执行类型的包。")]),t._v(" "),a("p",[t._v("二进制package")]),t._v(" "),a("p",[t._v("创建一个二进制 "),a("code",[t._v("Package")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cargo")]),t._v(" new my-project\n     Created binary "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("application"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("my-project"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" package\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" my-project\nCargo.toml\nsrc\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" my-project/src\nmain.rs\n")])])]),a("p",[t._v("这里，Cargo 为我们创建了一个名称是 "),a("code",[t._v("my-project")]),t._v(" 的 "),a("code",[t._v("Package")]),t._v("，同时在其中创建了 "),a("code",[t._v("Cargo.toml")]),t._v(" 文件，可以看一下该文件，里面并没有提到 "),a("code",[t._v("src/main.rs")]),t._v(" 作为程序的入口，原因是 Cargo 有一个惯例："),a("strong",[a("code",[t._v("src/main.rs")]),t._v(" 是二进制包的根文件，该二进制包的包名跟所属 "),a("code",[t._v("Package")]),t._v(" 相同，在这里都是 "),a("code",[t._v("my-project")])]),t._v("，所有的代码执行都从该文件中的 "),a("code",[t._v("fn main()")]),t._v(" 函数开始。")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("cargo run")]),t._v(" 可以运行该项目，输出："),a("code",[t._v("Hello, world!")]),t._v("。")]),t._v(" "),a("p",[t._v("库Package")]),t._v(" "),a("p",[t._v("再来创建一个库类型的 "),a("code",[t._v("Package")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cargo")]),t._v(" new my-lib "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--lib")]),t._v("\n     Created library "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("my-lib"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" package\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" my-lib\nCargo.toml\nsrc\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" my-lib/src\nlib.rs\n")])])]),a("p",[t._v("如果你试图运行 "),a("code",[t._v("my-lib")]),t._v("，会报错")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cargo")]),t._v(" run\nerror: a bin target must be available "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cargo")]),t._v(" run"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n")])])]),a("p",[t._v("原因是库类型的 "),a("code",[t._v("Package")]),t._v(" 只能作为三方库被其它项目引用，而不能独立运行，只有之前的二进制 "),a("code",[t._v("Package")]),t._v(" 才可以运行。")]),t._v(" "),a("p",[t._v("与 "),a("code",[t._v("src/main.rs")]),t._v(" 一样，Cargo 知道，如果一个 "),a("code",[t._v("Package")]),t._v(" 包含有 "),a("code",[t._v("src/lib.rs")]),t._v("，意味它包含有一个库类型的同名包 "),a("code",[t._v("my-lib")]),t._v("，该包的根文件是 "),a("code",[t._v("src/lib.rs")]),t._v("。")]),t._v(" "),a("p",[t._v("模块")]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("mod")]),t._v(" 关键字来创建新模块，后面紧跟着模块名称")]),t._v(" "),a("li",[t._v("模块可以嵌套，这里嵌套的原因是招待客人和服务都发生在前厅，因此我们的代码模拟了真实场景")]),t._v(" "),a("li",[t._v("模块中可以定义各种 Rust 类型，例如函数、结构体、枚举、特征等")]),t._v(" "),a("li",[t._v("所有模块均定义在同一个文件中")])]),t._v(" "),a("p",[t._v("模块树")]),t._v(" "),a("p",[a("code",[t._v("src/main.rs")]),t._v(" 和 "),a("code",[t._v("src/lib.rs")]),t._v(" 被称为包源(crate root)，这个奇葩名称的来源,是由于这两个文件的内容形成了一个模块 "),a("code",[t._v("crate")]),t._v("，该模块位于包的树形结构(由模块组成的树形结构)的根部")]),t._v(" "),a("p",[t._v("这颗树展示了模块之间"),a("strong",[t._v("彼此的嵌套")]),t._v("关系，因此被称为"),a("strong",[t._v("模块树")]),t._v("。其中 "),a("code",[t._v("crate")]),t._v(" 包根是 "),a("code",[t._v("src/lib.rs")]),t._v(" 文件，包根文件中的三个模块分别形成了模块树的剩余部分。")]),t._v(" "),a("p",[t._v("如果模块 "),a("code",[t._v("A")]),t._v(" 包含模块 "),a("code",[t._v("B")]),t._v("，那么 "),a("code",[t._v("A")]),t._v(" 是 "),a("code",[t._v("B")]),t._v(" 的父模块，"),a("code",[t._v("B")]),t._v(" 是 "),a("code",[t._v("A")]),t._v(" 的子模块。在上例中，"),a("code",[t._v("front_of_house")]),t._v(" 是 "),a("code",[t._v("hosting")]),t._v(" 和 "),a("code",[t._v("serving")]),t._v(" 的父模块，反之，后两者是前者的子模块。")]),t._v(" "),a("p",[t._v("模块树跟计算机上文件系统目录树的相似之处。不仅仅是组织结构上的相似，就连使用方式都很相似：每个文件都有自己的路径，用户可以通过这些路径使用它们，在 Rust 中，我们也通过路径的方式来引用模块。")]),t._v(" "),a("p",[t._v("想要调用一个函数，就需要知道它的路径，在 Rust 中，这种路径有两种形式：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("绝对路径")]),t._v("，从包根开始，路径名以包名或者 "),a("code",[t._v("crate")]),t._v(" 作为开头")]),t._v(" "),a("li",[a("strong",[t._v("相对路径")]),t._v("，从当前模块开始，以 "),a("code",[t._v("self")]),t._v("，"),a("code",[t._v("super")]),t._v(" 或当前模块的标识符作为开头")])]),t._v(" "),a("h3",{attrs:{id:"为什么有cargo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么有cargo"}},[t._v("#")]),t._v(" 为什么有cargo")]),t._v(" "),a("p",[t._v("Cargo 是一个工具,允许 Rust 项目声明其各种依赖项，并确保您始终获得可重复的构建。")]),t._v(" "),a("p",[t._v("为了实现这一目标,Cargo 做了四件事:")]),t._v(" "),a("ul",[a("li",[t._v("引入两个，包含各种项目信息的元数据文件。")]),t._v(" "),a("li",[t._v("获取，并构建项目的依赖项.")]),t._v(" "),a("li",[t._v("正确使用参数，以调用"),a("code",[t._v("rustc")]),t._v("或其他构建工具，构建你的项目。")]),t._v(" "),a("li",[t._v("介绍，更容易使用 Rust 项目的约定(规范/风格)。")])]),t._v(" "),a("h3",{attrs:{id:"cargo-toml和cargo-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cargo-toml和cargo-lock"}},[t._v("#")]),t._v(" cargo.toml和cargo.lock")]),t._v(" "),a("p",[a("code",[t._v("Cargo.toml")]),t._v("和"),a("code",[t._v("Cargo.lock")]),t._v("各有其目的。在我们谈论它们之前，这是一个总结:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Cargo.toml")]),t._v("是从广义上描述你的依赖，并由你编写.")]),t._v(" "),a("li",[a("code",[t._v("Cargo.lock")]),t._v("包含有关您的依赖项的确切信息。它由 Cargo 维护，不应手动编辑")])]),t._v(" "),a("p",[t._v("如果您正在构建，其他项目要依赖的库，请将"),a("code",[t._v("Cargo.lock")]),t._v("放置在你的"),a("code",[t._v(".gitignore")]),t._v("。如果您正在构建可执行文件，如命令行工具或应用程序，请检查"),a("code",[t._v("Cargo.lock")]),t._v("位于"),a("code",[t._v("git")]),t._v("管理下。")]),t._v(" "),a("h3",{attrs:{id:"常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),a("p",[a("code",[t._v("cargo check")]),t._v(" 是一个新的子命令，可以在很多情况下加快开发工作流程。")]),t._v(" "),a("p",[t._v("它有什么作用？让我们退一步说，讨论 "),a("code",[t._v("rustc")]),t._v(" 如何编译代码。编译有许多“过程”，也就是说，编译器在从源代码到生成最终二进制文件的过程中有许多不同的步骤。 但是，您可以通过两个重要步骤来考虑这个过程：首先，"),a("code",[t._v("rustc")]),t._v(" 执行所有安全检查，确保您的语法正确，所有这些。其次，一旦满足一切顺序，就会生成最终执行的实际二进制代码。")]),t._v(" "),a("p",[t._v("事实证明，第二步需要花费很多时间。而且大多数时候，这不是必要的。也就是说，当您处理一些 Rust 代码时，许多开发人员将进入这样的工作流程：")]),t._v(" "),a("ol",[a("li",[t._v("写一些代码。")]),t._v(" "),a("li",[t._v("运行 "),a("code",[t._v("cargo build")]),t._v(" 以确保它编译。")]),t._v(" "),a("li",[t._v("根据需要重复1-2。")]),t._v(" "),a("li",[t._v("运行 "),a("code",[t._v("cargo test")]),t._v(" 以确保测试通过。")]),t._v(" "),a("li",[t._v("亲自尝试二进制文件")]),t._v(" "),a("li",[t._v("GOTO 1。")])]),t._v(" "),a("p",[t._v("在第二步中，您实际上从未运行过您的代码。您正在寻找编译器的反馈，而不是实际运行二进制文件。 "),a("code",[t._v("cargo check")]),t._v(" 正好支持这个用例：它运行所有编译器的检查，但不生成最终的二进制文件")]),t._v(" "),a("p",[t._v("cargo intall")]),t._v(" "),a("p",[t._v("Cargo 已经发展了一种新的 "),a("code",[t._v("install")]),t._v(" 命令。 这旨在用于为 Cargo 安装新的子命令，或者为 Rust 开发人员安装工具。 这并不能取代为您支持的平台上的最终用户构建真实的本机程序包的需要。")]),t._v(" "),a("p",[a("code",[t._v("cargo new")]),t._v(" 现在默认生成二进制文件，而不是库。我们试图保持 Cargo 的 CLI 非常稳定，但这种变化很重要，不太可能导致破损。")]),t._v(" "),a("p",[t._v("对于某些背景，cargo new 接受两个标志： "),a("code",[t._v("--lib")]),t._v(" 用于创建库，"),a("code",[t._v("--bin")]),t._v(" 用于创建二进制文件或可执行文件。 如果你没有传递其中一个标志，它曾经默认为 "),a("code",[t._v("--lib")]),t._v("。 当时，我们做出了这个决定，因为每个二进制文件（通常）都依赖于许多库，因此我们认为库案例会更常见。但是，这是不正确的; 每个包都依赖于许多二进制文件。 此外，在开始使用时，你经常需要的是一个可以运行和使用的程序。而且，不仅仅是新 Rustaceans们， 甚至是很长时间的社区成员都说他们发现这个默认值令人惊讶。 因此，我们已经改变它，它现在默认为 "),a("code",[t._v("--bin")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"国内cargo镜像源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#国内cargo镜像源"}},[t._v("#")]),t._v(" 国内cargo镜像源")]),t._v(" "),a("p",[t._v("字节")]),t._v(" "),a("p",[t._v("最好用 https://rsproxy.cn/")]),t._v(" "),a("div",{staticClass:"language-config extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('## 新建或者修改 ～/.cargo/config 文件\n[source.crates-io]\nreplace-with = \'rsproxy\'\n\n[source.rsproxy]\nregistry = "https://rsproxy.cn/crates.io-index"\n\n[registries.rsproxy]\nindex = "https://rsproxy.cn/crates.io-index"\n\n[net]\ngit-fetch-with-cli = true\n')])])]),a("p",[t._v("修改~/.zshrc or ~/.bashrc")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("RUSTUP_DIST_SERVER")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://rsproxy.cn"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("RUSTUP_UPDATE_ROOT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://rsproxy.cn/rustup"')]),t._v("\n")])])]),a("p",[t._v("安装rust")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# export the env above first")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--proto")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'=https'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--tlsv1.2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-sSf")]),t._v(" https://rsproxy.cn/rustup-init.sh "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v("\n")])])]),a("p",[t._v("rustcc")]),t._v(" "),a("p",[t._v("rust国内社区 https://rustcc.cn/")]),t._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 放到 `$HOME/.cargo/config` 文件中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("source.crates-io")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("registry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://github.com/rust-lang/crates.io-index"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 替换成你偏好的镜像源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("replace-with")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sjtu'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#replace-with = 'ustc'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清华大学")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("source.tuna")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("registry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 中国科学技术大学")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("source.ustc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("registry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git://mirrors.ustc.edu.cn/crates.io-index"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 上海交通大学")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("source.sjtu")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("registry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rustcc社区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("source.rustcc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("registry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git://crates.rustcc.cn/crates.io-index"')]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);