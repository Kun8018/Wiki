(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{332:function(t,e,v){"use strict";v.r(e);var n=v(14),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("​        k8s源码")]),t._v(" "),v("h2",{attrs:{id:"api-server"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#api-server"}},[t._v("#")]),t._v(" API SERVER")]),t._v(" "),v("p",[t._v("APIServer提供了 k8s各类资源对象的CURD/watch、认证授权、准入控制等众多核心功能，在k8s中定位类似于大脑和心脏，它的功能包括：")]),t._v(" "),v("ul",[v("li",[t._v("提供了集群管理的REST API接口(包括资源CURD、认证授权、数据校验以及集群状态变更)；")]),t._v(" "),v("li",[t._v("是所有模块的数据交互和通信的枢纽，各模块的运作都依赖于APIServer")]),t._v(" "),v("li",[t._v("提供丰富多样的集群安全管控机制")]),t._v(" "),v("li",[t._v("直连后端存储(Etcd)，是唯一与存储后端直接通信的模块")])]),t._v(" "),v("p",[t._v("如图所示，这是创建一个资源(Pod)实例过程中，控制层面所经过的调用过程")]),t._v(" "),v("p",[t._v("因此，APIServer无疑是各模块中 "),v("strong",[t._v("最复杂、定位最核心、涉及面最广、代码量最大")]),t._v(" 的模块。")]),t._v(" "),v("p",[t._v("APIServer的工作主要围绕着对各类资源对象的管控，因此，在开始阅读APIServer的源码之前，有必要笼统地列举一下它在运行中所用到的核心数据结构等基础性信息")]),t._v(" "),v("h3",{attrs:{id:"基础结构信息"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基础结构信息"}},[t._v("#")]),t._v(" 基础结构信息")]),t._v(" "),v("p",[t._v("APIServer的工作主要围绕着对各类资源对象的管控，因此，在开始阅读APIServer的源码之前，有必要笼统地列举一下它在运行中所用到的核心数据结构等基础性信息")]),t._v(" "),v("p",[t._v("Group/Version/Kind/Resource")]),t._v(" "),v("p",[t._v("在K8s的设计中，resource是其最基础、最重要的概念，也是最小的管理单位，所有的管理对象都承载在一个个的resource实例上，为了实现这些resource的复杂管理逻辑，又进一步地将他们分组化、版本化，依照逻辑层次，形成了Group、Version、Kind、Resource核心数据结构：")]),t._v(" "),v("ul",[v("li",[t._v("Group：资源组，也称APIGroup，常见的有core、apps、extensions等")]),t._v(" "),v("li",[t._v("Version：资源版本，也称APIVersion，常见的有v1、v1beta1 (Resource可能属于拥有多个Version，这些version也会有优先级之分，例如deployment即属于apps/v1,又属于extensions/v1beta1，在不同k8s版本中，version的优先级可能会变化)")]),t._v(" "),v("li",[t._v("Kind：资源种类，描述资源的类别，例如pod类别、svc类别等")]),t._v(" "),v("li",[t._v("Resource：资源实例对象，也称为APIResource")]),t._v(" "),v("li",[t._v("SubResource：子资源，部分资源实例会 有子资源，例如Deployment资源会拥有Status子资源")]),t._v(" "),v("li",[t._v("CRD: Custom Resource Definitions，用户自定义资源类型")])]),t._v(" "),v("p",[t._v("锚定形式")]),t._v(" "),v("p",[t._v("概念层面，在K8s中，常见的资源路径锚定形式为：///，例如deployment对应的路径是：apps/v1/deployments/status")]),t._v(" "),v("p",[t._v("官方通常通过缩写词"),v("strong",[t._v("GVR")]),t._v("(GroupVersionKind)来描述一个资源的明确锚定位置(类似于绝对路径？)，同理，"),v("strong",[t._v("GVK")]),t._v("(GroupVersionKind)锚定资源的明确所属类型，在项目代码中也经常用到，例如")]),t._v(" "),v("p",[t._v("资源结构体")]),t._v(" "),v("p",[t._v("而落实到代码中，每一种资源的结构体定义文件都位于其Group下的的types.go文件中，例如，Deployment资源的结构体定义在这里"),v("code",[t._v("pkg/apis/apps/types.go:268")])]),t._v(" "),v("p",[t._v("资源操作方法")]),t._v(" "),v("p",[t._v("概念层面，每种resource都有对应的管理操作方法，目前支持的有这几种")]),t._v(" "),v("ul",[v("li",[t._v("get")]),t._v(" "),v("li",[t._v("list")]),t._v(" "),v("li",[t._v("create")]),t._v(" "),v("li",[t._v("update")]),t._v(" "),v("li",[t._v("patch")]),t._v(" "),v("li",[t._v("delete")]),t._v(" "),v("li",[t._v("deletecolletction")]),t._v(" "),v("li",[t._v("watch")])]),t._v(" "),v("p",[t._v("使用[]string结构来描述资源所对应的操作，而[]string终归只是描述，需要与实际的存储资源CRUD操作关联，因此，不难猜测，每种string描述的方法会map到具体的方法上去，结构类似于: map[string]Function")]),t._v(" "),v("p",[t._v("内部和外部Version")]),t._v(" "),v("p",[t._v("在k8s的设计中，资源版本分外部版本(external)和内部版本(internal)之分，外部版本(例如v1/v1beta1/v1beta2)提供给外部使用，而对应的内部版本仅在APIServer内部使用")]),t._v(" "),v("p",[t._v("区分内外版本的作用：")]),t._v(" "),v("ul",[v("li",[t._v("提供不同版本之间的转换功能，例如从v1beta1--\x3ev1的过程实际是v1beta1--\x3e internal --\x3ev1，转换函数会注册到scheme表中")]),t._v(" "),v("li",[t._v("减少复杂度，方便版本维护，避免维护多个版本的对应代码，实际APIServer端处理的都是转换后的内部版本")]),t._v(" "),v("li",[t._v("不同外部版本资源之间的字段/功能可能存在些许差异，而内部版本包含所有版本的字段/功能，这为它作为外部资源版本之间转换的桥梁提供了基础。")])]),t._v(" "),v("p",[t._v("Schema注册表")]),t._v(" "),v("p",[t._v("每一种Resource都有对应的Kind，为了更便于分类管理这些资源，APIServer设计了一种名为scheme的结构体，类似于注册表，运行时数据存放内存中，提供给各种资源进行注册，scheme有如下作用：")]),t._v(" "),v("ul",[v("li",[t._v("提供资源的版本转换功能")]),t._v(" "),v("li",[t._v("提供资源的序列化/反序列化功能")])]),t._v(" "),v("p",[t._v("Scheme支持注册两种类型的资源：")]),t._v(" "),v("ul",[v("li",[t._v("UnversionedType 无版本资源。这个在现版本的k8s中使用非常少，可以忽略")]),t._v(" "),v("li",[t._v("VersionedType 几乎所有的资源都是携带版本的，是常用的类型")])]),t._v(" "),v("p",[t._v("注册方法")]),t._v(" "),v("p",[t._v("scheme表提供两个注册方法："),v("code",[t._v("AddKnownTypes")]),t._v(" | "),v("code",[t._v("AddKnownTypeWithName")]),t._v(" ，使用reflect反射的方式获取type obj的gvk然后进行注册")]),t._v(" "),v("p",[t._v("序列化和反序列化")]),t._v(" "),v("p",[t._v("APIServer对资源的描述支持yaml和json格式，分别对应不同的Serializer，Serializer内置有bool类型的yaml字段，来辨别是否是yaml Serializer。")]),t._v(" "),v("p",[t._v("序列化代码位于："),v("code",[t._v("vendor/k8s.io/apimachinery/pkg/runtime/serializer/json/json.go:223")])]),t._v(" "),v("p",[t._v("可以得知，默认以json格式响应，而对于yaml格式，先将其转换为json格式，再转换回yaml格式响应")]),t._v(" "),v("p",[t._v("反序列化代码："),v("code",[t._v("vendor/k8s.io/apimachinery/pkg/runtime/serializer/json/json.go:86")])]),t._v(" "),v("p",[t._v("go-restful")]),t._v(" "),v("p",[t._v("k8s选用的Restful框架是go-restful，简单说明一下go-restful的结构，辅助后面对于APIServer工作流程的理解。")]),t._v(" "),v("p",[t._v("go-restful层级结构概念自顶上下依次有:")]),t._v(" "),v("ul",[v("li",[t._v("Container: 一个Container就是一个独立的http server，可拥有独立的地址端口组合(类似nginx的server层级)")]),t._v(" "),v("li",[t._v("WebService： 大粒度的分类，某一类别的服务可归属到同一个WebService中，其下包含多个Route")]),t._v(" "),v("li",[t._v("Route: 每个Route对应具体的uri路径，将该路径路由到对应的handler函数上")])]),t._v(" "),v("h3",{attrs:{id:"预启动和启动流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#预启动和启动流程"}},[t._v("#")]),t._v(" 预启动和启动流程")]),t._v(" "),v("p",[t._v("资源注册")]),t._v(" "),v("p",[t._v("scheme是一种内存型的注册表，提供给各类gvk进行注册。在APIServer http服务启动前的第一步，就是将所支持的gvk注册到scheme中，后面的步骤会依赖scheme注册表信息。")]),t._v(" "),v("p",[t._v("值得注意的是，并没有函数方法来显示地注册scheme，而是通过go语言的包导入init机制来初始化注册的")]),t._v(" "),v("p",[t._v("认证配置")]),t._v(" "),v("p",[t._v("APIServer支持如下的认证策略：")]),t._v(" "),v("ul",[v("li",[t._v("X509 Client Certs")]),t._v(" "),v("li",[t._v("Static Token File")]),t._v(" "),v("li",[t._v("Bootstrap Tokens")]),t._v(" "),v("li",[t._v("Service Account Tokens")]),t._v(" "),v("li",[t._v("OpenID Connect Tokens(OIDC)")]),t._v(" "),v("li",[t._v("Webhook Token Authentication")]),t._v(" "),v("li",[t._v("Authenticating Proxy")])]),t._v(" "),v("h3",{attrs:{id:"认证机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#认证机制"}},[t._v("#")]),t._v(" 认证机制")]),t._v(" "),v("p",[t._v("所有 Kubernetes 集群都有两类用户：由 Kubernetes 管理的"),v("strong",[t._v("服务账号")]),t._v("和"),v("strong",[t._v("普通用户")]),t._v("。")]),t._v(" "),v("p",[t._v("其中服务账号(ServiceAccount)是提供给集群中的程序使用，以Secret资源保存凭据，挂载到pod中，从而允许集群内的服务调用k8s API。")]),t._v(" "),v("p",[t._v("而普通用户，尚不支持使用API创建，一般由证书创建，Kubernetes 使用证书中的 'subject' 的通用名称（Common Name）字段（例如，\"/CN=bob\"）来 确定用户名。")]),t._v(" "),v("p",[t._v("Kubernetes 使用身份认证插件利用客户端证书、持有者令牌（Bearer Token）、身份认证代理（Proxy） 或者 HTTP 基本认证机制来认证 API 请求的身份。HTTP 请求发给 API 服务器时， 插件会将以下属性关联到请求本身：")]),t._v(" "),v("ul",[v("li",[t._v("用户名：用来辩识最终用户的字符串。常见的值可以是 "),v("code",[t._v("kube-admin")]),t._v(" 或 "),v("code",[t._v("jane@example.com")]),t._v("。")]),t._v(" "),v("li",[t._v("用户 ID：用来辩识最终用户的字符串，旨在比用户名有更好的一致性和唯一性。")]),t._v(" "),v("li",[t._v("用户组：取值为一组字符串，其中各个字符串用来标明用户是某个命名的用户逻辑集合的成员。 常见的值可能是 "),v("code",[t._v("system:masters")]),t._v(" 或者 "),v("code",[t._v("devops-team")]),t._v(" 等。")]),t._v(" "),v("li",[t._v("附加字段：一组额外的键-值映射，键是字符串，值是一组字符串；用来保存一些鉴权组件可能 觉得有用的额外信息。")])]),t._v(" "),v("p",[t._v("与其它身份认证协议（LDAP、SAML、Kerberos、X509 的替代模式等等）都可以通过 使用一个"),v("a",{attrs:{href:"https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/#authenticating-proxy",target:"_blank",rel:"noopener noreferrer"}},[t._v("身份认证代理"),v("OutboundLink")],1),t._v("或 "),v("a",{attrs:{href:"https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/#webhook-token-authentication",target:"_blank",rel:"noopener noreferrer"}},[t._v("身份认证 Webhoook"),v("OutboundLink")],1),t._v("来实现。")]),t._v(" "),v("p",[t._v("认证流程")]),t._v(" "),v("p",[t._v("RequestHeader认证")]),t._v(" "),v("p",[t._v("是一种代理认证方式，需要再apiserver启动时以参数形式配置，来看看官方的介绍：")]),t._v(" "),v("p",[t._v("API 服务器可以配置成从请求的头部字段值（如 "),v("code",[t._v("X-Remote-User")]),t._v("）中辩识用户。 这一设计是用来与某身份认证代理一起使用 API 服务器，代理负责设置请求的头部字段值。")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("--requestheader-username-headers")]),t._v(" 必需字段，大小写不敏感。用来设置要获得用户身份所要检查的头部字段名称列表（有序）。第一个包含数值的字段会被用来提取用户名。")]),t._v(" "),v("li",[v("code",[t._v("--requestheader-group-headers")]),t._v(' 可选字段，在 Kubernetes 1.6 版本以后支持，大小写不敏感。 建议设置为 "X-Remote-Group"。用来指定一组头部字段名称列表，以供检查用户所属的组名称。 所找到的全部头部字段的取值都会被用作用户组名。')]),t._v(" "),v("li",[v("code",[t._v("--requestheader-extra-headers-prefix")]),t._v(' 可选字段，在 Kubernetes 1.6 版本以后支持，大小写不敏感。 建议设置为 "X-Remote-Extra-"。用来设置一个头部字段的前缀字符串，API 服务器会基于所给 前缀来查找与用户有关的一些额外信息。这些额外信息通常用于所配置的鉴权插件。 API 服务器会将与所给前缀匹配的头部字段过滤出来，去掉其前缀部分，将剩余部分 转换为小写字符串并在必要时执行'),v("a",{attrs:{href:"https://tools.ietf.org/html/rfc3986#section-2.1",target:"_blank",rel:"noopener noreferrer"}},[t._v("百分号解码"),v("OutboundLink")],1),t._v(" 后，构造新的附加信息字段键名。原来的头部字段值直接作为附加信息字段的值。")])]),t._v(" "),v("p",[t._v("BasicAuth认证")]),t._v(" "),v("p",[t._v("BasicAuth是一种简单的基础http认证，用户名、密码写入http请求头中，用base64编码，防君子不防小人，安全性较低，因此很少使用。快速略过")]),t._v(" "),v("p",[t._v("启动apiserver时，使用--basic-auth-file参数指定csv文件，csv里面以逗号切割，存放用户名、密码、uid")]),t._v(" "),v("p",[t._v("X509 CA认证")]),t._v(" "),v("p",[t._v("又称TLS双向认证，APIServer启动时使用--client-ca-file指定客户端的证书文件，用作请求的认证")]),t._v(" "),v("p",[t._v("BearerToken认证")]),t._v(" "),v("p",[t._v("这种认证方式是专为k8s节点准备的，避免每个节点都要手动配置TLS证书，在apiserver启动时指定"),v("code",[t._v("--enable-bootstrap-token-auth")]),t._v("参数来启用这种认证方式")]),t._v(" "),v("p",[t._v("bearertoken的认证方式是在请求头里放入bearer令牌，令牌的格式为 "),v("code",[t._v("[a-z0-9]{6}.[a-z0-9]{16}")]),t._v("。第一个部分是令牌的 ID；第二个部分 是令牌的 Secret。对应http请求头的格式是:")]),t._v(" "),v("p",[v("code",[t._v("Authorization: Bearer xxxxxx.xxxxxxxxxxxxxxxx")])]),t._v(" "),v("p",[t._v("ServiceAccount 认证")]),t._v(" "),v("p",[t._v("启用方式为APIServer命令使用"),v("code",[t._v("--service-account-key-file")]),t._v("参数指定一个为token签名的PEM秘钥文件。")]),t._v(" "),v("p",[t._v("SA认证是jwt形式的认证，使用方式与bearer token类似，也是放在请求头里，内容为Base64编码，header格式为:")]),t._v(" "),v("p",[v("code",[t._v("Authorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo0NTk0LCJ1c2VybmFtZSI6InlpbndlbnFpbiIsImV4cCI6MTU3MDY3NDEyNywiZW1haWwiOiIifQ.djC2w5l3IiXYv7slZtGzlMzLc3_oPuR1M0dM9FwoaUU")])]),t._v(" "),v("p",[t._v("token哪里来呢？答案就是ServiceAccount。")]),t._v(" "),v("p",[t._v("SA是一种面向集群内部应用需要调用APIServer的场景所设计的认证方式。在创建ServiceAccount资源时，可以显示地设置标签将ServiceAccount绑定给某Deploy/sts/pod，也可以在Deploy/sts/pod的声明文件里显示指定ServiceAccount。ServiceAccount会自动创建Secret资源，token秘钥存放其中。")]),t._v(" "),v("p",[t._v("在相应的容器层面，token信息会被挂载进容器中，包含3个文件：")]),t._v(" "),v("ul",[v("li",[t._v("namespace文件：指明命名空间")]),t._v(" "),v("li",[t._v("ca.crt文件：APIServer的公钥证书，容器用来校验APIServer")]),t._v(" "),v("li",[t._v("token文件: 存放在Secret里的JWT token")])]),t._v(" "),v("p",[t._v("WebhookToken认证")]),t._v(" "),v("p",[t._v("Webhook 身份认证是一种用来验证持有者令牌的回调机制。")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("--authentication-token-webhook-config-file")]),t._v(" 指向一个配置文件，其中描述 如何访问远程的 Webhook 服务。")]),t._v(" "),v("li",[v("code",[t._v("--authentication-token-webhook-cache-ttl")]),t._v(" 用来设定身份认证决定的缓存时间。 默认时长为 2 分钟。")])]),t._v(" "),v("p",[t._v("当客户端尝试在 API 服务器上使用持有者令牌完成身份认证（ 如"),v("a",{attrs:{href:"https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/#putting-a-bearer-token-in-a-request",target:"_blank",rel:"noopener noreferrer"}},[t._v("前"),v("OutboundLink")],1),t._v("所述）时， 身份认证 Webhook 会用 POST 请求发送一个 JSON 序列化的对象到远程服务。 该对象是 "),v("code",[t._v("authentication.k8s.io/v1beta1")]),t._v(" 组的 "),v("code",[t._v("TokenReview")]),t._v(" 对象， 其中包含持有者令牌。 Kubernetes 不会强制请求提供此 HTTP 头部。")]),t._v(" "),v("p",[t._v("要注意的是，Webhook API 对象和其他 Kubernetes API 对象一样，也要受到同一 "),v("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/overview/kubernetes-api/",target:"_blank",rel:"noopener noreferrer"}},[t._v("版本兼容规则"),v("OutboundLink")],1),t._v("约束。 实现者要了解对 Beta 阶段对象的兼容性承诺，并检查请求的 "),v("code",[t._v("apiVersion")]),t._v(" 字段， 以确保数据结构能够正常反序列化解析。此外，API 服务器必须启用 "),v("code",[t._v("authentication.k8s.io/v1beta1")]),t._v(" API 扩展组 （"),v("code",[t._v("--runtime-config=authentication.k8s.io/v1beta1=true")]),t._v("）。")]),t._v(" "),v("p",[t._v("Anonymous认证")]),t._v(" "),v("p",[t._v("启用匿名请求支持之后，如果请求没有被已配置的其他身份认证方法拒绝，则被视作 匿名请求（Anonymous Requests）。这类请求获得用户名 "),v("code",[t._v("system:anonymous")]),t._v(" 和 对应的用户组 "),v("code",[t._v("system:unauthenticated")]),t._v("。")]),t._v(" "),v("p",[t._v("例如，在一个配置了令牌身份认证且启用了匿名访问的服务器上，如果请求提供了非法的 持有者令牌，则会返回 "),v("code",[t._v("401 Unauthorized")]),t._v(" 错误。 如果请求没有提供持有者令牌，则被视为匿名请求。")]),t._v(" "),v("p",[t._v("在 1.5.1-1.5.x 版本中，匿名访问默认情况下是被禁用的，可以通过为 API 服务器设定 "),v("code",[t._v("--anonymous-auth=true")]),t._v(" 来启用。")]),t._v(" "),v("p",[t._v("在 1.6 及之后版本中，如果所使用的鉴权模式不是 "),v("code",[t._v("AlwaysAllow")]),t._v("，则匿名访问默认是被启用的。 从 1.6 版本开始，ABAC 和 RBAC 鉴权模块要求对 "),v("code",[t._v("system:anonymous")]),t._v(" 用户或者 "),v("code",[t._v("system:unauthenticated")]),t._v(" 用户组执行显式的权限判定，所以之前的为 "),v("code",[t._v("*")]),t._v(" 用户或 "),v("code",[t._v("*")]),t._v(" 用户组赋予访问权限的策略规则都不再包含匿名用户。")]),t._v(" "),v("h3",{attrs:{id:"鉴权"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#鉴权"}},[t._v("#")]),t._v(" 鉴权")]),t._v(" "),v("p",[t._v("请求在通过认证之后，请求将进入鉴权环节")]),t._v(" "),v("p",[t._v("审查请求属性")]),t._v(" "),v("p",[t._v("Kubernetes 仅审查以下 API 请求属性：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("用户")]),t._v(" - 身份验证期间提供的 "),v("code",[t._v("user")]),t._v(" 字符串。")]),t._v(" "),v("li",[v("strong",[t._v("组")]),t._v(" - 经过身份验证的用户所属的组名列表。")]),t._v(" "),v("li",[v("strong",[t._v("额外信息")]),t._v(" - 由身份验证层提供的任意字符串键到字符串值的映射。")]),t._v(" "),v("li",[v("strong",[t._v("API")]),t._v(" - 指示请求是否针对 API 资源。")]),t._v(" "),v("li",[v("strong",[t._v("请求路径")]),t._v(" - 各种非资源端点的路径，如 "),v("code",[t._v("/api")]),t._v(" 或 "),v("code",[t._v("/healthz")]),t._v("。")]),t._v(" "),v("li",[v("strong",[t._v("API 请求动词")]),t._v(" - API 动词 "),v("code",[t._v("get")]),t._v("、"),v("code",[t._v("list")]),t._v("、"),v("code",[t._v("create")]),t._v("、"),v("code",[t._v("update")]),t._v("、"),v("code",[t._v("patch")]),t._v("、"),v("code",[t._v("watch")]),t._v("、 "),v("code",[t._v("proxy")]),t._v("、"),v("code",[t._v("redirect")]),t._v("、"),v("code",[t._v("delete")]),t._v(" 和 "),v("code",[t._v("deletecollection")]),t._v(" 用于资源请求。 要确定资源 API 端点的请求动词，请参阅 "),v("a",{attrs:{href:"https://kubernetes.io/zh/docs/reference/access-authn-authz/authorization/#determine-the-request-verb",target:"_blank",rel:"noopener noreferrer"}},[t._v("确定请求动词"),v("OutboundLink")],1),t._v("。")]),t._v(" "),v("li",[v("strong",[t._v("HTTP 请求动词")]),t._v(" - HTTP 动词 "),v("code",[t._v("get")]),t._v("、"),v("code",[t._v("post")]),t._v("、"),v("code",[t._v("put")]),t._v(" 和 "),v("code",[t._v("delete")]),t._v(" 用于非资源请求。")]),t._v(" "),v("li",[v("strong",[t._v("Resource")]),t._v(" - 正在访问的资源的 ID 或名称（仅限资源请求）- 对于使用 "),v("code",[t._v("get")]),t._v("、"),v("code",[t._v("update")]),t._v("、"),v("code",[t._v("patch")]),t._v(" 和 "),v("code",[t._v("delete")]),t._v(" 动词的资源请求，你必须提供资源名称。")]),t._v(" "),v("li",[v("strong",[t._v("子资源")]),t._v(" - 正在访问的子资源（仅限资源请求）。")]),t._v(" "),v("li",[v("strong",[t._v("名字空间")]),t._v(" - 正在访问的对象的名称空间（仅适用于名字空间资源请求）。")]),t._v(" "),v("li",[v("strong",[t._v("API 组")]),t._v(" - 正在访问的 "),v("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/overview/kubernetes-api/#api-groups",target:"_blank",rel:"noopener noreferrer"}},[t._v("API 组"),v("OutboundLink")],1),t._v(" （仅限资源请求）。空字符串表示"),v("a",{attrs:{href:"https://kubernetes.io/zh/docs/reference/using-api/#api-groups",target:"_blank",rel:"noopener noreferrer"}},[t._v("核心 API 组"),v("OutboundLink")],1)])]),t._v(" "),v("p",[t._v("鉴权策略")]),t._v(" "),v("p",[t._v("目前支持6种鉴权策略，每种鉴权策略对应一个鉴权器，使用的鉴权策略需要在APIServer启动时以参数"),v("code",[t._v("--authorization-mode")]),t._v("的形式指定，多种策略同时指定时使用','号连接：")]),t._v(" "),v("p",[t._v("策略分类有：")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("--authorization-mode=ABAC")]),t._v(" 基于属性的访问控制（ABAC）模式允许你 使用本地文件配置策略。")]),t._v(" "),v("li",[v("code",[t._v("--authorization-mode=RBAC")]),t._v(" 基于角色的访问控制（RBAC）模式允许你使用 Kubernetes API 创建和存储策略。")]),t._v(" "),v("li",[v("code",[t._v("--authorization-mode=Webhook")]),t._v(" WebHook 是一种 HTTP 回调模式，允许你使用远程 REST 端点管理鉴权。")]),t._v(" "),v("li",[v("code",[t._v("--authorization-mode=Node")]),t._v(" 节点鉴权是一种特殊用途的鉴权模式，专门对 kubelet 发出的 API 请求执行鉴权。")]),t._v(" "),v("li",[v("code",[t._v("--authorization-mode=AlwaysDeny")]),t._v(" 该标志阻止所有请求。仅将此标志用于测试。")]),t._v(" "),v("li",[v("code",[t._v("--authorization-mode=AlwaysAllow")]),t._v(" 此标志允许所有请求。仅在你不需要 API 请求 的鉴权时才使用此标志。")])]),t._v(" "),v("p",[t._v("与上一篇的认证模块不同的是，当配置多个鉴权模块时，鉴权模块按"),v("strong",[t._v("顺序")]),t._v("检查，靠前的模块具有更高的优先级来允许或拒绝请求。")]),t._v(" "),v("p",[t._v("鉴权结果")]),t._v(" "),v("h2",{attrs:{id:"kubelet"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#kubelet"}},[t._v("#")]),t._v(" Kubelet")]),t._v(" "),v("p",[t._v("Kubelet作为k8s核心组件中的daemon端运行在集群中的每一个节点上，承接着控制平面的指令向数据平面传达。不像scheduler、controller组件只负责相对单一的功能，kubelet除了管理自身的运行时外，还需要和宿主系统(linux)、CRI、CNI、CSI等外部组件对接，无疑是一个复杂度很高的组件")]),t._v(" "),v("p",[t._v("Kubelet的主要功能")]),t._v(" "),v("ul",[v("li",[t._v("pod启停")]),t._v(" "),v("li",[t._v("容器网络管理")]),t._v(" "),v("li",[t._v("Volume管理")]),t._v(" "),v("li",[t._v("探针检查")]),t._v(" "),v("li",[t._v("容器监控")])]),t._v(" "),v("p",[t._v("本篇开始进入数据交互平面的daemon组件kubelet部分，看看kubelet是如何在控制平面和数据平面中以承上启下的模式工作的")]),t._v(" "),v("h2",{attrs:{id:"kube-proxy"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#kube-proxy"}},[t._v("#")]),t._v(" kube-proxy")]),t._v(" "),v("p",[t._v("https://www.zhihu.com/topic/21216319/top-answers")]),t._v(" "),v("h2",{attrs:{id:"公共库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#公共库"}},[t._v("#")]),t._v(" 公共库")]),t._v(" "),v("h3",{attrs:{id:"client-go"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#client-go"}},[t._v("#")]),t._v(" client-go")]),t._v(" "),v("p",[t._v("client-go 是 kubernetes 中比较重要的一个组件，从我上一篇文章中梳理的图中可以看出来，apiserver 是一个核心，其它组件都要和这个核心模块交互，所以 client-go 的出现就是为了统一封装对 apiserver 的交互访问。")]),t._v(" "),v("p",[t._v("client-go 这种设计思路还是不错的，当然是适合 kubernetes 这样的项目，几乎所有的模块都在围绕 apiserver，那么和 apiserver 的交互就显的尤为重要，那么这部分代码的抽象封装也就顺理成章了。这种解偶方式也是挺特别的，在看了书，走读了这部分的源码之后也才发现，同样的 client 在使用方式，使用对象不一样，就需要不一样的封装方式")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}},[t._v("目录名")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("用途")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("discovery")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("这个是 discovery client 的代码，是对 rest 客户端的进一步封装，用于发现 apiserver 所支持的能力和信息")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("dynamic")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("这个是 dynamic client 的代码，是对 rest 客户端的进一步封装，动态客户端，面向处理 CRD")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("examples")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("这里面有一些例子，比如对 deployment 创建、修改，如何选主，workqueue 如何使用等等")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("informers")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("这就是 client-go 中非常有名的 informer 机制的核心代码")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("kubernetes")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("clientset 的代码，也是对 rest 客户端的进一步封装，提供复杂的资源访问和管理能力")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("listers")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("为每个 k8s 资源提供 lister 功能，提供了只读缓存功能")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("metadata")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("pkg")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("主要是一些功能函数，比如版本函数")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("rest")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("这是最基础的 client，其它的 client 都是基于此派生的")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("scale")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("scale client 的代码")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("tools")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("工具函数库，主要是和 k8s 相关的工具函数")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("util")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("通用的一些工具函数")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("transport")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("提供安全 tcp 链接")])])])]),t._v(" "),v("p",[t._v("核心数据结构")]),t._v(" "),v("div",{staticClass:"language-go extra-class"},[v("pre",{pre:!0,attrs:{class:"language-go"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" RESTClient "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个初始化的 apiserver 的地址，下面我也贴了一个 kubeconfig 文件的内容，这个地址就是 cluster 的 server。")]),t._v("\n\tbase "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("url"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("URL\n\n    "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个是 apiVersion ")]),t._v("\n\tversionedAPIPath "),v("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对客户端编解码的设置")]),t._v("\n\tcontent ClientContentConfig\n\n\t"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// creates BackoffManager that is passed to requests.")]),t._v("\n\tcreateBackoffMgr "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" BackoffManager\n\n    "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 限流控制，是针对这个客户端的所有请求的。这个也是非常好的一个设计，一般 sdk 的设计很少考虑这个，大多数只考虑功能")]),t._v("\n\trateLimiter flowcontrol"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RateLimiter\n\n\t"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// warningHandler is shared among all requests created by this client.")]),t._v("\n\t"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If not set, defaultWarningHandler is used.")]),t._v("\n\twarningHandler WarningHandler\n\n\t"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// http 请求客户端")]),t._v("\n\tClient "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("http"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Client\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),v("h4",{attrs:{id:"informer"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#informer"}},[t._v("#")]),t._v(" informer")]),t._v(" "),v("p",[t._v("Informer (就是 SharedInformer)是 client-go 的重要组成部分，在了解 client-go 之前，了解一下 Informer 的实现是很有必要的")]),t._v(" "),v("p",[t._v("主要使用到 Informer 和 workqueue 两个核心组件。Controller 可以有一个或多个 informer 来跟踪某一个 resource。Informter 跟 API server 保持通讯获取资源的最新状态并更新到本地的 cache 中，一旦跟踪的资源有变化，informer 就会调用 callback。把关心的变更的 Object 放到 workqueue 里面。然后 woker 执行真正的业务逻辑，计算和比较 workerqueue 里 items 的当前状态和期望状态的差别，然后通过 client-go 向 API server 发送请求，直到驱动这个集群向用户要求的状态演化")]),t._v(" "),v("h3",{attrs:{id:"wait"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#wait"}},[t._v("#")]),t._v(" wait")]),t._v(" "),v("p",[t._v("代码路径: "),v("code",[t._v("vendor/k8s.io/apimachinery/pkg/util/wait/wait.go")])]),t._v(" "),v("p",[t._v("wait库内的各种function，大体来说都是以轮询的形式，根据时间间隔、条件判断，来确定工具执行函数是否应被继续执行。按代码中呈现，按触发形式再细化一下，各function则可以分为这几类")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("条件类型")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Until类")]),t._v(" "),v("td",[t._v("用得最多的类型，一般以一条chan struct{} 或context Done接收done信号作为终止轮询的依据")])]),t._v(" "),v("tr",[v("td",[t._v("Backoff类")]),t._v(" "),v("td",[t._v("每间隔一定的时长执行一次回溯函数，一般情况下，间隔时长随着回溯次数递增而倍数级延长，但间隔时长也会有上限值")])]),t._v(" "),v("tr",[v("td",[t._v("poll类")]),t._v(" "),v("td",[t._v("两条channel，一条用作传递单次执行信号用来轮询，一条用作传递done信号")])])])]),t._v(" "),v("p",[t._v("Untile类型有两个具体实现，分别是Until和UntilWithContext")]),t._v(" "),v("div",{staticClass:"language-go extra-class"},[v("pre",{pre:!0,attrs:{class:"language-go"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("Until")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" period time"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Duration"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stopCh "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("chan")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("JitterUntil")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" period"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stopCh"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),v("p",[t._v("JitterUntil函数可谓是把条件考虑得很细致，参数上有执行周期、抖动因子、窗口期(是否包含函数执行时间)，另外在stopCh信号处理上也做到了预防超期执行，JitterUntil函数已经足以应对各类以时间间隔维度的轮询场景了")]),t._v(" "),v("p",[t._v("UntilWithContext")]),t._v(" "),v("div",{staticClass:"language-go extra-class"},[v("pre",{pre:!0,attrs:{class:"language-go"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("UntilWithContext")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx context"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Context"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Context"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" period time"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Duration"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("JitterUntilWithContext")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" period"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),v("p",[t._v("Backoff类")]),t._v(" "),v("p",[t._v("https://github.com/yinwenqin/kubeSourceCodeNote/blob/master/pkg/pkg-01-wait-%E5%AE%9A%E6%97%B6(%E6%9D%A1%E4%BB%B6)%E8%BD%AE%E8%AF%A2%E5%BA%93.md")]),t._v(" "),v("h2",{attrs:{id:"资源"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#资源"}},[t._v("#")]),t._v(" 资源")]),t._v(" "),v("p",[t._v("源码剖析：https://wqyin.cn/gitbooks/kubeSourceCodeNote/apiServer/Kubernetes%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-APIServer-P1-%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84%E4%BF%A1%E6%81%AF.html")]),t._v(" "),v("p",[t._v("源码剖析：https://helight.cn/blog/2020/kube-controller-manager-code-1/")]),t._v(" "),v("p",[t._v("源码剖析：https://github.com/cloudnativeto/sig-kubernetes/blob/master/docs/event/code-club.md")]),t._v(" "),v("p",[t._v("https://sulao.cn/post/828.html")])])}),[],!1,null,null,null);e.default=a.exports}}]);