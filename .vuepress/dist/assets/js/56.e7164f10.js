(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{336:function(t,a,e){"use strict";e.r(a);var s=e(14),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("​")]),t._v(" "),e("h2",{attrs:{id:"组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[t._v("#")]),t._v(" 组件")]),t._v(" "),e("h3",{attrs:{id:"kubelet"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kubelet"}},[t._v("#")]),t._v(" kubelet")]),t._v(" "),e("p",[t._v('kubelet 是运行在每个节点上的主要的"节点代理"，每个节点都会启动 kubelet进程，用来处理 Master 节点下发到本节点的任务，按照 PodSpec 描述来管理Pod 和其中的容器（PodSpec 是用来描述一个 pod 的 YAML 或者 JSON 对象）。')]),t._v(" "),e("p",[t._v("kubelet 通过各种机制（主要通过 apiserver ）获取一组 PodSpec 并保证在这些 PodSpec 中描述的容器健康运行。")]),t._v(" "),e("p",[t._v("kubelet 默认监听四个端口，分别为 10250 、10255、10248、4194。")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("LISTEN "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" *:10250 *:* users:"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v('"kubelet"'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("pid"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("48500")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("fd"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),t._v("    \nLISTEN "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" *:10255 *:* users:"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v('"kubelet"'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("pid"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("48500")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("fd"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),t._v("\nLISTEN "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" *:4194 *:* users:"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v('"kubelet"'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("pid"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("48500")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("fd"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),t._v("\nLISTEN "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:10248 *:* users:"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v('"kubelet"'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("pid"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("48500")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("fd"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),t._v("\n")])])]),e("p",[t._v("10250（kubelet API）：kubelet server 与 apiserver 通信的端口，定期请求 apiserver 获取自己所应当处理的任务，通过该端口可以访问获取 node 资源以及状态。")]),t._v(" "),e("p",[t._v("10248（健康检查端口）：通过访问该端口可以判断 kubelet 是否正常工作, 通过 kubelet 的启动参数 "),e("code",[t._v("--healthz-port")]),t._v(" 和 "),e("code",[t._v("--healthz-bind-address")]),t._v(" 来指定监听的地址和端口。")]),t._v(" "),e("p",[t._v("4194（cAdvisor 监听）：kublet 通过该端口可以获取到该节点的环境信息以及 node 上运行的容器状态等内容，访问 "),e("a",{attrs:{href:"http://localhost:4194/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:4194"),e("OutboundLink")],1),t._v(" 可以看到 cAdvisor 的管理界面,通过 kubelet 的启动参数 "),e("code",[t._v("--cadvisor-port")]),t._v(" 可以指定启动的端口。")]),t._v(" "),e("p",[t._v("10255 （readonly API）：提供了 pod 和 node 的信息，接口以只读形式暴露出去，访问该端口不需要认证和鉴权。")]),t._v(" "),e("p",[t._v("kubelet 主要功能：")]),t._v(" "),e("ul",[e("li",[t._v("pod 管理：kubelet 定期从所监听的数据源获取节点上 pod/container 的期望状态（运行什么容器、运行的副本数量、网络或者存储如何配置等等），并调用对应的容器平台接口达到这个状态。")]),t._v(" "),e("li",[t._v("容器健康检查：kubelet 创建了容器之后还要查看容器是否正常运行，如果容器运行出错，就要根据 pod 设置的重启策略进行处理。")]),t._v(" "),e("li",[t._v("容器监控：kubelet 会监控所在节点的资源使用情况，并定时向 master 报告，资源使用数据都是通过 cAdvisor 获取的。知道整个集群所有节点的资源情况，对于 pod 的调度和正常运行至关重要。")])]),t._v(" "),e("p",[t._v("kubelet 组件中的模块")]),t._v(" "),e("p",[t._v("1、PLEG(Pod Lifecycle Event Generator） PLEG 是 kubelet 的核心模块,PLEG 会一直调用 container runtime 获取本节点 containers/sandboxes 的信息，并与自身维护的 pods cache 信息进行对比，生成对应的 PodLifecycleEvent，然后输出到 eventChannel 中，通过 eventChannel 发送到 kubelet syncLoop 进行消费，然后由 kubelet syncPod 来触发 pod 同步处理过程，最终达到用户的期望状态。")]),t._v(" "),e("p",[t._v("2、cAdvisor cAdvisor（https://github.com/google/cadvisor）是 google 开发的容器监控工具，集成在 kubelet 中，起到收集本节点和容器的监控信息，大部分公司对容器的监控数据都是从 cAdvisor 中获取的 ，cAvisor 模块对外提供了 interface 接口，该接口也被 imageManager，OOMWatcher，containerManager 等所使用。")]),t._v(" "),e("p",[t._v("3、OOMWatcher 系统 OOM 的监听器，会与 cadvisor 模块之间建立 SystemOOM,通过 Watch方式从 cadvisor 那里收到的 OOM 信号，并产生相关事件。")]),t._v(" "),e("p",[t._v("4、probeManager probeManager 依赖于 statusManager,livenessManager,containerRefManager，会定时去监控 pod 中容器的健康状况，当前支持两种类型的探针：livenessProbe 和readinessProbe。 livenessProbe：用于判断容器是否存活，如果探测失败，kubelet 会 kill 掉该容器，并根据容器的重启策略做相应的处理。 readinessProbe：用于判断容器是否启动完成，将探测成功的容器加入到该 pod 所在 service 的 endpoints 中，反之则移除。readinessProbe 和 livenessProbe 有三种实现方式：http、tcp 以及 cmd。")]),t._v(" "),e("p",[t._v("5、statusManager statusManager 负责维护状态信息，并把 pod 状态更新到 apiserver，但是它并不负责监控 pod 状态的变化，而是提供对应的接口供其他组件调用，比如 probeManager。")]),t._v(" "),e("p",[t._v("6、containerRefManager 容器引用的管理，相对简单的Manager，用来报告容器的创建，失败等事件，通过定义 map 来实现了 containerID 与 v1.ObjectReferece 容器引用的映射。")]),t._v(" "),e("p",[t._v("7、evictionManager 当节点的内存、磁盘或 inode 等资源不足时，达到了配置的 evict 策略， node 会变为 pressure 状态，此时 kubelet 会按照 qosClass 顺序来驱赶 pod，以此来保证节点的稳定性。可以通过配置 kubelet 启动参数 --eviction-hard= 来决定 evict 的策略值。")]),t._v(" "),e("p",[t._v("8、imageGC imageGC 负责 node 节点的镜像回收，当本地的存放镜像的本地磁盘空间达到某阈值的时候，会触发镜像的回收，删除掉不被 pod 所使用的镜像，回收镜像的阈值可以通过 kubelet 的启动参数 --image-gc-high-threshold 和 --image-gc-low-threshold 来设置。")]),t._v(" "),e("p",[t._v("9、containerGC containerGC 负责清理 node 节点上已消亡的 container，具体的 GC 操作由runtime 来实现。")]),t._v(" "),e("p",[t._v("10、imageManager 调用 kubecontainer 提供的PullImage/GetImageRef/ListImages/RemoveImage/ImageStates 方法来保证pod 运行所需要的镜像。")]),t._v(" "),e("p",[t._v("11、volumeManager 负责 node 节点上 pod 所使用 volume 的管理，volume 与 pod 的生命周期关联，负责 pod 创建删除过程中 volume 的 mount/umount/attach/detach 流程，kubernetes 采用 volume Plugins 的方式，实现存储卷的挂载等操作，内置几十种存储插件。")]),t._v(" "),e("p",[t._v("12、containerManager 负责 node 节点上运行的容器的 cgroup 配置信息，kubelet 启动参数如果指定 --cgroups-per-qos 的时候，kubelet 会启动 goroutine 来周期性的更新 pod 的 cgroup 信息，维护其正确性，该参数默认为 true，实现了 pod 的Guaranteed/BestEffort/Burstable 三种级别的 Qos。")]),t._v(" "),e("p",[t._v("13、runtimeManager containerRuntime 负责 kubelet 与不同的 runtime 实现进行对接，实现对于底层 container 的操作，初始化之后得到的 runtime 实例将会被之前描述的组件所使用。可以通过 kubelet 的启动参数 --container-runtime 来定义是使用docker 还是 rkt，默认是 docker。")]),t._v(" "),e("p",[t._v("14、podManager podManager 提供了接口来存储和访问 pod 的信息，维持 static pod 和 mirror pods 的关系，podManager 会被statusManager/volumeManager/runtimeManager 所调用，podManager 的接口处理流程里面会调用 secretManager 以及 configMapManager。")]),t._v(" "),e("h3",{attrs:{id:"kustomize"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kustomize"}},[t._v("#")]),t._v(" Kustomize")]),t._v(" "),e("p",[t._v("Kustomize CLI 命令参考。")]),t._v(" "),e("p",[t._v("Kustomize 是一个用来定制 Kubernetes 配置的工具。它提供以下功能特性来管理应用配置文件：")]),t._v(" "),e("ul",[e("li",[t._v("从其他来源生成资源")]),t._v(" "),e("li",[t._v("为资源设置贯穿性（Cross-Cutting）字段")]),t._v(" "),e("li",[t._v("组织和定制资源集合")])]),t._v(" "),e("p",[t._v("Kustomize 提供一个插件框架，允许用户开发自己的 "),e("em",[t._v("生成器")]),t._v(" 和 "),e("em",[t._v("转化器")]),t._v("。")]),t._v(" "),e("p",[t._v("通过插件，实现 [generatorOptions] 和 [transformerconfigs] 无法满足的需求。")]),t._v(" "),e("ul",[e("li",[e("em",[t._v("generator")]),t._v(" 插件生成 k8s 资源，比如 "),e("a",{attrs:{href:"https://github.com/kubernetes-sigs/kustomize/tree/master/plugin/someteam.example.com/v1/chartinflator",target:"_blank",rel:"noopener noreferrer"}},[t._v("helm chart inflator"),e("OutboundLink")],1),t._v(" 是一个 generator 插件，基于少量自由变量生成一个 "),e("a",{attrs:{href:"https://12factor.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("12-factor"),e("OutboundLink")],1),t._v(" 应用所包含的全部组件 deployment，service，scaler，ingress 等）也是一个 generator 插件。")]),t._v(" "),e("li",[e("em",[t._v("transformer")]),t._v(" 插件转化（修改）k8s 资源，比如可能会执行对特殊容器命令行的编辑，或为其他内置转换器（"),e("code",[t._v("namePrefix")]),t._v("、"),e("code",[t._v("commonLabels")]),t._v(" 等）无法转换的内容提供转换。")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("kubectl kustomize "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("kustomization_directory"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("p",[t._v("ConfigMap 和 Secret 包含其他 Kubernetes 对象（如 Pod）所需要的配置或敏感数据。 ConfigMap 或 Secret 中数据的来源往往是集群外部，例如某个 "),e("code",[t._v(".properties")]),t._v(" 文件或者 SSH 密钥文件。 Kustomize 提供 "),e("code",[t._v("secretGenerator")]),t._v(" 和 "),e("code",[t._v("configMapGenerator")]),t._v("，可以基于文件或字面值来生成 Secret 和 ConfigMap")]),t._v(" "),e("p",[t._v("要基于文件来生成 ConfigMap，可以在 "),e("code",[t._v("configMapGenerator")]),t._v(" 的 "),e("code",[t._v("files")]),t._v(" 列表中添加表项。")]),t._v(" "),e("p",[t._v("ConfigMap 也可基于字面的键值偶对来生成。要基于键值偶对来生成 ConfigMap， 在 "),e("code",[t._v("configMapGenerator")]),t._v(" 的 "),e("code",[t._v("literals")]),t._v(" 列表中添加表项")]),t._v(" "),e("p",[t._v("Kustomize 支持组合不同的资源。"),e("code",[t._v("kustomization.yaml")]),t._v(" 文件的 "),e("code",[t._v("resources")]),t._v(" 字段定义配置中要包含的资源列表。 你可以将 "),e("code",[t._v("resources")]),t._v(" 列表中的路径设置为资源配置文件的路径。")]),t._v(" "),e("p",[t._v("并非所有资源或者字段都支持策略性合并补丁。为了支持对任何资源的任何字段进行修改， Kustomize 提供通过 "),e("code",[t._v("patchesJson6902")]),t._v(" 来应用 "),e("a",{attrs:{href:"https://tools.ietf.org/html/rfc6902",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSON 补丁"),e("OutboundLink")],1),t._v("的能力。 为了给 JSON 补丁找到正确的资源，需要在 "),e("code",[t._v("kustomization.yaml")]),t._v(" 文件中指定资源的组（group）、 版本（version）、类别（kind）和名称（name）")]),t._v(" "),e("p",[t._v("Kustomize 中有 "),e("strong",[t._v("基准（bases）")]),t._v(" 和 "),e("strong",[t._v("覆盖（overlays）")]),t._v(" 的概念区分。 "),e("strong",[t._v("基准")]),t._v(" 是包含 "),e("code",[t._v("kustomization.yaml")]),t._v(" 文件的一个目录，其中包含一组资源及其相关的定制。 基准可以是本地目录或者来自远程仓库的目录，只要其中存在 "),e("code",[t._v("kustomization.yaml")]),t._v(" 文件即可。 "),e("strong",[t._v("覆盖")]),t._v(" 也是一个目录，其中包含将其他 kustomization 目录当做 "),e("code",[t._v("bases")]),t._v(" 来引用的 "),e("code",[t._v("kustomization.yaml")]),t._v(" 文件。 "),e("strong",[t._v("基准")]),t._v("不了解覆盖的存在，且可被多个覆盖所使用。 覆盖则可以有多个基准，且可针对所有基准中的资源执行组织操作，还可以在其上执行定制")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个包含基准的目录 ")]),t._v("\nmkdir base\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建 base/deployment.yaml")]),t._v("\ncat <<EOF "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" base/deployment.yaml\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" apps/v1\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Deployment\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("nginx\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("selector")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("matchLabels")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("nginx\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("replicas")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("template")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("nginx\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("nginx\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\nEOF\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建 base/service.yaml 文件")]),t._v("\ncat <<EOF "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" base/service.yaml\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Service\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("nginx\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("nginx\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TCP\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("selector")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("nginx\nEOF\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建 base/kustomization.yaml")]),t._v("\ncat <<EOF "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" base/kustomization.yaml\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("resources")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" deployment.yaml\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" service.yaml\nEOF\n")])])]),e("h3",{attrs:{id:"ytt"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ytt"}},[t._v("#")]),t._v(" ytt")]),t._v(" "),e("h2",{attrs:{id:"k8s健康检查"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#k8s健康检查"}},[t._v("#")]),t._v(" K8s健康检查")]),t._v(" "),e("p",[t._v("k8s健康检测主要分为以下三种")]),t._v(" "),e("p",[t._v("存活性探测（Liveness probes） :主要是探测应用是否还活着。如果检测到应用没有存活就杀掉当前pod并重启。")]),t._v(" "),e("p",[t._v("就绪性探测（Readiness probes）:只要是探测应用是否准备好接受请求访问，如果检测应用准备好了，就把请求流量放进来；反之，则把应用节点从注册中心拿掉。")]),t._v(" "),e("p",[t._v("启动探测（Startup Probes）：对于旧应用需要更长的启动时间，这时候既不想重启应用也不想让请求访问进来，可以设置启动探测给足够的启动时间保证应用启动成功。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("initialDelaySeconds 表示延迟30S开始第一次探测，默认值是0，最小值是0\ntimeoutSeconds 表示每次探测的超时时间，35S后如果没返回结果就认为超时失败，默认值是1，最小值是1\nsuccessThreshold 表示在探测失败后，最小的连续成功被认为是成功的，默认值是1，最小值是1\nfailureThreshold 表示当探测失败时，Kubernetes将在认为失败前尝试failureThreshold次数。默认值是3，最小值是1;Liveness认为失败的操作是重启pod，而readiness认为失败的操作是把pod标记为 Unready\nperiodSeconds 表示多久进行一次探测，默认是10S，最小值是1\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("成功：容器通过了探测\n失败：容器未通过探测\n未知：容器探测失败，不采取任何操作\n")])])]),e("h2",{attrs:{id:"配置管理configmap和secret"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置管理configmap和secret"}},[t._v("#")]),t._v(" 配置管理configMap和secret")]),t._v(" "),e("p",[t._v("k8s中的secret和configmap是为了让POD和配置解耦，使得从集群外部可以想容器内部注入配置信息、环境变量等功能")]),t._v(" "),e("p",[t._v("ConfigMap扮演了K8S集群中配置中心的角色，ConfigMap定义了Pod的配置信息，可以以存储卷的形式挂载至Pod中的应用程序配置文件目录，从ConfigMap中读取配置信息")]),t._v(" "),e("p",[t._v("ConfigMap是明文保存的，如果用来保存数据库账号密码这类信息可以使用通过secret来保存，secret的功能和ConfigMap一样，不过secret是通过Base64的编码机制保存配置信息\n可以通过命令行的方式来创建configmap，")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("kubectl create configmap nginx-config --from-literal"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("nginx_server_port"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(" --from-literal"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("nginx_server_name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("www.sulao.cn\nconfigmap/my-config created\n")])])]),e("p",[t._v("亦可以通过调用配置文件的方式来创建configmap，yaml文件内容如下")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[t._v("vi vhost.conf\nserver "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  listen 8080;\n  server_name www.sulao.cn;\n  root /data/www;\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nkubectl create configmap nginx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("from"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("file=./vhost.conf\nvi nginx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("pod.yaml\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("pod\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumeMounts")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("              "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#定义容器使用存储卷挂载")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" config              "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#使用存储卷的名称")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mountPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /etc/nginx/conf.d/\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" config                  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#存储卷名称")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("configMap")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("                    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#存储卷类型：这里为configmap而不是nfs其他的文件系统，可以指定configmap资源为存储卷")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#configmap名称，这里为我们刚才创建的cm名称")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("items")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("                     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#使用cm中的key")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" vhost.conf           "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#key名称")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" sulao.cn.conf   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#表示映射为文件时文件名是什么")]),t._v("\n")])])]),e("p",[t._v("--from-file=./vhost.conf #利用文件来传递参数，没有给key名称默认为文件名称为key，这里所以文件名就是vhost.conf，文件内容为vhost.conf文件内的内容，当然也可以指定文件名，那么我们创建configmap是需要这样命名")]),t._v(" "),e("h2",{attrs:{id:"部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署"}},[t._v("#")]),t._v(" 部署")]),t._v(" "),e("h3",{attrs:{id:"kubernetes-vagrant-centos-cluster"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-vagrant-centos-cluster"}},[t._v("#")]),t._v(" kubernetes-vagrant-centos-cluster")]),t._v(" "),e("p",[t._v("repo：https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster")]),t._v(" "),e("p",[t._v("部署文档：https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster/blob/master/README-cn.md")])])}),[],!1,null,null,null);a.default=n.exports}}]);