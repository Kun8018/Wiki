(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{383:function(t,s,e){"use strict";e.r(s);var a=e(44),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("​      前端框架，快速开发页面，函数式编程，与后端api快速搭建")]),t._v(" "),e("h2",{attrs:{id:"react原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react原理"}},[t._v("#")]),t._v(" React原理")]),t._v(" "),e("h3",{attrs:{id:"合成事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合成事件"}},[t._v("#")]),t._v(" 合成事件")]),t._v(" "),e("p",[t._v("React合成事件是React模拟原生DOM事件所有能力的一个事件对象，即浏览器原生事件的跨浏览器包装器。它根据w3c规范来定义合成事件，兼容所有浏览器，拥有与浏览器原生事件相同的接口")]),t._v(" "),e("p",[t._v("在React中，所有事件都是合成的，不是原生DOM事件，但可以通过e。nativeEvent属性获取DOM事件")]),t._v(" "),e("p",[t._v("React合成事件存在的目的：")]),t._v(" "),e("p",[t._v("1.为了更好的进行浏览器兼容，更好地跨平台")]),t._v(" "),e("p",[t._v("React采用的是顶层事件代理机制，能够保证冒泡一致性，可以跨浏览器执行。React提供的合成事件用来抹平不同浏览器事件对象之间的差异，将不同平台事件模拟合成事件")]),t._v(" "),e("p",[t._v("2.避免垃圾回收")]),t._v(" "),e("p",[t._v("事件对象可能会被频繁创建和回收，因为react引入事件池，在事件池中获取或释放事件对象。即react事件对象不会被释放掉，而是存放在一个数组中，当事件触发时，就从这个数组中弹出，避免频繁地创建和销毁，垃圾回收")]),t._v(" "),e("p",[t._v("3.方便事件统一管理和事务机制")]),t._v(" "),e("p",[t._v("由于fiber架构的特点，生成一个fiber节点时，它对应的dom节点有可能还未挂载，事件处理函数作为fiber节点的props，也就不能直接绑定到真实的dom节点上。为此，react提供了一种顶层注册、事件收集、统一触发的事件绑定机制")]),t._v(" "),e("p",[t._v("在React中，合成事件会以事件委托的形式绑定在组件最上层，即React所有事件都挂载在document对象上（react16及之前），react17之后绑定在root element元素对象上，并在组件卸载阶段自动销毁绑定的事件。事件委托是对冒泡机制进行优化。\n事件收集是指事件触发时构造合成事件对象，按照冒泡或者捕获的路径去组件中收集真正的事件处理函数")]),t._v(" "),e("p",[t._v("统一触发是")]),t._v(" "),e("p",[t._v("绑定到根组件而非document对象上的原因是为了react渐进升级，避免多版本react共同使用时事件系统发生冲突。")]),t._v(" "),e("p",[t._v("在react中人为地将事件划分等级，最终目的是确定调度任务的轻重缓急。")]),t._v(" "),e("p",[t._v("react按照事件的紧急程度，对事件的优先级分类：")]),t._v(" "),e("p",[t._v("离散事件discreteEvent：click、keydown、focus等，这些事件的触发不是连续的，优先级为0")]),t._v(" "),e("p",[t._v("用户阻塞事件User Blocking Event：drag、scroll、mouseover等，特点是连续触发，阻塞渲染，优先级为1")]),t._v(" "),e("p",[t._v("连续事件ContinuousEvent：canplay、error、audio标签等timeupdate等，优先级最高，为2")]),t._v(" "),e("p",[t._v("四种优先级：")]),t._v(" "),e("p",[t._v("事件优先级：按照用户事件的交互紧急程度，由事件本身决定")]),t._v(" "),e("p",[t._v("更新优先级：事件导致react产生的更新对象的优先级，由事件计算得出")]),t._v(" "),e("p",[t._v("任务优先级：产生更新对象之后，react去执行一个更新任务，这个任务所持有的优先级")]),t._v(" "),e("p",[t._v("调度优先级：Scheduler根据React更新任务生成一个调度任务，调度优先级根据任务优先级获取")]),t._v(" "),e("p",[t._v("事件优先级是在注册阶段被确定的。在root上注册事件时，会根据事件的类别，创建不同优先级的事件监听，最终将它绑定到root上。最终绑定到root上的事件监听其实是dispatchDiscreteEvent、dispatchUserBlockingUpdate、dispatchEvent三个事件中的一个")]),t._v(" "),e("p",[t._v("事件的执行会创建一个update对象，update对象创建完成后意味着需要对页面进行更新，会调用scheduleUpdateOnFiber进入调度，而真正开始调度之前会计算本次产生的更新任务的任务优先级，目的是与已有任务的任务优先级去做比较，便于作出多任务的调度决策")]),t._v(" "),e("p",[t._v("任务优先级被用来区分多个更新任务的紧急程度，它由更新优先级计算而来。任务优先级保证高优先级任务及时响应，收敛同等优先级的任务调度。")]),t._v(" "),e("p",[t._v("一旦事件被调度，那么它就会进入Scheduler，在Scheduler中这个任务会被包装一下，生成一个属于属于Schedule自己的task，这个task持有的优先级就是调度优先级")]),t._v(" "),e("p",[t._v("在Scheduler中，分别用过期任务和未过期任务的队列去管理它内部的task，过期任务的队列中的task根据过期事件去排序，最早过期的排在前面，便于被最先处理，而过期时间是有调度优先级计算出的，不同的调度优先级对应的过期时间不同")]),t._v(" "),e("h3",{attrs:{id:"fiber架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fiber架构"}},[t._v("#")]),t._v(" Fiber架构")]),t._v(" "),e("p",[t._v("react16相比于react15，经过重构后Reconciliation和Rendering被分为两个不同的阶段。")]),t._v(" "),e("h4",{attrs:{id:"fiber架构中的基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fiber架构中的基本概念"}},[t._v("#")]),t._v(" fiber架构中的基本概念")]),t._v(" "),e("p",[t._v("Fiber 的架构有两个主要阶段：协调/渲染 和 提交。")]),t._v(" "),e("p",[e("strong",[t._v("reconciler协调阶段")]),t._v("：当组件次初始化和其后的状态更新中，React会创建两颗不相同的虚拟树，React 需要基于这两棵树之间的差别来判断如何有效率的更新 UI 以保证当前 UI 与最新的树保持同步，计算树哪些部分需要更新。"),e("strong",[t._v("react diff算法就发生在这个阶段")])]),t._v(" "),e("p",[e("strong",[t._v("renderer阶段")]),t._v("：渲染器负责将拿到的虚拟组件树信息，根据其对应环境真实地更新渲染到应用中。有兴趣的朋友可以看一下dan自己的博客中的文章=》"),e("a",{attrs:{href:"https://overreacted.io/react-as-a-ui-runtime/#renderers",target:"_blank",rel:"noopener noreferrer"}},[t._v("运行时的react=》渲染器"),e("OutboundLink")],1),t._v("，介绍了react的Renderer渲染器如react-dom和react native等，其可以根据不同的主环境来生成不同的实例。")]),t._v(" "),e("p",[t._v("协调阶段的工作：")]),t._v(" "),e("p",[t._v("协调阶段这是React遍历组件树的阶段，并且：")]),t._v(" "),e("ul",[e("li",[t._v("更新状态和属性")]),t._v(" "),e("li",[t._v("调用生命周期钩子")]),t._v(" "),e("li",[t._v("获取组件的"),e("code",[t._v("children")])]),t._v(" "),e("li",[t._v("将它们与之前的"),e("code",[t._v("children")]),t._v("进行对比")]),t._v(" "),e("li",[t._v("并计算出需要执行的DOM更新")])]),t._v(" "),e("p",[e("strong",[t._v("fiber对象")])]),t._v(" "),e("p",[t._v("一个fiber对象是表征work的一个基本单元。")]),t._v(" "),e("p",[t._v("每一个React元素对应一个fiber对象，fibers是一个基于child, sibling 和 return属性构成的链表。 fiber对象核心的属性和含义如下所示：")]),t._v(" "),e("p",[e("strong",[t._v("child、silbing、return")])]),t._v(" "),e("p",[t._v("fiber对象的属性，这些属性指向其他fiber，表征当前工作单元的下一个工作单元，用于描述fiber的递归树结构。")]),t._v(" "),e("p",[t._v("child： 对应于父fiber节点的子fiber silbing： 对应于fiber节点的同类兄弟节点 return： 对应于fiber节点的父节点")]),t._v(" "),e("p",[t._v("相对于React v16之前的版本，正是得益于fiber对象的child、sibing和return属性构成的单链表结构以及fiber对象中存储的上下文信息，才使得scheduler可以达到暂停、中止、重新开始等并发模式的新特性。")]),t._v(" "),e("p",[e("strong",[t._v("work")])]),t._v(" "),e("p",[t._v("在React reconciliation过程中出现的各种比如state update，props update 或 refs update等必须执行计算的活动，这些活动我们在Fiber架构体系里面统一称之为 “work”。")]),t._v(" "),e("p",[e("strong",[t._v("worktag")])]),t._v(" "),e("p",[t._v("workTag 类型，用于描述一个React元素的类型，即为上述fiber对象的 fiber.tag")]),t._v(" "),e("p",[e("strong",[t._v("stateNode")])]),t._v(" "),e("p",[t._v("一个组件、一个DOM节点或其他跟fiber节点相关联的React元素的实例的引用。通常，我们可以说这个属性是用于保存与一个fiber相关联的本地状态。即上述fiber对象的 fiber.stateNode。")]),t._v(" "),e("h4",{attrs:{id:"双缓存机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双缓存机制"}},[t._v("#")]),t._v(" 双缓存机制")]),t._v(" "),e("p",[e("strong",[t._v("current树和workInProgress树")])]),t._v(" "),e("p",[t._v("首次渲染后，React生成一个用于渲染UI并能映射应用状态的fiber树，我们通常称之为current树。当React遍历current树，它为每一个存在的fiber节点创建一个alternate属性的替代节点，该节点构成workInProgress树。")]),t._v(" "),e("p",[t._v("所有发生update的work都在workInProgress树中执行，如果alternate属性还未创建，React将在处理update之前在createWorkInProgress函数中创建一个current树的副本，即形成workInProgress树，用于映射新的状态并在commit阶段刷新到屏幕。")]),t._v(" "),e("p",[e("strong",[t._v("所有这些活动都被称为Fiber内部的工作。")]),t._v(" 需要完成的工作类型取决于React Element的类型。 例如，对于 "),e("code",[t._v("Class Component")]),t._v(" React需要实例化一个类，然而对于"),e("code",[t._v("Functional Component")]),t._v("却不需要。")]),t._v(" "),e("p",[t._v("在浏览器中GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。")]),t._v(" "),e("p",[e("strong",[t._v("Stack Reconciler 和 fiber reconciliation")])]),t._v(" "),e("p",[t._v("React16 推出Fiber之前协调算法是Stack Reconciler，即递归遍历所有的 Virtual DOM 节点执行Diff算法，一旦开始便无法中断，直到整颗虚拟dom树构建完成后才会释放主线程，因其JavaScript单线程的特点，若当下组件具有复杂的嵌套和逻辑处理，diff便会堵塞UI进程，使动画和交互等优先级相对较高的任务无法立即得到处理，造成页面卡顿掉帧，影响用户体验。在"),e("code",[t._v("React15")]),t._v("及之前，"),e("code",[t._v("React")]),t._v("会递归比对"),e("code",[t._v("VirtualDOM")]),t._v("树，找出需要变动的节点，然后同步更新它们。这个过程"),e("code",[t._v("React")]),t._v("称为"),e("code",[t._v("Reconciliation(协调)")]),t._v("。")]),t._v(" "),e("p",[t._v("在"),e("code",[t._v("Reconciliation")]),t._v("期间，"),e("code",[t._v("React")]),t._v("会一直占用着浏览器资源，一则会导致用户触发的事件得不到响应, 二则会导致掉帧，用户可能会感觉到卡顿。")]),t._v(" "),e("p",[t._v("针对上述痛点，我们期望将**”找出有增删改的节点“，”然后同步更新他们“"),e("strong",[t._v("这个过程分解成两个独立的部分，或者通过某种方式能让整个过程")]),t._v("可中断可恢复的执行**，类似于多任务操作系统的单处理器调度。")]),t._v(" "),e("p",[t._v("fiber的核心目标：")]),t._v(" "),e("ul",[e("li",[t._v("把可中断的工作拆分成多个小任务")]),t._v(" "),e("li",[t._v("为不同类型的更新分配任务优先级")]),t._v(" "),e("li",[t._v("更新时能够暂停，终止，复用渲染任务")])]),t._v(" "),e("p",[t._v("这是一种"),e("strong",[t._v("合作式调度")]),t._v("，需要程序和浏览器互相信任。浏览器作为领导者，会分配执行时间片（即requestIdleCallback）给程序去选择调用，程序需要按照约定在这个时间内执行完毕，并将控制权交还浏览器。")]),t._v(" "),e("p",[t._v("Fiber是一个执行单元，每次执行完一个执行单元，React就会检查现在还剩多少时间，如果没有时间就将控制权交还浏览器；然后继续进行下一帧的渲染。")]),t._v(" "),e("p",[t._v("从根节点开始遍历")]),t._v(" "),e("p",[t._v("如果没有长子，则标识当前节点遍历完成。"),e("code",[t._v("completeUnitOfWork")]),t._v("中收集")]),t._v(" "),e("p",[t._v("如果没有相邻兄弟，则返回父节点标识父节点遍历完成。"),e("code",[t._v("completeUnitOfWork")]),t._v("中收集")]),t._v(" "),e("p",[t._v("如果没有父节点，标识所有遍历完成。"),e("code",[t._v("over")])]),t._v(" "),e("p",[t._v("如果有长子，则遍历；"),e("code",[t._v("beginWork")]),t._v("中收集；收集完后返回其长子，回到"),e("code",[t._v("第2步")]),t._v("循环遍历")]),t._v(" "),e("p",[t._v("如果有相邻兄弟，则遍历；"),e("code",[t._v("beginWork")]),t._v("中收集；收集完后返回其长子，回到"),e("code",[t._v("第2步")]),t._v("循环遍历")]),t._v(" "),e("h4",{attrs:{id:"render阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#render阶段"}},[t._v("#")]),t._v(" Render阶段")]),t._v(" "),e("p",[e("strong",[t._v("enqueueSetState")])]),t._v(" "),e("p",[t._v("以类组件为例，ReactDOM中的updater对象是一个classComponentUpdater，用于获取fiber实例、update队列和调度 work")]),t._v(" "),e("p",[t._v("fiber.updateQueue是一个具有updates优先级的链表（UpdateQueue is a linked list of prioritized updates）")]),t._v(" "),e("p",[t._v("跟Fiber一样，update 队列也是成对出现：一个代表屏幕可见状态的 current 队列，一个在commit阶段之前可被异步计算和处理的work-in-progress 队列。如果一个work-in-progress队列在完成之前被丢弃，则将会通过克隆一个curent队列来创建一个新的work-in-progress队列。")]),t._v(" "),e("p",[t._v("函数调用栈：performUnitOfWork --\x3e beginWork --\x3e updateClassComponent --\x3e finishedComponent --\x3e completeUnitOfWork")]),t._v(" "),e("p",[e("strong",[t._v("completeUnitOfWork")])]),t._v(" "),e("p",[t._v("React在completeUnitOfWork函数中构建effect-list")]),t._v(" "),e("p",[t._v("是深度优先搜索算法一部分，获取workInProgress.alternate、父节点workInProgress.return和workInProgress.sibling，如果存在兄弟节点则返回。否则，返回父节点。")]),t._v(" "),e("h4",{attrs:{id:"commit阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commit阶段"}},[t._v("#")]),t._v(" Commit阶段")]),t._v(" "),e("p",[t._v("类似于"),e("code",[t._v("Git")]),t._v("的分支功能，从旧树里面fork一份，在新分支中进行"),e("strong",[t._v("添加、删除、更新")]),t._v("操作，然后再进行提交。")]),t._v(" "),e("p",[t._v("fiber大量使用链表。由于数组的大小是固定的，从数组的起点或者中间插入或移除项的成本很高。链表相对于传统的数组的优势在于添加或移除元素的时候不需要移动其他元素，"),e("strong",[t._v("需要添加和移除很多元素时，最好的选择是链表，而非数组。")]),t._v(" 链表在React的Fiber架构和Hooks实现发挥很大的作用。")]),t._v(" "),e("p",[t._v("commit阶段被分为几个子阶段。每个子阶段都单独进行effect list传递。所有的mutation effects都会在所有的layout effects之前执行。")]),t._v(" "),e("p",[t._v("被分为如下三个子阶段：")]),t._v(" "),e("ul",[e("li",[t._v("before mutation：React使用此阶段读取 host tree的state状态。 这是调用getSnapshotBeforeUpdate生命周期的地方。")]),t._v(" "),e("li",[t._v("mutation phase：在这个阶段，React 会改变host tree。 当该阶段执行结束时，work-in-progress树会变成current树，这必须发生在“mutation phase”阶段之后，以便于在componentWillUnmount生命周期内，仍然是之前的current树。但是，也要发生在“layout phase”阶段之前，以便于在componentDidMount / Update生命周期间，current树是已完成的work操作的。")]),t._v(" "),e("li",[t._v("layout phase：在这个阶段hfost tree已经被更改并调用 effects。componentDidMount / Update等生命周期在这个阶段被执行。")])]),t._v(" "),e("h3",{attrs:{id:"props与state的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#props与state的区别"}},[t._v("#")]),t._v(" props与state的区别")]),t._v(" "),e("p",[t._v("props和state都是普通的JavaScript对象，它们都是用来保存信息的，这些信息可以控制组件的渲染输出。不同点：")]),t._v(" "),e("p",[t._v("props是传递给组件的，而state是组件内被组件自己管理")]),t._v(" "),e("p",[t._v("props是不可修改的，所有react组件必须像纯函数一样保护它们的props不被修改，由于props是不可变的，因为如果一个组件中只有props，那么就视为pureComponent")]),t._v(" "),e("p",[t._v("state实在组件中创建的，一般在constructor中初始化state")]),t._v(" "),e("p",[t._v("state是多变的，可以修改的，每次setState都是异步更新的")]),t._v(" "),e("p",[t._v("在react中，this.props和this.state都代表已经被渲染了的值，即当前屏幕显示的值。而调用setstate通常是异步的，因此如果你想基于当前的state计算出新的值，那么应该传递一个新函数，而不是一个对象")]),t._v(" "),e("div",{staticClass:"language-react line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("increment() {\n  this.setState({count: this.state.count + 1})\n}\n\nincrement() {\n  this.setState({count: state.count + 1})\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("h3",{attrs:{id:"setstate原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setstate原理"}},[t._v("#")]),t._v(" setState原理")]),t._v(" "),e("p",[t._v("setState的执行过程：")]),t._v(" "),e("p",[t._v("1.将setState传入的"),e("code",[t._v("partialState")]),t._v("参数存储在当前组件实例的state暂存队列中。")]),t._v(" "),e("p",[t._v("2.判断当前React是否处于批量更新状态，如果是，将当前组件加入待更新的组件队列中。")]),t._v(" "),e("p",[t._v("3.如果未处于批量更新状态，将批量更新状态标识设置为true，用事务再次调用前一步方法，保证当前组件加入到了待更新组件队列中。")]),t._v(" "),e("p",[t._v("4.调用事务的"),e("code",[t._v("waper")]),t._v("方法，遍历待更新组件队列依次执行更新。")]),t._v(" "),e("p",[t._v("5.执行生命周期"),e("code",[t._v("componentWillReceiveProps")]),t._v("。")]),t._v(" "),e("p",[t._v("6.将组件的state暂存队列中的"),e("code",[t._v("state")]),t._v("进行合并，获得最终要更新的state对象，并将队列置为空。")]),t._v(" "),e("p",[t._v("7.执行生命周期"),e("code",[t._v("componentShouldUpdate")]),t._v("，根据返回值判断是否要继续更新。")]),t._v(" "),e("p",[t._v("8.执行生命周期"),e("code",[t._v("componentWillUpdate")]),t._v("。")]),t._v(" "),e("p",[t._v("9.执行真正的更新，"),e("code",[t._v("render")]),t._v("。")]),t._v(" "),e("p",[t._v("10.执行生命周期"),e("code",[t._v("componentDidUpdate")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"setstate的异步同步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setstate的异步同步"}},[t._v("#")]),t._v(" setState的异步同步")]),t._v(" "),e("p",[t._v("简单来说，只要setState在react的调度流程中，就是异步的，只要没有进入react的流程中，那就是同步的。不会进入react调度流程的事件：setTimeout，setInterval、直接在DOM上绑定原生事件等，都不会走React调度流程。在这些情况里面调用setState就是同步的，否则就是异步的。")]),t._v(" "),e("p",[e("code",[t._v("setState")]),t._v("只在合成事件和钩子函数中是“异步”的，在原生事件和"),e("code",[t._v("setTimeout")]),t._v(" 中都是同步的。")]),t._v(" "),e("p",[e("code",[t._v("setState")]),t._v(" 的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形成了所谓的“异步”，当然可以通过第二个参数 "),e("code",[t._v("setState(partialState, callback)")]),t._v(" 中的"),e("code",[t._v("callback")]),t._v("拿到更新后的结果。")]),t._v(" "),e("p",[t._v("在"),e("code",[t._v("react")]),t._v("的生命周期和合成事件中，"),e("code",[t._v("react")]),t._v("仍然处于他的更新机制中，这时"),e("code",[t._v("isBranchUpdate")]),t._v("为true。")]),t._v(" "),e("p",[t._v("按照上述过程，这时无论调用多少次"),e("code",[t._v("setState")]),t._v("，都会不会执行更新，而是将要更新的"),e("code",[t._v("state")]),t._v("存入"),e("code",[t._v("_pendingStateQueue")]),t._v("，将要更新的组件存入"),e("code",[t._v("dirtyComponent")]),t._v("。")]),t._v(" "),e("p",[t._v("当上一次更新机制执行完毕，以生命周期为例，所有组件，即最顶层组件"),e("code",[t._v("didmount")]),t._v("后会将"),e("code",[t._v("isBranchUpdate")]),t._v("设置为false。这时将执行之前累积的"),e("code",[t._v("setState")]),t._v("。")]),t._v(" "),e("p",[e("code",[t._v("setState")]),t._v(" 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次"),e("code",[t._v("setState")]),t._v("，"),e("code",[t._v("setState")]),t._v("的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时"),e("code",[t._v("setState")]),t._v("多个不同的值，在更新时会对其进行合并批量更新。")]),t._v(" "),e("p",[t._v("也就是说，一个方法里需要多次调用setState，setState了很多次，然后render（）只调用了一次")]),t._v(" "),e("p",[t._v("原因：")]),t._v(" "),e("p",[t._v("React会将多个this.setState产生的修改放在一个队列里，缓一缓，攒在一起，觉得差不多了再引发一次更新过程。")]),t._v(" "),e("p",[t._v("react为了提高整体的渲染性能，会将一次渲染周期中的state进行合并，在这个渲染周期中你对所有setState的所有调用都会被合并起来之后，再一次性的渲染，这样可以避免频繁的调用setState导致频繁的操作dom，提高渲染性能。具体的实现方面，可以简单的理解为react中存在一个状态变量isBatchingUpdates，当处于渲染周期开始时，这个变量会被设置成true，渲染周期结束时，会被设置成false，react会根据这个状态变量，当出在渲染周期中时，仅仅只是将当前的改变缓存起来，等到渲染周期结束时，再一次性的全部render。")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.调用setState不会立即更新\n2.所有组件使用的是同一套更新机制，当所有组件didmount后，父组件didmount，然后执行更新\n3.更新时会把每个组件的更新合并，每个组件只会触发一次更新的生命周期。\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("h4",{attrs:{id:"setstate更新数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setstate更新数组"}},[t._v("#")]),t._v(" setstate更新数组")]),t._v(" "),e("p",[t._v("对于数组和对象这种引用类型的数据，setstate只能改变引用地址，改变时只能用新的对象或者数组赋值，不能直接在原对象上改")]),t._v(" "),e("p",[t._v("可以使用原生js或者react官方推荐immutablejs更新数组")]),t._v(" "),e("p",[t._v("实例")]),t._v(" "),e("div",{staticClass:"language-react line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//错误例子\nvar list = [1];\nlist.push(2)\n//list对象已经变化，然而引用的值依然还是同一个引用\n\n//正确更新数组\nvar list = this.state.list;\nthis.setState({\n  list:list.concat('otherData')\n})\n\nthis.setState({\n  list:[...list,'otherData']\n})\n\n//正确更新对象\n//使用object.assign方法\nvar user = this.state.user;\nthis.setState({\n  user.Object.assign({},user,{age:18})\n})\n//使用对象拓展语法\nvar user = this.state.user;\nthis.setState({\n  user:{...user,age:18}\n})\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br")])]),e("p",[t._v("ImmutableJS更新数组")]),t._v(" "),e("h4",{attrs:{id:"连续调用setstate只有一次生效"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连续调用setstate只有一次生效"}},[t._v("#")]),t._v(" 连续调用setstate只有一次生效")]),t._v(" "),e("p",[t._v("实例1")]),t._v(" "),e("div",{staticClass:"language-react line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("componentDidMount() {\n    this.setState({ index: this.state.index + 1 }, () => {\n      console.log(this.state.index);\n    })\n    this.setState({ index: this.state.index + 1 }, () => {\n      console.log(this.state.index);\n    })\n}\n//输出\n1\n1\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[t._v("实例2")]),t._v(" "),e("div",{staticClass:"language-react line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("componentDidMount() {\n    this.setState((preState) => ({ index: preState.index + 1 }), () => {\n      console.log(this.state.index);\n    })\n    this.setState(preState => ({ index: preState.index + 1 }), () => {\n      console.log(this.state.index);\n    })\n}\n//输出\n2\n2\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[t._v("原因：")]),t._v(" "),e("ul",[e("li",[t._v("1.直接传递对象的"),e("code",[t._v("setstate")]),t._v("会被合并成一次")]),t._v(" "),e("li",[t._v("使用函数传递"),e("code",[t._v("state")]),t._v("不会被合并")])]),t._v(" "),e("h4",{attrs:{id:"setstate自动触发两次"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setstate自动触发两次"}},[t._v("#")]),t._v(" setstate自动触发两次")]),t._v(" "),e("p",[t._v("严格模式下，")]),t._v(" "),e("h4",{attrs:{id:"定时器中的setstate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定时器中的setstate"}},[t._v("#")]),t._v(" 定时器中的setstate")]),t._v(" "),e("p",[t._v("定时器中的 setState，每次都会引起新的 render，即使是同一个定时器中的多次 setState")]),t._v(" "),e("p",[t._v("因为定时器中的"),e("code",[t._v("setState")]),t._v("没走"),e("code",[t._v("react")]),t._v("的事物机制，执行时批量更新没被设置"),e("code",[t._v("true")]),t._v("，所以每次都直接 render 了。")]),t._v(" "),e("p",[t._v("在事件执行的时候，"),e("strong",[t._v("当前上下文")]),t._v("执行的是"),e("code",[t._v("setTimeout")]),t._v("函数，但当执行"),e("code",[t._v("setTimeout")]),t._v("函数的回调时，原来的上下文已经结束了，"),e("strong",[t._v("回调的上下文变成了 window")]),t._v("，所以依据的批量更新属性"),e("code",[t._v("isBatchingUpdates")]),t._v("没有被设置成"),e("code",[t._v("true")]),t._v("的过程，因此始终是"),e("code",[t._v("false")]),t._v("，因此"),e("code",[t._v("setState")]),t._v("就同步执行了。")]),t._v(" "),e("div",{staticClass:"language-typescript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-typescript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillMount")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" me "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        me"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            count"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" me"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        me"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            count"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" me"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n   "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidMount")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" me "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        me"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            count"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" me"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        me"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            count"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" me"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("onClickTime")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" me "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        me"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            count"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" me"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        me"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            count"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" me"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br")])]),e("p",[t._v("其实在回调函数中，setState 是不会触发批量更新机制的，无论是 promise，ajax，setTimeout 回调等等，同时设置多次 setState，每个 setState 都会单独执行并 render，因为上下文发生了变化。")]),t._v(" "),e("h4",{attrs:{id:"原生事件中的setstate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原生事件中的setstate"}},[t._v("#")]),t._v(" 原生事件中的setstate")]),t._v(" "),e("p",[t._v("在按钮原生事件中定义的"),e("code",[t._v("setState")]),t._v(",和定时器效果一样，每次"),e("code",[t._v("setState")]),t._v("都会引起新的"),e("code",[t._v("render")])]),t._v(" "),e("div",{staticClass:"language-react line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("componentDidMount() {\n       this.button.addEventListener('click', this.onClick.bind(this, '原生事件'), false);\n}\n\nonClick(info) {\n       console.log(info);\n       this.setState({\n           count: ++count\n       });\n       this.setState({\n           count: ++count\n       });\n   }\n\n   render() {\n       console.log(this.state.count);\n       return <div>\n           <input type=\"button\" ref={input => this.button = input} onClick={this.onClick.bind(this, 'React事件')} value=\"生成计时器\" />\n           <div>Count:{this.state.count}</div>\n       </div>\n   }\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br")])]),e("h4",{attrs:{id:"生命周期函数调用setstate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期函数调用setstate"}},[t._v("#")]),t._v(" 生命周期函数调用setstate")]),t._v(" "),e("p",[t._v("在componentDidMount()中，你 可以立即调用setState()。它将会触发一次额外的渲染，但是它将在浏览器刷新屏幕之前发生。这保证了在此情况下即使render()将会调用两次，用户也不会看到中间状态。谨慎使用这一模式，因为它常导致性能问题。在大多数情况下，你可以 在constructor()中使用赋值初始状态来代替。然而，有些情况下必须这样，比如像模态框和工具提示框。这时，你需要先测量这些DOM节点，才能渲染依赖尺寸或者位置的某些东西。")]),t._v(" "),e("p",[t._v("componentWillUpdate和componentDidUpdate这两个生命周期中不能调用"),e("code",[t._v("setState")]),t._v("。")]),t._v(" "),e("p",[t._v("在这两个生命周期里面调用"),e("code",[t._v("setState")]),t._v("会造成死循环，导致程序崩溃。")]),t._v(" "),e("p",[t._v("在调用"),e("code",[t._v("setState")]),t._v("时使用函数传递"),e("code",[t._v("state")]),t._v("值，在回调函数中获取最新更新后的"),e("code",[t._v("state")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"react-diff算法的机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-diff算法的机制"}},[t._v("#")]),t._v(" react diff算法的机制")]),t._v(" "),e("p",[t._v("diff算法的瓶颈")]),t._v(" "),e("p",[t._v("由于diff操作本身也会带来性能损耗，react文档中提到，即使在最前沿的算法中，将前后两棵树完全对比的算法的复杂程度为O(n3)，其中n是树中元素的数量")]),t._v(" "),e("p",[t._v("如果在react中使用了该算法，那么展示1000个元素所需要执行的计算量将在10亿范围的量级，这个开销实在太高。")]),t._v(" "),e("p",[t._v("为了降低算法的复杂度，react的diff预设了3个限制：")]),t._v(" "),e("p",[t._v("1.同级元素进行diff。如果一个DOM节点在前后两次更新中跨越了层级，那么React不会尝试复用")]),t._v(" "),e("p",[t._v("2.不同类型的元素会产生出不同的树，如果元素由div变为p，react会销毁div及其子孙节点，并新建p及其子孙节点")]),t._v(" "),e("p",[t._v("3.开发者可以通过prop key暗示哪些子元素在不同的渲染下能保持稳定")]),t._v(" "),e("p",[t._v("举个例子")]),t._v(" "),e("div",{staticClass:"language-react line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//更新前\n<div>\n   <p key="ka">ka</p>\n   <h3 key="song">song</h3>\n</div>\n//更新后\n<div>\n   <h3 key="song">song</h3>\n   <p key="ka">ka</p>\n</div>\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br")])]),e("p",[t._v("如果没有key，react会认为div的第一个子节点由p变为h3，第二个子节点由h3变为p，这符合限制2的设定，因此会销毁并重建")]),t._v(" "),e("p",[t._v('当用key指明了节点的前后对应关系后，react知道key="ka"的p在更新之后还存在，因此节点可以复用，只需要交换一下顺序即可')]),t._v(" "),e("h3",{attrs:{id:"react渲染机制-work-loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react渲染机制-work-loop"}},[t._v("#")]),t._v(" React渲染机制(work loop)")]),t._v(" "),e("p",[t._v("React 16 之前的组件渲染方式是递归渲染：渲染父节点 -> 渲染子节点")]),t._v(" "),e("p",[t._v("递归渲染看起来十分简单，但是如果想在子节点的渲染过程中执行优先级更高的操作，只能保留调用栈中子节点的渲染及子节点之前节点的渲染，这样是很复杂的，这种调和/渲染也叫做 Stack Reconciler。")]),t._v(" "),e("p",[t._v("Fiber 使用链表的结构去渲染节点，每一个节点都称之为 Fiber Node，每个节点会有三个属性：")]),t._v(" "),e("ul",[e("li",[t._v("child 指向第一个子节点")]),t._v(" "),e("li",[t._v("sibling 指向兄弟节点")]),t._v(" "),e("li",[t._v("return 指向父节点")])]),t._v(" "),e("p",[t._v("Fiber 的渲染方式：从父节点开始，向下依次遍历子节点，深度优先渲染完子节点后，再回到其父节点去检查是否有兄弟节点，如果有兄弟节点，则从该兄弟节点开始继续深度优先的渲染，直到回退到根节点结束。")]),t._v(" "),e("p",[t._v("综上，可以分为 Scheduler、Reconciliation、Commit 这三个阶段")]),t._v(" "),e("p",[t._v("Scheduer 流程主要是创建更新，创建更新的方式：")]),t._v(" "),e("ul",[e("li",[t._v("ReactDOM.render")]),t._v(" "),e("li",[t._v("setState")])]),t._v(" "),e("p",[t._v("可以发现 React 将首次渲染和更新渲染统一了起来。")]),t._v(" "),e("h4",{attrs:{id:"什么时候重新渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么时候重新渲染"}},[t._v("#")]),t._v(" 什么时候重新渲染")]),t._v(" "),e("p",[t._v("1.组件的state发生变化，如props变化或者通过setstate变化")]),t._v(" "),e("p",[t._v("2.shouldComponentUpdate")]),t._v(" "),e("p",[t._v("shouldComponentUpdate方法默认总是返回true，可以重写shouldComponentUpdate方法来看它是否返回true")]),t._v(" "),e("h3",{attrs:{id:"effect-hook机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#effect-hook机制"}},[t._v("#")]),t._v(" Effect Hook机制")]),t._v(" "),e("p",[t._v("effect hook与其他hook的行为有一些区别")]),t._v(" "),e("p",[t._v("effect hook的属性：")]),t._v(" "),e("p",[t._v("​\t\t在渲染时被创建，在浏览器执行绘制后运行；")]),t._v(" "),e("p",[t._v("​\t\t如果给出销毁指令，会在下一次绘制前被销毁；")]),t._v(" "),e("p",[t._v("​\t\t会按照定义的顺序被运行")]),t._v(" "),e("p",[t._v("hook effect 将会被保存在 fiber 一个称为 "),e("code",[t._v("updateQueue")]),t._v(" 的属性上，每个 effect 节点都有如下的结构.")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("tag")]),t._v(" —— 一个二进制数字，它控制了 effect 节点的行为（后文我将详细说明）。")]),t._v(" "),e("li",[e("code",[t._v("create")]),t._v(" —— 绘制"),e("strong",[t._v("之后")]),t._v("运行的回调函数。")]),t._v(" "),e("li",[e("code",[t._v("destroy")]),t._v(" —— 它是 "),e("code",[t._v("create()")]),t._v(" 返回的回调函数，将会在初始渲染"),e("strong",[t._v("前")]),t._v("运行。")]),t._v(" "),e("li",[e("code",[t._v("inputs")]),t._v(" —— 一个集合，该集合中的值将会决定一个 effect 节点是否应该被销毁或者重新创建。")]),t._v(" "),e("li",[e("code",[t._v("next")]),t._v(" —— 它指向下一个定义在函数组件中的 effect 节点。")])]),t._v(" "),e("p",[t._v("除了 "),e("code",[t._v("tag")]),t._v(" 属性，其他的属性都很简明易懂。如果你对 hook 很了解，你应该知道，React 提供了一些特殊的 effect hook：比如 "),e("code",[t._v("useMutationEffect()")]),t._v(" 和 "),e("code",[t._v("useLayoutEffect()")]),t._v("。这两个 effect hook 内部都使用了 "),e("code",[t._v("useEffect()")]),t._v("，实际上这就意味着它们创建了 effect hook，但是却使用了不同的 tag 属性值。")]),t._v(" "),e("p",[t._v("Default effect —— "),e("code",[t._v("UnmountPassive | MountPassive")]),t._v(".")]),t._v(" "),e("p",[t._v("Mutation effect —— "),e("code",[t._v("UnmountSnapshot | MountMutation")]),t._v(".")]),t._v(" "),e("p",[t._v("Layout effect —— "),e("code",[t._v("UnmountMutation | MountLayout")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"state、reducer-hook机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#state、reducer-hook机制"}},[t._v("#")]),t._v(" State、Reducer Hook机制")]),t._v(" "),e("p",[e("code",[t._v("useReducer")]),t._v(" 和 "),e("code",[t._v("useState")]),t._v(" 本质上是一个原理，虽然我们平时会使用 "),e("code",[t._v("useState")]),t._v(" 更多，但事实上 "),e("code",[t._v("useState")]),t._v(" 是 "),e("code",[t._v("useReducer")]),t._v(" 的封装；")]),t._v(" "),e("h3",{attrs:{id:"hook系统原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hook系统原理"}},[t._v("#")]),t._v(" Hook系统原理")]),t._v(" "),e("p",[t._v("Dispatcher")]),t._v(" "),e("p",[t._v("dispatcher 是一个包含了 hook 函数的共享对象。基于 ReactDOM 的渲染状态，它将会被动态的分配或者清理，并且它能够确保用户不可在 React 组件之外获取 hook")]),t._v(" "),e("p",[t._v("在切换到正确的 Dispatcher 以渲染根组件之前，我们通过一个名为 "),e("code",[t._v("enableHooks")]),t._v(" 的标志来启用/禁用 hook。在技术上来说，这就意味着我们可以在运行时开启或关闭 hook。React 16.6.X 版本中也有对此的实验性实现，但它实际上处于禁用状态")]),t._v(" "),e("p",[t._v("当我们完成渲染工作后，我们将 dispatcher 置空并禁止用户在 ReactDOM 的渲染周期之外使用 hook。这个机制能够保证用户不会做什么蠢事")]),t._v(" "),e("p",[t._v("dispatcher 在每次 hook 的调用中都会被函数 "),e("code",[t._v("resolveDispatcher()")]),t._v(" 解析。正如我之前所说，在 React 的渲染周期之外，这些都无意义了，React 将会打印出警告信息："),e("strong",[t._v("“hook 只能在函数组件内部调用”")])]),t._v(" "),e("p",[t._v("Hook队列")]),t._v(" "),e("p",[t._v("在 React 后台，hook 被表示为以调用顺序连接起来的节点。这样做原因是 hook 并不能简单的被创建然后丢弃。它们有一套特有的机制，也正是这些机制让它们成为 hook。一个 hook 会有数个属性，在继续学习之前，我希望你能牢记于心：")]),t._v(" "),e("ul",[e("li",[t._v("它的初始状态会在初次渲染的时候被创建。")]),t._v(" "),e("li",[t._v("它的状态可以在运行时更新。")]),t._v(" "),e("li",[t._v("React 可以在后续渲染中记住 hook 的状态。")]),t._v(" "),e("li",[t._v("React 能根据调用顺序提供给你正确的状态。")]),t._v(" "),e("li",[t._v("React 知道当前 hook 属于哪个 fiber。")])]),t._v(" "),e("p",[t._v("hook 还有一些附加的属性，但是弄明白 hook 是如何运行的关键在于它的 "),e("code",[t._v("memoizedState")]),t._v(" 和 "),e("code",[t._v("next")]),t._v(" 属性。其他的属性会被 "),e("code",[t._v("useReducer()")]),t._v(" hook 使用，可以缓存发送过的 action 和一些基本的状态，这样在某些情况下，reduction 过程还可以作为后备被重复一次：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("baseState")]),t._v(" —— 传递给 reducer 的状态对象。")]),t._v(" "),e("li",[e("code",[t._v("baseUpdate")]),t._v(" —— 最近一次创建 "),e("code",[t._v("baseState")]),t._v(" 的已发送的 action。")]),t._v(" "),e("li",[e("code",[t._v("queue")]),t._v(" —— 已发送 action 组成的队列，等待传入 reducer。")])]),t._v(" "),e("h3",{attrs:{id:"redux原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux原理"}},[t._v("#")]),t._v(" redux原理")]),t._v(" "),e("p",[t._v("Redux是将整个应用状态存储到一个地方上称为"),e("strong",[t._v("store")]),t._v(",里面保存着一个状态树"),e("strong",[t._v("store tree")]),t._v(",组件可以派发(dispatch)行为(action)给store,而不是直接通知其他组件，组件内部通过订阅"),e("strong",[t._v("store")]),t._v("中的状态"),e("strong",[t._v("state")]),t._v("来刷新自己的视图。")]),t._v(" "),e("p",[t._v("redux三大原则")]),t._v(" "),e("ul",[e("li",[t._v("1 唯一数据源")]),t._v(" "),e("li",[t._v("2 保持只读状态")]),t._v(" "),e("li",[t._v("3 数据改变只能通过纯函数来执行")])]),t._v(" "),e("p",[e("code",[t._v("react-redux")]),t._v("的核心机制是通知订阅模式，源码中有一个"),e("code",[t._v("Subscription")]),t._v("类，它的作用主要是订阅父级的更新和通知子级的更新，也就是它既可以订阅别人，别人也可以订阅它，同时可以通知订阅它的"),e("code",[t._v("Subscription")])]),t._v(" "),e("p",[t._v("最外层的"),e("code",[t._v("Provider")]),t._v("组件的"),e("code",[t._v("Context")]),t._v("里包含了的"),e("code",[t._v("store")]),t._v("（也就是我们传入的）和生成的"),e("code",[t._v("Subscription")]),t._v("实例，它的"),e("code",[t._v("Subscription")]),t._v("实例订阅的则是"),e("code",[t._v("redux")]),t._v(" 的"),e("code",[t._v("subscrib()")])]),t._v(" "),e("p",[t._v("当我们使用了"),e("code",[t._v("connect()")]),t._v("时，它会生成一个新组件"),e("code",[t._v("<Component1/>")]),t._v("，"),e("code",[t._v("<Component1/>")]),t._v("里会生成一个"),e("code",[t._v("Subscription")]),t._v("实例，它会订阅父级（这时是"),e("code",[t._v("Provider")]),t._v("）的"),e("code",[t._v("Subscription")]),t._v("实例，同时将自己的"),e("code",[t._v("Subscription")]),t._v("覆盖进"),e("code",[t._v("Context")]),t._v("，再包装我们传入的组件")]),t._v(" "),e("p",[t._v("如果在"),e("code",[t._v("<Component1/>")]),t._v("里的子组件又有"),e("code",[t._v("connect()")]),t._v("，那么生成的"),e("code",[t._v("<Component2/>")]),t._v("组件的"),e("code",[t._v("Subscription")]),t._v("实例会订阅父级"),e("code",[t._v("<Component1/>")]),t._v("的"),e("code",[t._v("Subscription")]),t._v("实例，同时再将自己的"),e("code",[t._v("Subscription")]),t._v("覆盖进"),e("code",[t._v("Context")])]),t._v(" "),e("p",[t._v("在组件挂载完成后，如果"),e("code",[t._v("store")]),t._v("有更新，"),e("code",[t._v("Provider")]),t._v("会通知下一级组件的"),e("code",[t._v("Subscription")]),t._v("，下一级组件又会通知自己的下一级组件")]),t._v(" "),e("p",[t._v("在订阅的时候，会将更新自己组件的方法通过回调"),e("code",[t._v("onStateChange()")]),t._v("传入父级的"),e("code",[t._v("Subscription")])]),t._v(" "),e("p",[t._v("一旦父级接收到通知，就会循环调用订阅自己的组件的"),e("code",[t._v("onStateChange")]),t._v("来更新它们")]),t._v(" "),e("p",[t._v("更新的原理就是使用我们传入的"),e("code",[t._v("mapStateToProps")]),t._v("和"),e("code",[t._v("mapDispatchToProps")]),t._v("，结合内置的"),e("code",[t._v("selectorFactor()")]),t._v("来对比"),e("code",[t._v("state")]),t._v("和"),e("code",[t._v("props")]),t._v("，一旦有改变就强制更新自己，所以我们传入的"),e("code",[t._v("WrappedComponent")]),t._v("也被强制更新了")]),t._v(" "),e("h3",{attrs:{id:"redux-reducer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux-reducer"}},[t._v("#")]),t._v(" redux-reducer")]),t._v(" "),e("p",[t._v("reducer为什么要是纯函数？纯函数是什么？")]),t._v(" "),e("p",[t._v("纯函数：对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态。")]),t._v(" "),e("p",[t._v("原因：Redux只通过比较新旧两个对象的存储位置来比较新旧两个对象是否相同（"),e("strong",[t._v("浅比较")]),t._v("）。如果你在reducer内部直接修改旧的state对象的属性值，那么新的state和旧的state将都指向同一个对象。因此Redux认为没有任何改变，返回的state将为旧的state。两个state相同的话，页面就不会重新渲染了。")]),t._v(" "),e("h3",{attrs:{id:"redux中间件机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux中间件机制"}},[t._v("#")]),t._v(" redux中间件机制")]),t._v(" "),e("p",[e("code",[t._v("redux")]),t._v("源码只有"),e("strong",[t._v("同步")]),t._v("操作，也就是当"),e("code",[t._v("dispatch action")]),t._v(" 时，"),e("code",[t._v("state")]),t._v("会被立即更新。若需要引入异步数据流，"),e("a",{attrs:{href:"https://cn.redux.js.org/docs/advanced/AsyncFlow.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redux官方"),e("OutboundLink")],1),t._v("则建议使用中间件来增强"),e("code",[t._v("createStore")]),t._v("的能力，它对外暴露了"),e("code",[t._v("applyMiddleware")]),t._v("函数，接受任意个中间件作为入参，返回作为"),e("code",[t._v("createStore")]),t._v("的入参的值")]),t._v(" "),e("div",{staticClass:"language-react line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 引入 redux\nimport { createStore } from 'redux'\n// 创建 store\nconst store = createStore(\n    reducer,\n    initial_state,\n    //引入中间件\n    applyMiddleware(middleware1, middleware2, ...)\n);\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])]),e("p",[t._v("以 "),e("code",[t._v("middlewareAPI")]),t._v(" 作为中间件的入参，逐个调用传入的中间件，获取一个由“内层函数”组成的数组 "),e("code",[t._v("chain")])]),t._v(" "),e("p",[t._v("调用 "),e("code",[t._v("compose")]),t._v(" 函数，将 "),e("code",[t._v("chain")]),t._v(" 中的 “内层函数” 逐个组合起来，并调用最终组合出来的函数，传入 "),e("code",[t._v("dispatch")]),t._v(" 作为入参")]),t._v(" "),e("p",[t._v("返回一个新的 "),e("code",[t._v("store")]),t._v(" 对象，这个 "),e("code",[t._v("store")]),t._v(" 对象的 "),e("code",[t._v("dispatch")]),t._v(" 已经被改写过了")]),t._v(" "),e("p",[e("code",[t._v("reduce")]),t._v(" 会将数组中的每个元素执行指定的逻辑，并将结果汇总为单个返回值，假设有这样一个 "),e("code",[t._v("compose")]),t._v(" 调用")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("compose")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("f2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("f3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("f4"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//会被解析为")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("f1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("f2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("f3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("f4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("即"),e("code",[t._v("f1,f2,f3,f4")]),t._v("这4个中间件的内层逻辑会被组合到一个函数中去，当这个函数被调用时，中间件会依次被调用")]),t._v(" "),e("p",[t._v("中间件的执行机制")]),t._v(" "),e("p",[t._v("我们知道 "),e("strong",[t._v("任何的中间件都可以用自己的方式解析"),e("code",[t._v("dispatch")]),t._v("的内容，并继续传递"),e("code",[t._v("actions")]),t._v(" 给下一个中间件")]),t._v("。但注意：当最后一个中间件开始 "),e("code",[t._v("dispatch action")]),t._v(" 时，"),e("code",[t._v("action")]),t._v(" 必须是一个普通对象，因为这是同步式的 "),e("code",[t._v("Redux")]),t._v(" 数据流 开始的地方。")]),t._v(" "),e("p",[e("code",[t._v("redux-thunk")]),t._v("源码层面可知道，它主要做的一件事就是 拦截到"),e("code",[t._v("action")]),t._v("后，检查它是否是一个函数")]),t._v(" "),e("ul",[e("li",[t._v("若是函数，则执行它并返回执行的结果")]),t._v(" "),e("li",[t._v("若不是函数，则直接调用"),e("code",[t._v("next")]),t._v("，工作流继续往下走")])]),t._v(" "),e("p",[t._v("中间件的工作模式：")]),t._v(" "),e("ul",[e("li",[t._v("中间件的执行时机：在"),e("code",[t._v("action")]),t._v("被分发之后、"),e("code",[t._v("reducer")]),t._v("触发之前")]),t._v(" "),e("li",[t._v("中间件的执行前提："),e("code",[t._v("applyMiddleware")]),t._v("函数对"),e("code",[t._v("dispatch")]),t._v("函数进行改写，使得"),e("code",[t._v("dispatch")]),t._v("触发"),e("code",[t._v("reducer")]),t._v("之前，执行"),e("code",[t._v("Redux")]),t._v("中间件的链式调用。")])]),t._v(" "),e("h3",{attrs:{id:"redux-compose实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux-compose实现"}},[t._v("#")]),t._v(" Redux compose实现")]),t._v(" "),e("p",[t._v("compose就是执行一系列的任务（函数），比如有以下任务队列")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tasks "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("step1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" step2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" step3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" step4"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("每一个step都是一个步骤，按照步骤一步一步的执行到结尾，这就是一个"),e("strong",[t._v("compose")])]),t._v(" "),e("p",[t._v("compose在函数式编程中是一个很重要的工具函数，在这里实现的compose有三点说明")]),t._v(" "),e("ul",[e("li",[t._v("第一个函数是多元的（接受多个参数），后面的函数都是单元的（接受一个参数）")]),t._v(" "),e("li",[t._v("执行顺序的自右向左的")]),t._v(" "),e("li",[t._v("所有函数的执行都是同步的")])]),t._v(" "),e("p",[t._v("用代码解释")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("componse"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'redux'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("compose")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("add1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("add2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("add3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'y'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出结果 '12xy'")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("h3",{attrs:{id:"利用context-api实现redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#利用context-api实现redux"}},[t._v("#")]),t._v(" 利用context api实现redux")]),t._v(" "),e("p",[t._v("https://segmentfault.com/a/1190000023142285")]),t._v(" "),e("h3",{attrs:{id:"react-router原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-router原理"}},[t._v("#")]),t._v(" React-router原理")]),t._v(" "),e("p",[e("code",[t._v("React-Router")]),t._v("中的3个核心角色：")]),t._v(" "),e("p",[t._v("导航：负责触发路径的改变，比如 "),e("code",[t._v("Link")]),t._v("、"),e("code",[t._v("NavLink")]),t._v(" 和 "),e("code",[t._v("Redirect")]),t._v("（以"),e("code",[t._v("Link")]),t._v("为代表）")]),t._v(" "),e("p",[t._v("路由：负责定义路径与组件之间的映射关系，比如"),e("code",[t._v("Route")]),t._v("和"),e("code",[t._v("Switch")]),t._v("（以"),e("code",[t._v("Route")]),t._v("为代表）")]),t._v(" "),e("p",[t._v("路由器：为新的路径匹配它对应的逻辑，比如"),e("code",[t._v("BrowserRouter")]),t._v("和"),e("code",[t._v("HashRouter")]),t._v("，根据"),e("code",[t._v("Route")]),t._v("定义出来的映射关系")]),t._v(" "),e("p",[t._v("负责感知路由的变化并作出反应的路由器，是整个路由系统中最为重要的一环。在"),e("code",[t._v("React-Router")]),t._v("中支持两种路由规则："),e("code",[t._v("HashRouter")]),t._v("和"),e("code",[t._v("BrowserRouter")]),t._v("分别对应了"),e("code",[t._v("hash")]),t._v("和"),e("code",[t._v("history")]),t._v("两种背后模式，")]),t._v(" "),e("p",[t._v("在react-router源码中，HashRouter 调用 "),e("code",[t._v("createHashHistory")]),t._v("，History调用"),e("code",[t._v("createBrowserHistory")])]),t._v(" "),e("p",[e("code",[t._v("createHashHistory")]),t._v("通过使用hash tag(#) 来处理形如"),e("code",[t._v("https://www.huamu.com/#index")]),t._v("的 URL，即通过 URL 的 hash 属性来控制路由跳转")]),t._v(" "),e("p",[e("code",[t._v("createBrowserHistory")]),t._v(" 它将在浏览器中使用 HTML 5 的 history API 来处理形如 "),e("code",[t._v("https://www.huamu.com/index")]),t._v("的 URL，即通过 HTML 5的 history API 来控制路由跳转")]),t._v(" "),e("h3",{attrs:{id:"手写自定义hook-实现切换状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手写自定义hook-实现切换状态"}},[t._v("#")]),t._v(" 手写自定义hook，实现切换状态")]),t._v(" "),e("div",{staticClass:"language-react line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function SomeComponent() {\n  const [state, toggleState] = useToggle(false);\n  return <div>\n    {state ? 'true' : 'false'}\n    <button onClick={toggleState}></button>\n  </div>\n}\n\n// 请实现 useToggle\nfunction useToggle(initialValue) {\n    const [value, setValue] = useState(initialValue);\n    const toggle = () => {setValue(!value)};\n    return [value, toggle];\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br")])]),e("h2",{attrs:{id:"react优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react优化"}},[t._v("#")]),t._v(" React优化")]),t._v(" "),e("p",[t._v("https://juejin.cn/post/6935584878071119885")]),t._v(" "),e("h3",{attrs:{id:"懒渲染react-visibility-observer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#懒渲染react-visibility-observer"}},[t._v("#")]),t._v(" 懒渲染react-visibility-observer")]),t._v(" "),e("p",[t._v("当组件进入可视区域才渲染组件，如modal/drawer这种需要用户操作才会出现的组件。")]),t._v(" "),e("p",[t._v("使用react-visibility-observer监听")]),t._v(" "),e("div",{staticClass:"language-react line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import VisibilityObserver,{useVisibilityObserver,} from "react-visibility-observer"\n\nconst VisibilityObserverChildren = ({callback,children}) =>{\n  const {isVisible} = useVisibilityObserver()\n  useEffect(()=>{\n    callback(isVisible)\n  },[callback,isVisible])\n  \n  return <>{children}</>\n}\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);