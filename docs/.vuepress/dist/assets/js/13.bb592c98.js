(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{373:function(t,s,a){"use strict";a.r(s);var n=a(44),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("第五篇注重ES6")]),t._v(" "),a("h2",{attrs:{id:"es6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6"}},[t._v("#")]),t._v(" ES6")]),t._v(" "),a("h3",{attrs:{id:"es6简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6简介"}},[t._v("#")]),t._v(" ES6简介")]),t._v(" "),a("p",[t._v("ES6与JavaScript的关系")]),t._v(" "),a("p",[t._v("JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。")]),t._v(" "),a("p",[t._v("因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript 和 ActionScript）。日常场合，这两个词是可以互换的。")]),t._v(" "),a("p",[t._v("ES6与ES5")]),t._v(" "),a("p",[t._v("EMCA的标准委员会决定，标准在每年的 6 月份正式发布一次，作为当年的正式版本。接下来的时间，就在这个版本的基础上做改动，直到下一年的 6 月份，草案就自然变成了新一年的版本。这样一来，就不需要以前的版本号了，只要用年份标记就可以了。")]),t._v(" "),a("p",[t._v("ES6 的第一个版本，就这样在 2015 年 6 月发布了，正式名称就是《ECMAScript 2015 标准》（简称 ES2015）。2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小（只新增了数组实例的"),a("code",[t._v("includes")]),t._v("方法和指数运算符），基本上是同一个标准。2017 年 6 月发布 ES2017 标准。")]),t._v(" "),a("p",[t._v("ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。")]),t._v(" "),a("p",[a("strong",[t._v("考虑到未来所有的代码，其实都是运行在模块之中，ES6 实际上把整个语言升级到了严格模式。")])]),t._v(" "),a("h3",{attrs:{id:"proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[t._v("#")]),t._v(" proxy")]),t._v(" "),a("p",[t._v("Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。")]),t._v(" "),a("p",[t._v("Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。")]),t._v(" "),a("p",[t._v("方法：")]),t._v(" "),a("p",[a("code",[t._v("get")]),t._v("方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。")]),t._v(" "),a("p",[a("code",[t._v("set")]),t._v("方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身，其中最后一个参数可选。")]),t._v(" "),a("p",[a("code",[t._v("has")]),t._v("方法用来拦截"),a("code",[t._v("HasProperty")]),t._v("操作，即判断对象是否具有某个属性时，这个方法会生效。典型的操作就是"),a("code",[t._v("in")]),t._v("运算符。"),a("code",[t._v("has")]),t._v("方法可以接受两个参数，分别是目标对象、需查询的属性名。")]),t._v(" "),a("p",[a("code",[t._v("deleteProperty")]),t._v("方法用于拦截"),a("code",[t._v("delete")]),t._v("操作，如果这个方法抛出错误或者返回"),a("code",[t._v("false")]),t._v("，当前属性就无法被"),a("code",[t._v("delete")]),t._v("命令删除。")]),t._v(" "),a("p",[a("code",[t._v("defineProperty()")]),t._v("方法拦截了"),a("code",[t._v("Object.defineProperty()")]),t._v("操作。")]),t._v(" "),a("p",[a("code",[t._v("getOwnPropertyDescriptor()")]),t._v("方法拦截"),a("code",[t._v("Object.getOwnPropertyDescriptor()")]),t._v("，返回一个属性描述对象或者"),a("code",[t._v("undefined")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("getPrototypeOf()")]),t._v("方法主要用来拦截获取对象原型。具体来说，拦截下面这些操作。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Object.prototype.__proto__")])]),t._v(" "),a("li",[a("code",[t._v("Object.prototype.isPrototypeOf()")])]),t._v(" "),a("li",[a("code",[t._v("Object.getPrototypeOf()")])]),t._v(" "),a("li",[a("code",[t._v("Reflect.getPrototypeOf()")])]),t._v(" "),a("li",[a("code",[t._v("instanceof")])])]),t._v(" "),a("p",[a("code",[t._v("isExtensible()")]),t._v("方法拦截"),a("code",[t._v("Object.isExtensible()")]),t._v("操作。")]),t._v(" "),a("p",[a("code",[t._v("ownKeys()")]),t._v("方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Object.getOwnPropertyNames()")])]),t._v(" "),a("li",[a("code",[t._v("Object.getOwnPropertySymbols()")])]),t._v(" "),a("li",[a("code",[t._v("Object.keys()")])]),t._v(" "),a("li",[a("code",[t._v("for...in")]),t._v("循环")])]),t._v(" "),a("p",[a("code",[t._v("preventExtensions()")]),t._v("方法拦截"),a("code",[t._v("Object.preventExtensions()")]),t._v("。该方法必须返回一个布尔值，否则会被自动转为布尔值。")]),t._v(" "),a("p",[a("code",[t._v("setPrototypeOf()")]),t._v("方法主要用来拦截"),a("code",[t._v("Object.setPrototypeOf()")]),t._v("方法。")]),t._v(" "),a("p",[a("code",[t._v("Proxy.revocable()")]),t._v("方法返回一个可取消的 Proxy 实例。")]),t._v(" "),a("h3",{attrs:{id:"generator函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator函数"}},[t._v("#")]),t._v(" Generator函数")]),t._v(" "),a("p",[t._v("Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。")]),t._v(" "),a("p",[t._v("执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。")]),t._v(" "),a("p",[t._v("Generator 函数是一个普通函数，形式上有两个特征。一是，"),a("code",[t._v("function")]),t._v("关键字与函数名之间有一个星号；二是，函数体内部使用"),a("code",[t._v("yield")]),t._v("表达式，定义不同的内部状态（"),a("code",[t._v("yield")]),t._v("在英语里的意思就是“产出”）。")]),t._v(" "),a("p",[t._v("Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是遍历器对象（Iterator Object）")]),t._v(" "),a("p",[t._v("下一步，必须调用遍历器对象的"),a("code",[t._v("next")]),t._v("方法，使得指针移向下一个状态。也就是说，每次调用"),a("code",[t._v("next")]),t._v("方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个"),a("code",[t._v("yield")]),t._v("表达式（或"),a("code",[t._v("return")]),t._v("语句）为止。换言之，Generator 函数是分段执行的，"),a("code",[t._v("yield")]),t._v("表达式是暂停执行的标记，而"),a("code",[t._v("next")]),t._v("方法可以恢复执行。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("helloWorldGenerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ending'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("helloWorldGenerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nhw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value: 'hello', done: false }")]),t._v("\n\nhw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value: 'world', done: false }")]),t._v("\n\nhw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value: 'ending', done: true }")]),t._v("\n\nhw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value: undefined, done: true }")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("p",[a("code",[t._v("yield")]),t._v("表达式与"),a("code",[t._v("return")]),t._v("语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到"),a("code",[t._v("yield")]),t._v("，函数暂停执行，下一次再从该位置继续向后执行，而"),a("code",[t._v("return")]),t._v("语句不具备位置记忆的功能。一个函数里面，只能执行一次（或者说一个）"),a("code",[t._v("return")]),t._v("语句，但是可以执行多次（或者说多个）"),a("code",[t._v("yield")]),t._v("表达式。正常函数只能返回一个值，因为只能执行一次"),a("code",[t._v("return")]),t._v("；Generator 函数可以返回一系列的值，因为可以有任意多个"),a("code",[t._v("yield")]),t._v("。从另一个角度看，也可以说 Generator 生成了一系列的值，这也就是它的名称的来历")]),t._v(" "),a("p",[a("strong",[t._v("next函数传参")])]),t._v(" "),a("p",[a("code",[t._v("yield")]),t._v("表达式本身没有返回值，或者说总是返回"),a("code",[t._v("undefined")]),t._v("。"),a("code",[t._v("next")]),t._v("方法可以带一个参数，该参数就会被当作上一个"),a("code",[t._v("yield")]),t._v("表达式的返回值。")]),t._v(" "),a("p",[t._v("next函数传参这个功能有很重要的语法意义。Generator 函数从暂停状态到恢复运行，它的上下文状态（context）是不变的。通过"),a("code",[t._v("next")]),t._v("方法的参数，就有办法在 Generator 函数开始运行之后，继续向函数体内部注入值。也就是说，可以在 Generator 函数运行的不同阶段，从外部向内部注入不同的值，从而调整函数行为。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" z "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object{value:6, done:false}")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object{value:NaN, done:false}")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object{value:NaN, done:true}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value:6, done:false }")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value:8, done:false }")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value:42, done:true }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第二次运行next方法的时候不带参数，导致 y 的值等于2 * undefined（即NaN），除以 3 以后还是NaN，因此返回对象的value属性也等于NaN。第三次运行Next方法的时候不带参数，所以z等于undefined，返回对象的value属性等于5 + NaN + undefined，即NaN。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果向next方法提供参数，返回结果就完全不一样了。上面代码第一次调用b的next方法时，返回x+1的值6；第二次调用next方法，将上一次yield表达式的值设为12，因此y等于24，返回y / 3的值8；第三次调用next方法，将上一次yield表达式的值设为13，因此z等于13，这时x等于5，y等于24，所以return语句的值等于42")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("p",[t._v("由于"),a("code",[t._v("next")]),t._v("方法的参数表示上一个"),a("code",[t._v("yield")]),t._v("表达式的返回值，所以在第一次使用"),a("code",[t._v("next")]),t._v("方法时，传递参数是无效的。V8 引擎直接忽略第一次使用"),a("code",[t._v("next")]),t._v("方法时的参数，只有从第二次使用"),a("code",[t._v("next")]),t._v("方法开始，参数才是有效的。从语义上讲，第一个"),a("code",[t._v("next")]),t._v("方法用来启动遍历器对象，所以不用带有参数。")]),t._v(" "),a("p",[t._v("如果想要第一次调用"),a("code",[t._v("next")]),t._v("方法时，就能够输入值，可以在 Generator 函数外面再包一层。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wrapper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("generatorFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("returnfunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" generatorObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generatorFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    generatorObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" generatorObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" wrapped "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wrapper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("First input: ")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DONE'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wrapped")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// First input: hello!")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("为了防止手动遍历generator函数，js提供co函数库操作generator函数")]),t._v(" "),a("p",[t._v("generator最大的特点是交出函数的执行权，即暂停执行，异步操作需要暂停的地方使用yield注明，此处引入协程的概念。")]),t._v(" "),a("p",[t._v("进程有变量隔离，自动切换运行上下文")]),t._v(" "),a("p",[t._v("线程没有变量隔离，自动切换运行上下文")]),t._v(" "),a("p",[t._v("协程不进行变量隔离，不自动切换运行上下文")]),t._v(" "),a("h3",{attrs:{id:"async函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async函数"}},[t._v("#")]),t._v(" async函数")]),t._v(" "),a("p",[t._v("async可以理解为generator+promise的语法糖，async可以看作是多个异步操作包装成的一个promise对象，而await命令是内部.then的语法糖")]),t._v(" "),a("p",[t._v("async对generator的改进体现在以下四点：")]),t._v(" "),a("p",[t._v("1.内置执行器。generator需要co模块或者调用next方法才能执行，而async函数自带执行器可以向普通函数一样。")]),t._v(" "),a("p",[t._v("2.更好的语义。比起generator的yield和*，async和await更直接")]),t._v(" "),a("p",[t._v("3.更广的适用性。yield命令返回的是promise对象或者thunk函数，而await后面可以是promise对象或者任意原始类型（数值、字符串、布尔值等），方便操作。")]),t._v(" "),a("p",[t._v("4.返回值是promise。generator的返回值是iterator对象，而async返回的是promise对象，可以用.then方法指定下一步的操作。")]),t._v(" "),a("p",[t._v("asnyc函数会返回一个promise对象，")]),t._v(" "),a("p",[t._v("错误处理")]),t._v(" "),a("p",[t._v("await后面跟promise对象时，可能会reject，此时将await写在try里")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUsers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://github.com/users'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirstUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" users "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUsers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default user'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h4",{attrs:{id:"async与promise的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async与promise的区别"}},[t._v("#")]),t._v(" async与promise的区别")]),t._v(" "),a("p",[t._v("async相比promise的优势:处理 then 的调用链，能够更清晰准确的写出代码")]),t._v(" "),a("p",[t._v("async相比promise的劣势：")]),t._v(" "),a("p",[t._v("有多个接口的情况下，async/await是继发，也就是一个一个接口请求，promise.all是同步触发")]),t._v(" "),a("p",[t._v("如果多个异步代码没有依赖性却使用了 await 会导致性能上的降低，代码没有依赖性的话，完全可以使用 Promise.all 的方式。")]),t._v(" "),a("p",[t._v("async同步触发写法")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写法一")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("all")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFoo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写法二")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fooPromise "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFoo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" barPromise "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" fooPromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" barPromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("反过来，如果是有依赖性的接口，那么async的语法更直观更符合语义")]),t._v(" "),a("h3",{attrs:{id:"新增class类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新增class类"}},[t._v("#")]),t._v(" 新增class类")]),t._v(" "),a("p",[t._v("JavaScript 语言中，生成实例对象的传统方法是通过构造函数。")]),t._v(" "),a("p",[t._v("ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过"),a("code",[t._v("class")]),t._v("关键字，可以定义类。")]),t._v(" "),a("p",[t._v("基本上，ES6 的"),a("code",[t._v("class")]),t._v("可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的"),a("code",[t._v("class")]),t._v("写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。")]),t._v(" "),a("p",[a("code",[t._v("constructor")]),t._v("方法是类的默认方法，通过"),a("code",[t._v("new")]),t._v("命令生成对象实例时，自动调用该方法。一个类必须有"),a("code",[t._v("constructor")]),t._v("方法，如果没有显式定义，一个空的"),a("code",[t._v("constructor")]),t._v("方法会被默认添加。")]),t._v(" "),a("p",[t._v("类的实例")]),t._v(" "),a("p",[t._v("使用new命令生成类的实例,类的所有实例共享一个原型对象。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\np1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" p2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Point.prototype ==Point.prototype")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("在“类”的内部可以使用"),a("code",[t._v("get")]),t._v("和"),a("code",[t._v("set")]),t._v("关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("prop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'getter'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("prop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setter: '")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" inst "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ninst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// setter: 123")]),t._v("\n\ninst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'getter'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("p",[t._v("类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上"),a("code",[t._v("static")]),t._v("关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。静态方法可以与非静态方法重名。")]),t._v(" "),a("p",[t._v("每一个对象都有"),a("code",[t._v("__proto__")]),t._v("属性，指向对应的构造函数的"),a("code",[t._v("prototype")]),t._v("属性。Class 作为构造函数的语法糖，同时有"),a("code",[t._v("prototype")]),t._v("属性和"),a("code",[t._v("__proto__")]),t._v("属性，因此同时存在两条继承链。")]),t._v(" "),a("p",[t._v("（1）子类的"),a("code",[t._v("__proto__")]),t._v("属性，表示构造函数的继承，总是指向父类。")]),t._v(" "),a("p",[t._v("（2）子类"),a("code",[t._v("prototype")]),t._v("属性的"),a("code",[t._v("__proto__")]),t._v("属性，表示方法的继承，总是指向父类的"),a("code",[t._v("prototype")]),t._v("属性。")]),t._v(" "),a("h4",{attrs:{id:"super关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#super关键字"}},[t._v("#")]),t._v(" Super关键字")]),t._v(" "),a("p",[a("code",[t._v("super")]),t._v("作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次"),a("code",[t._v("super")]),t._v("函数。")]),t._v(" "),a("p",[a("code",[t._v("super")]),t._v("作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。")]),t._v(" "),a("h4",{attrs:{id:"mixin模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mixin模式"}},[t._v("#")]),t._v(" Mixin模式")]),t._v(" "),a("p",[t._v("Mixin 指的是多个对象合成一个新的对象，新对象具有各个组成成员的接口。")]),t._v(" "),a("p",[t._v("用最简单的实现实现Mix如下")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {a: 'a', b: 'b'}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h3",{attrs:{id:"新增数据类型和数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新增数据类型和数据结构"}},[t._v("#")]),t._v(" 新增数据类型和数据结构")]),t._v(" "),a("p",[t._v("ES6 引入了一种新的原始数据类型"),a("code",[t._v("Symbol")]),t._v("，表示独一无二的值。它是 JavaScript 语言的第七种数据类型。")]),t._v(" "),a("p",[t._v("ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。")]),t._v(" "),a("p",[a("code",[t._v("Set")]),t._v("本身是一个构造函数，用来生成 Set 数据结构。")]),t._v(" "),a("p",[t._v("Map")]),t._v(" "),a("p",[t._v("JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。")]),t._v(" "),a("p",[t._v("ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。")]),t._v(" "),a("p",[t._v("Map类型的属性和方法")]),t._v(" "),a("p",[t._v("属性")]),t._v(" "),a("p",[a("code",[t._v("size")]),t._v("属性返回 Map 结构的成员总数。")]),t._v(" "),a("p",[a("code",[t._v("set")]),t._v("方法设置键名"),a("code",[t._v("key")]),t._v("对应的键值为"),a("code",[t._v("value")]),t._v("，然后返回整个 Map 结构。如果"),a("code",[t._v("key")]),t._v("已经有值，则键值会被更新，否则就新生成该键。")]),t._v(" "),a("p",[a("code",[t._v("get")]),t._v("方法读取"),a("code",[t._v("key")]),t._v("对应的键值，如果找不到"),a("code",[t._v("key")]),t._v("，返回"),a("code",[t._v("undefined")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("has")]),t._v("方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。")]),t._v(" "),a("p",[a("code",[t._v("Map.prototype.delete(key)")]),t._v("方法删除某个键，返回"),a("code",[t._v("true")]),t._v("。如果删除失败，返回"),a("code",[t._v("false")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("Map.prototype.clear()")]),t._v("方法清除所有成员，没有返回值。")]),t._v(" "),a("p",[t._v("方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Map.prototype.keys()")]),t._v("：返回键名的遍历器。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.values()")]),t._v("：返回键值的遍历器。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.entries()")]),t._v("：返回所有成员的遍历器。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.forEach()")]),t._v("：遍历 Map 的所有成员。")])]),t._v(" "),a("p",[t._v("WeakMap")]),t._v(" "),a("p",[a("code",[t._v("WeakMap")]),t._v("结构与"),a("code",[t._v("Map")]),t._v("结构类似，也是用于生成键值对的集合。")]),t._v(" "),a("p",[t._v("WeakMap与Map的区别有两点。")]),t._v(" "),a("p",[t._v("1."),a("code",[t._v("WeakMap")]),t._v("只接受对象作为键名（"),a("code",[t._v("null")]),t._v("除外），不接受其他类型的值作为键名。")]),t._v(" "),a("p",[t._v("2."),a("code",[t._v("WeakMap")]),t._v("的键名所指向的对象，不计入垃圾回收机制。")]),t._v(" "),a("p",[a("code",[t._v("WeakMap")]),t._v("只有四个方法可用："),a("code",[t._v("get()")]),t._v("、"),a("code",[t._v("set()")]),t._v("、"),a("code",[t._v("has()")]),t._v("、"),a("code",[t._v("delete()")]),t._v("。")]),t._v(" "),a("p",[t._v("weakmap的用途：")]),t._v(" "),a("p",[t._v("1.将DOM 节点作为键名。获取dom节点后，每当发生"),a("code",[t._v("click")]),t._v("事件，就更新一下状态。我们将这个状态作为键值放在 WeakMap 里，对应的键名就是这个节点对象。一旦这个 DOM 节点删除，该状态就会自动消失，不存在内存泄漏风险。")]),t._v(" "),a("p",[t._v("2.WeakMap 的另一个用处是部署私有属性。")]),t._v(" "),a("h3",{attrs:{id:"新增模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新增模块化"}},[t._v("#")]),t._v(" 新增模块化")]),t._v(" "),a("p",[t._v("历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的"),a("code",[t._v("require")]),t._v("、Python 的"),a("code",[t._v("import")]),t._v("，甚至就连 CSS 有"),a("code",[t._v("@import")]),t._v("，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。")]),t._v(" "),a("p",[t._v("在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。")]),t._v(" "),a("p",[t._v("模块功能主要由两个命令构成："),a("code",[t._v("export")]),t._v("和"),a("code",[t._v("import")]),t._v("。"),a("code",[t._v("export")]),t._v("命令用于规定模块的对外接口，"),a("code",[t._v("import")]),t._v("命令用于输入其他模块提供的功能。")]),t._v(" "),a("p",[t._v("一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用"),a("code",[t._v("export")]),t._v("关键字输出该变量。")]),t._v(" "),a("p",[a("code",[t._v("export")]),t._v("命令除了输出变量，还可以输出函数或类（class）。")]),t._v(" "),a("p",[a("code",[t._v("export")]),t._v("语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。")]),t._v(" "),a("p",[a("code",[t._v("export")]),t._v("命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下一节的"),a("code",[t._v("import")]),t._v("命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了 ES6 模块的设计初衷。")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("export")]),t._v("命令定义了模块的对外接口以后，其他 JS 文件就可以通过"),a("code",[t._v("import")]),t._v("命令加载这个模块。")]),t._v(" "),a("p",[t._v("如果想为输入的变量重新取一个名字，"),a("code",[t._v("import")]),t._v("命令要使用"),a("code",[t._v("as")]),t._v("关键字，将输入的变量重命名。")]),t._v(" "),a("p",[a("code",[t._v("import")]),t._v("命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。")]),t._v(" "),a("p",[a("code",[t._v("import")]),t._v("后面的"),a("code",[t._v("from")]),t._v("指定模块文件的位置，可以是相对路径，也可以是绝对路径。如果不带有路径，只是一个模块名，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。")]),t._v(" "),a("p",[a("code",[t._v("import")]),t._v("命令具有提升效果，会提升到整个模块的头部，首先执行。")]),t._v(" "),a("p",[a("code",[t._v("import")]),t._v("是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。如果多次重复执行同一句"),a("code",[t._v("import")]),t._v("语句，那么只会执行一次，而不会执行多次。")]),t._v(" "),a("p",[t._v("除了指定加载某个输出值，还可以使用整体加载，即用星号（"),a("code",[t._v("*")]),t._v("）指定一个对象，所有输出值都加载在这个对象上面。")]),t._v(" "),a("p",[t._v("从前面的例子可以看出，使用"),a("code",[t._v("import")]),t._v("命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。")]),t._v(" "),a("p",[t._v("为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到"),a("code",[t._v("export default")]),t._v("命令，为模块指定默认输出。")]),t._v(" "),a("p",[t._v("上面代码是一个模块文件"),a("code",[t._v("export-default.js")]),t._v("，它的默认输出是一个函数。")]),t._v(" "),a("p",[a("code",[t._v("export default")]),t._v("命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此"),a("code",[t._v("export default")]),t._v("命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应"),a("code",[t._v("export default")]),t._v("命令。")]),t._v(" "),a("p",[t._v("其他模块加载该模块时，"),a("code",[t._v("import")]),t._v("命令可以为该匿名函数指定任意名字。")]),t._v(" "),a("p",[t._v("nodejs使用的common加载方法在node的教程有详述，这里不再赘述。")]),t._v(" "),a("h4",{attrs:{id:"与commonjs、amd、cmd区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与commonjs、amd、cmd区别"}},[t._v("#")]),t._v(" 与commonjs、AMD、CMD区别")]),t._v(" "),a("p",[a("code",[t._v("require")]),t._v("是运行时加载模块，"),a("code",[t._v("import")]),t._v("命令无法取代"),a("code",[t._v("require")]),t._v("的动态加载功能。")]),t._v(" "),a("p",[t._v("commonjs加载时，是整体加载如模块的所有方法，再生成对象，例如")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// CommonJS模块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" stat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readfile "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" _fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" stat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" exists "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" readfile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("上面代码的实质是整体加载"),a("code",[t._v("fs")]),t._v("模块（即加载"),a("code",[t._v("fs")]),t._v("的所有方法），生成一个对象（"),a("code",[t._v("_fs")]),t._v("），然后再从这个对象上面读取 3 个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。")]),t._v(" "),a("p",[t._v("上面代码的实质是从"),a("code",[t._v("fs")]),t._v("模块加载 3 个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载，即 ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。当然，这也导致了没法引用 ES6 模块本身，因为它不是对象。")]),t._v(" "),a("p",[t._v("由于 ES6 模块是编译时加载，使得静态分析成为可能。有了它，就能进一步拓宽 JavaScript 的语法，比如引入宏（macro）和类型检验（type system）这些只能靠静态分析实现的功能。")]),t._v(" "),a("p",[t._v("commonjs优点：服务器端模块重用，NPM中模块包多，有将近20万个。")]),t._v(" "),a("p",[t._v("**缺点：**加载模块是同步的，只有加载完成后才能执行后面的操作，也就是当要用到该模块了，现加载现用，不仅加载速度慢，而且还会导致性能、可用性、调试和跨域访问等问题。Node.js主要用于服务器编程，加载的模块文件一般都存在本地硬盘，加载起来比较快，不用考虑异步加载的方式，因此,CommonJS规范比较适用。然而，这并不适合在浏览器环境，同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD CMD解决方案。")]),t._v(" "),a("p",[t._v("此外，ES6 模块输出的是值的引用，输出接口动态绑定，而 CommonJS 输出的是值的拷贝")]),t._v(" "),a("p",[t._v("AMD")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"module"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dep1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dep2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("d1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" someExportedValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"module"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"../file"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("CMD")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Common Module Definition 规范和 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AMD")]),t._v(" 很相似，尽量保持简单，并与 CommonJS 和 Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js 的 Modules 规范保持了很大的兼容性。\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("require"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" module")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" $ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jquery'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Spinning "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./spinning'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("doSomething "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h3",{attrs:{id:"扩展运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符"}},[t._v("#")]),t._v(" 扩展运算符")]),t._v(" "),a("p",[t._v("扩展运算符（spread）是三个点（"),a("code",[t._v("...")]),t._v("）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。")]),t._v(" "),a("p",[t._v("该运算符主要用于函数调用时使用，用于将数组的每个元素转化为逐个参数。")]),t._v(" "),a("p",[t._v("扩展运算符与正常的函数参数可以结合使用，非常灵活。")]),t._v(" "),a("h3",{attrs:{id:"遍历器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历器"}},[t._v("#")]),t._v(" 遍历器")]),t._v(" "),a("h3",{attrs:{id:"装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[t._v("#")]),t._v(" 装饰器")]),t._v(" "),a("p",[t._v("装饰器不能用于函数，因为会存在函数提升")]),t._v(" "),a("h3",{attrs:{id:"reflect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reflect"}},[t._v("#")]),t._v(" Reflect")]),t._v(" "),a("p",[a("code",[t._v("Reflect")]),t._v("对象与"),a("code",[t._v("Proxy")]),t._v("对象一样，也是 ES6 为了操作对象而提供的新 API。"),a("code",[t._v("Reflect")]),t._v("对象的设计目的有这样几个。")]),t._v(" "),a("p",[t._v("将"),a("code",[t._v("Object")]),t._v("对象的一些明显属于语言内部的方法（比如"),a("code",[t._v("Object.defineProperty")]),t._v("），放到"),a("code",[t._v("Reflect")]),t._v("对象上。现阶段，某些方法同时在"),a("code",[t._v("Object")]),t._v("和"),a("code",[t._v("Reflect")]),t._v("对象上部署，未来的新方法将只部署在"),a("code",[t._v("Reflect")]),t._v("对象上。也就是说，从"),a("code",[t._v("Reflect")]),t._v("对象上可以拿到语言内部的方法。")]),t._v(" "),a("p",[t._v("修改某些"),a("code",[t._v("Object")]),t._v("方法的返回结果，让其变得更合理。比如，"),a("code",[t._v("Object.defineProperty(obj, name, desc)")]),t._v("在无法定义属性时，会抛出一个错误，而"),a("code",[t._v("Reflect.defineProperty(obj, name, desc)")]),t._v("则会返回"),a("code",[t._v("false")]),t._v("。")]),t._v(" "),a("p",[t._v("让"),a("code",[t._v("Object")]),t._v("操作都变成函数行为。某些"),a("code",[t._v("Object")]),t._v("操作是命令式，比如"),a("code",[t._v("name in obj")]),t._v("和"),a("code",[t._v("delete obj[name]")]),t._v("，而"),a("code",[t._v("Reflect.has(obj, name)")]),t._v("和"),a("code",[t._v("Reflect.deleteProperty(obj, name)")]),t._v("让它们变成了函数行为。")]),t._v(" "),a("p",[a("code",[t._v("Reflect")]),t._v("对象的方法与"),a("code",[t._v("Proxy")]),t._v("对象的方法一一对应，只要是"),a("code",[t._v("Proxy")]),t._v("对象的方法，就能在"),a("code",[t._v("Reflect")]),t._v("对象上找到对应的方法。这就让"),a("code",[t._v("Proxy")]),t._v("对象可以方便地调用对应的"),a("code",[t._v("Reflect")]),t._v("方法，完成默认行为，作为修改行为的基础。也就是说，不管"),a("code",[t._v("Proxy")]),t._v("怎么修改默认行为，你总可以在"),a("code",[t._v("Reflect")]),t._v("上获取默认行为。")]),t._v(" "),a("p",[a("code",[t._v("Reflect")]),t._v("对象一共有 13 个静态方法。")]),t._v(" "),a("p",[a("code",[t._v("Reflect.get")]),t._v("方法查找并返回"),a("code",[t._v("target")]),t._v("对象的"),a("code",[t._v("name")]),t._v("属性，如果没有该属性，则返回"),a("code",[t._v("undefined")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("Reflect.set")]),t._v("方法设置"),a("code",[t._v("target")]),t._v("对象的"),a("code",[t._v("name")]),t._v("属性等于"),a("code",[t._v("value")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("Reflect.has")]),t._v("方法对应"),a("code",[t._v("name in obj")]),t._v("里面的"),a("code",[t._v("in")]),t._v("运算符。")]),t._v(" "),a("p",[a("code",[t._v("Reflect.deleteProperty")]),t._v("方法等同于"),a("code",[t._v("delete obj[name]")]),t._v("，用于删除对象的属性。")]),t._v(" "),a("p",[a("code",[t._v("Reflect.construct")]),t._v("方法等同于"),a("code",[t._v("new target(...args)")]),t._v("，这提供了一种不使用"),a("code",[t._v("new")]),t._v("，来调用构造函数的方法。")]),t._v(" "),a("p",[a("code",[t._v("Reflect.getPrototypeOf")]),t._v("方法用于读取对象的"),a("code",[t._v("__proto__")]),t._v("属性，对应"),a("code",[t._v("Object.getPrototypeOf(obj)")]),t._v("。\n"),a("code",[t._v("Reflect.setPrototypeOf")]),t._v("方法用于设置目标对象的原型（prototype），对应"),a("code",[t._v("Object.setPrototypeOf(obj, newProto)")]),t._v("方法。它返回一个布尔值，表示是否设置成功。")]),t._v(" "),a("p",[a("code",[t._v("Reflect.apply")]),t._v("方法等同于"),a("code",[t._v("Function.prototype.apply.call(func, thisArg, args)")]),t._v("，用于绑定"),a("code",[t._v("this")]),t._v("对象后执行给定函数。")]),t._v(" "),a("h3",{attrs:{id:"对象扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象扩展"}},[t._v("#")]),t._v(" 对象扩展")]),t._v(" "),a("h4",{attrs:{id:"object对象的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object对象的扩展"}},[t._v("#")]),t._v(" Object对象的扩展")]),t._v(" "),a("p",[a("code",[t._v("Object.assign()")]),t._v("方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）")]),t._v(" "),a("p",[a("code",[t._v("Object.assign()")]),t._v("方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。")]),t._v(" "),a("p",[t._v("super关键字")]),t._v(" "),a("p",[a("code",[t._v("this")]),t._v("关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字"),a("code",[t._v("super")]),t._v("，指向当前对象的原型对象。")]),t._v(" "),a("h4",{attrs:{id:"math对象的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#math对象的扩展"}},[t._v("#")]),t._v(" math对象的扩展")]),t._v(" "),a("h4",{attrs:{id:"number对象的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number对象的扩展"}},[t._v("#")]),t._v(" Number对象的扩展")]),t._v(" "),a("h4",{attrs:{id:"数组对象的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组对象的扩展"}},[t._v("#")]),t._v(" 数组对象的扩展")]),t._v(" "),a("p",[a("code",[t._v("Array.from")]),t._v("方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。")]),t._v(" "),a("p",[a("code",[t._v("Array.of")]),t._v("方法用于将一组值，转换为数组。")]),t._v(" "),a("p",[t._v("数组实例的"),a("code",[t._v("find")]),t._v("方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为"),a("code",[t._v("true")]),t._v("的成员，然后返回该成员。如果没有符合条件的成员，则返回"),a("code",[t._v("undefined")]),t._v("。")]),t._v(" "),a("p",[t._v("数组实例的"),a("code",[t._v("findIndex")]),t._v("方法的用法与"),a("code",[t._v("find")]),t._v("方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回"),a("code",[t._v("-1")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("fill")]),t._v("方法使用给定值，填充一个数组。")]),t._v(" "),a("p",[a("code",[t._v("Array.prototype.includes")]),t._v("方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的"),a("code",[t._v("includes")]),t._v("方法类似。")]),t._v(" "),a("p",[a("code",[t._v("Array.prototype.flat()")]),t._v("用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。数组的成员有时还是数组。"),a("code",[t._v("flat()")]),t._v("默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将"),a("code",[t._v("flat()")]),t._v("方法的参数写成一个整数，表示想要拉平的层数，默认为1。")]),t._v(" "),a("p",[t._v("如果不管有多少层嵌套，都要转成一维数组，可以用"),a("code",[t._v("Infinity")]),t._v("关键字作为参数。")]),t._v(" "),a("p",[t._v("如果原数组有空位，"),a("code",[t._v("flat()")]),t._v("方法会去掉空位。")]),t._v(" "),a("p",[a("code",[t._v("flatMap()")]),t._v("方法对原数组的每个成员执行一个函数（相当于执行"),a("code",[t._v("Array.prototype.map()")]),t._v("），然后对返回值组成的数组执行"),a("code",[t._v("flat()")]),t._v("方法。该方法返回一个新数组，不改变原数组。")]),t._v(" "),a("h4",{attrs:{id:"字符串对象的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串对象的扩展"}},[t._v("#")]),t._v(" 字符串对象的扩展")]),t._v(" "),a("p",[a("code",[t._v("String.raw()")]),t._v("方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。")]),t._v(" "),a("p",[a("code",[t._v("String.includes()")]),t._v("：返回布尔值，表示是否找到了参数字符串。")]),t._v(" "),a("p",[a("code",[t._v("String.startsWith()")]),t._v("：返回布尔值，表示参数字符串是否在原字符串的头部。")]),t._v(" "),a("p",[a("code",[t._v("String.endsWith()")]),t._v("：返回布尔值，表示参数字符串是否在原字符串的尾部。")]),t._v(" "),a("p",[a("code",[t._v("String.repeat()")]),t._v("方法返回一个新字符串，表示将原字符串重复"),a("code",[t._v("n")]),t._v("次。")]),t._v(" "),a("p",[t._v("如果某个字符串不够指定长度，会在头部或尾部补全。"),a("code",[t._v("padStart()")]),t._v("用于头部补全，"),a("code",[t._v("padEnd()")]),t._v("用于尾部补全。")]),t._v(" "),a("p",[a("code",[t._v("trimStart()")]),t._v("和"),a("code",[t._v("trimEnd()")]),t._v("这两个方法。它们的行为与"),a("code",[t._v("trim()")]),t._v("一致，"),a("code",[t._v("trimStart()")]),t._v("消除字符串头部的空格，"),a("code",[t._v("trimEnd()")]),t._v("消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。")]),t._v(" "),a("h4",{attrs:{id:"函数对象扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数对象扩展"}},[t._v("#")]),t._v(" 函数对象扩展")]),t._v(" "),a("p",[t._v("ES6允许使用箭头定义函数")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 箭头函数,包含一个name参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fun")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数体")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Hello ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(" !")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fun")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数体")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Hello ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(" !")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("没有参数时使用空括号，有多个参数时用逗号隔开")]),t._v(" "),a("p",[t._v("箭头函数没有this、"),a("code",[t._v("arguments")]),t._v("、"),a("code",[t._v("super")]),t._v("、"),a("code",[t._v("new.target")]),t._v("，全部指向外层函数的对应变量，所以也就不能用"),a("code",[t._v("call()")]),t._v("、"),a("code",[t._v("apply()")]),t._v("、"),a("code",[t._v("bind()")]),t._v("这些方法去改变"),a("code",[t._v("this")]),t._v("的指向。")]),t._v(" "),a("p",[t._v("不可以当作构造函数，也就是说，不可以使用"),a("code",[t._v("new")]),t._v("命令，否则会抛出一个错误。")]),t._v(" "),a("p",[t._v("（3）不可以使用"),a("code",[t._v("arguments")]),t._v("对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。")]),t._v(" "),a("p",[t._v("（4）不可以使用"),a("code",[t._v("yield")]),t._v("命令，因此箭头函数不能用作 Generator 函数。")]),t._v(" "),a("p",[t._v("ES6 引入 rest 参数（形式为"),a("code",[t._v("...变量名")]),t._v("），用于获取函数的多余参数，")]),t._v(" "),a("h3",{attrs:{id:"模版字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模版字符串"}},[t._v("#")]),t._v(" 模版字符串")]),t._v(" "),a("p",[t._v("传统的 JavaScript 语言，输出模板使用jquery通常是这样写的")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#result'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'There are <b>'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" basket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'</b> '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'items in your basket, '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<em>'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" basket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onSale "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'</em> are on sale!'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("ES6引入了模板字符串简化了写法")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#result'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  There are <b>")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("basket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("</b> items\n   in your basket, <em>")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("basket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onSale"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("</em>\n  are on sale!\n")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"es6与es5转码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6与es5转码"}},[t._v("#")]),t._v(" ES6与ES5转码")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Babel"),a("OutboundLink")],1),t._v(" 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在老版本的浏览器执行。这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。")]),t._v(" "),a("p",[t._v("安装Babel")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" --save-dev @babel/core\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("配置文件babelrc")]),t._v(" "),a("p",[t._v("Babel 的配置文件是"),a("code",[t._v(".babelrc")]),t._v("，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。")]),t._v(" "),a("p",[t._v("该文件用来设置转码规则和插件，基本格式如下。")]),t._v(" "),a("div",{staticClass:"language-babelrc line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('{\n  "presets": [],\n  "plugins": []\n}\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[a("code",[t._v("presets")]),t._v("字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最新转码规则")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" --save-dev @babel/preset-env\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# react 转码规则")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" --save-dev @babel/preset-react\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("然后，将这些规则加入"),a("code",[t._v(".babelrc")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('{\n    "presets": [\n      "@babel/env",\n      "@babel/preset-react"\n    ],\n    "plugins": []\n }\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API，比如"),a("code",[t._v("Iterator")]),t._v("、"),a("code",[t._v("Generator")]),t._v("、"),a("code",[t._v("Set")]),t._v("、"),a("code",[t._v("Map")]),t._v("、"),a("code",[t._v("Proxy")]),t._v("、"),a("code",[t._v("Reflect")]),t._v("、"),a("code",[t._v("Symbol")]),t._v("、"),a("code",[t._v("Promise")]),t._v("等全局对象，以及一些定义在全局对象上的方法（比如"),a("code",[t._v("Object.assign")]),t._v("）都不会转码。")]),t._v(" "),a("p",[t._v("举例来说，ES6 在"),a("code",[t._v("Array")]),t._v("对象上新增了"),a("code",[t._v("Array.from")]),t._v("方法。Babel 就不会转码这个方法。如果想让这个方法运行，可以使用"),a("code",[t._v("core-js")]),t._v("和"),a("code",[t._v("regenerator-runtime")]),t._v("(后者提供generator函数的转码)，为当前环境提供一个垫片。")]),t._v(" "),a("p",[t._v("安装")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" --save-dev core-js regenerator-runtime\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("然后在脚本头部加入如下代码")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'core-js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'regenerator-runtime/runtime'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或者")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'core-js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'regenerator"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("runtime"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("runtime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("code",[t._v("@babel/node")]),t._v("模块的"),a("code",[t._v("babel-node")]),t._v("命令，提供一个支持 ES6 的 REPL 环境。它支持 Node 的 REPL 环境的所有功能，而且可以直接运行 ES6 代码。")]),t._v(" "),a("p",[t._v("安装")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" --save-dev @babel/node\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("执行"),a("code",[t._v("babel-node")]),t._v("就进入 REPL 环境。")]),t._v(" "),a("p",[a("code",[t._v("@babel/register")]),t._v("模块改写"),a("code",[t._v("require")]),t._v("命令，为它加上一个钩子。此后，每当使用"),a("code",[t._v("require")]),t._v("加载"),a("code",[t._v(".js")]),t._v("、"),a("code",[t._v(".jsx")]),t._v("、"),a("code",[t._v(".es")]),t._v("和"),a("code",[t._v(".es6")]),t._v("后缀名的文件，就会先用 Babel 进行转码。")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" --save-dev @babel/register\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("使用时，必须首先加载"),a("code",[t._v("@babel/register")]),t._v("。")]),t._v(" "),a("p",[t._v("Babel 提供一个"),a("a",{attrs:{href:"https://babeljs.io/repl/",target:"_blank",rel:"noopener noreferrer"}},[t._v("REPL 在线编译器"),a("OutboundLink")],1),t._v("，可以在线将 ES6 代码转为 ES5 代码。转换后的代码，可以直接作为 ES5 代码插入网页运行。")]),t._v(" "),a("h2",{attrs:{id:"浏览器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[t._v("#")]),t._v(" 浏览器")]),t._v(" "),a("h3",{attrs:{id:"chrome浏览器调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chrome浏览器调试"}},[t._v("#")]),t._v(" chrome浏览器调试")]),t._v(" "),a("p",[t._v("以chrome为例")]),t._v(" "),a("p",[t._v("在chrome菜单中选择更多工具->开发者工具或者右键点击网页元素，选择检查打开调试面板。")]),t._v(" "),a("p",[t._v("调试面板中有设备模式、元素面板、控制台面板、源代码面板、网络面板、性能面板、内存面板、应用面板、安全面板。")]),t._v(" "),a("p",[t._v("设备模式面板可以选择web、ios、安卓等设备模式检查响应式布局")]),t._v(" "),a("p",[t._v("元素面板(element)可以检查页面DOM和CSS，还可以自由操作DOM和CSS更改布局和设计页面。")]),t._v(" "),a("p",[t._v("点击箭头图标，点击网页的任意位置，就可以出现该位置的元素html代码和css样式")]),t._v(" "),a("p",[t._v("控制台面板(console)可以在开发期间记录输出信息，或者作为shell与javascript交互")]),t._v(" "),a("p",[t._v("error和waring就是网页运行中产生的错误和警告，info用作输出的显示")]),t._v(" "),a("p",[t._v("源代码面板(source)可以设置断点调试JavaScript，或者通过workspace连接本地文件来使用开发者工具的实时编辑器。")]),t._v(" "),a("p",[t._v("网络面板(network)查看当前网页的请求和下载的资源文件。")]),t._v(" "),a("p",[t._v("点击network就能看到各个接口请求的先后顺序和耗时。想要查看具体的接口参数，在name中找到具体的接口，header为请求头参数，preview和response为返回值。")]),t._v(" "),a("p",[t._v("内存面板(memory)可以跟踪内存泄漏等功能")]),t._v(" "),a("p",[t._v("性能面板(performance)可以记录和查看网站生命周期内发生的各种事件，通过修改对应事件来提高页面的运行性能。")]),t._v(" "),a("p",[t._v("应用面板(application)中可以检查加载的所有资源，包括indexedDB、WebSQL数据库、本地和会话存储、cookie、应用程序缓存、图像、字体、样式表等。")]),t._v(" "),a("p",[t._v("安全面板(security)检查证书问题等。")])])}),[],!1,null,null,null);s.default=e.exports}}]);