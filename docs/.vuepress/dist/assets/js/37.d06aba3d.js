(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{395:function(e,s,a){"use strict";a.r(s);var t=a(44),n=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[e._v("Docker容器部署")]),e._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("h3",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[e._v("#")]),e._v(" 原理")]),e._v(" "),a("p",[e._v("由于 "),a("code",[e._v("Docker")]),e._v(" 的容器隔离依赖于 "),a("code",[e._v("Linux")]),e._v(" 内核中的相关支持，所以使用 "),a("code",[e._v("Docker")]),e._v(" 首先需要确保安装机器的 "),a("code",[e._v("Linux kernel")]),e._v("中包含 "),a("code",[e._v("Docker")]),e._v(" 所需要使用的特性。以目前 Docker 官方主要维护的版本为例，我们需要使用基于 "),a("code",[e._v("Linux kernel 3.10")]),e._v(" 以上版本的 "),a("code",[e._v("Linux")]),e._v(" 系统,也就是centos7、debian7、ubuntu14以上的系统版本来安装 "),a("code",[e._v("Docker.")])]),e._v(" "),a("p",[a("code",[e._v("Windows")]),e._v(" 和 "),a("code",[e._v("macOS")]),e._v(" 中没有 "),a("code",[e._v("Docker")]),e._v("能够利用的 "),a("code",[e._v("Linux")]),e._v(" 环境，那么我们生造一个 "),a("code",[e._v("Linux")]),e._v(" 环境就行啦！"),a("code",[e._v("Docker for Windows")]),e._v("和 "),a("code",[e._v("Docker for Mac")]),e._v(" 正是这么实现的…")]),e._v(" "),a("p",[e._v("由于虚拟化在云计算时代的广泛使用，"),a("code",[e._v("Windows")]),e._v(" 和 "),a("code",[e._v("MacOS")]),e._v(" 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 "),a("code",[e._v("Hypervisor")]),e._v("实现虚拟化的功能。在 "),a("code",[e._v("Windows")]),e._v(" 中，我们可以通过 "),a("code",[e._v("Hyper-V")]),e._v(" 实现虚拟化，而在 "),a("code",[e._v("macOS")]),e._v(" 中，我们可以通过 HyperKit 实现虚拟化")]),e._v(" "),a("p",[a("code",[e._v("Docker for Windows")]),e._v(" 和 "),a("code",[e._v("Docker for Mac")]),e._v(" 这里利用了这两个操作系统提供的功能来搭建一个虚拟 "),a("code",[e._v("Linux")]),e._v(" 系统，并在其之上安装和运行 "),a("code",[e._v("docker daemon")])]),e._v(" "),a("h3",{attrs:{id:"mac-os"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mac-os"}},[e._v("#")]),e._v(" Mac os")]),e._v(" "),a("p",[e._v("使用homebrew安装")]),e._v(" "),a("div",{staticClass:"language-mac line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("brew cask install docker\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("手动安装")]),e._v(" "),a("p",[e._v("下载stable版本的dmg文件，")]),e._v(" "),a("p",[e._v("检查是否安装成功")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("docker "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("version\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("查看docker配置")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("docker info\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"linux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[e._v("#")]),e._v(" Linux")]),e._v(" "),a("p",[e._v("移除可能有旧的Docker版本")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("yum erase -y docker docker-common docker-engine\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("安装工具包和依赖，设置仓库源")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("yum "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y yum-utils device-mapper-persistent-data lvm2\nyum-config-manager "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v(" \n    --add-repo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    https://download.docker.com/linux/centos/docker-ce.repo\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("用yum安装docker-ce")]),e._v(" "),a("div",{staticClass:"language-linux line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("##最新稳定版\nyum install docker-ce docker-ce-cli containerd.io\n##指定版本\nyum install docker-ce-18.09.6 docker-ce-cli-18.09.6 containerd.io\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("启动docker服务")]),e._v(" "),a("div",{staticClass:"language-centos line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("systemctl start docker\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("检查docker的信息和版本")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker version\ndocker info\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("验证docker，通过下载镜像和创建容器来看看Docker是否可以运转起来。可以使用下面的命令从Docker的镜像仓库下载名为hello-world的镜像文件。")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker pull hello-world\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("docker安装容器")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("docker pull gitlab/gitlab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("ce\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("如果docker拉取较慢更换docker源，docker默认为docker国内镜像，可以腾讯源、中科大源或者dcloud")]),e._v(" "),a("p",[e._v("启动容器")]),e._v(" "),a("h2",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[e._v("#")]),e._v(" 基本概念")]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("Docker")]),e._v(" 体系里，有四个对象 ("),a("code",[e._v("Object")]),e._v(") 是我们不得不进行介绍的，因为几乎所有 "),a("code",[e._v("Docker")]),e._v(" 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：镜像 ( "),a("code",[e._v("Image")]),e._v(" )、容器 ( "),a("code",[e._v("Container")]),e._v(" )、网络 ( "),a("code",[e._v("Network")]),e._v(" )、数据卷 ( "),a("code",[e._v("Volume")]),e._v(" )")]),e._v(" "),a("p",[e._v("所谓镜像，可以理解为一个只读的文件包，其中包含了虚拟环境运行最原始文件系统的内容")]),e._v(" "),a("p",[e._v("容器就是用来隔离虚拟环境的基础设施，而在 "),a("code",[e._v("Docker")]),e._v(" 里，它也被引申为隔离出来的虚拟环境。")]),e._v(" "),a("p",[e._v("如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间")]),e._v(" "),a("p",[e._v("一个容器由三个部分组成：一个docker镜像、一个程序运行环境、一个指令集合")]),e._v(" "),a("p",[e._v("网络：在 "),a("code",[e._v("Docker")]),e._v(" 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离")]),e._v(" "),a("p",[e._v("在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。")]),e._v(" "),a("p",[e._v("为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。")]),e._v(" "),a("p",[e._v("能够这么简单的实现挂载，主要还是得益于 "),a("code",[e._v("Docker")]),e._v(" 底层的 Union File System 技术。在 "),a("code",[e._v("UnionFS")]),e._v(" 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。")]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("Docker")]),e._v(" 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( "),a("code",[e._v("Volume")]),e._v(" )…")]),e._v(" "),a("h2",{attrs:{id:"报错处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#报错处理"}},[e._v("#")]),e._v(" 报错处理")]),e._v(" "),a("h3",{attrs:{id:"rate-limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rate-limit"}},[e._v("#")]),e._v(" rate limit")]),e._v(" "),a("p",[e._v("docker拉取镜像时报错")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("Error response from daemon:toomanyrequests: You have reached your pull rate limit\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("dockerhub从2020年11月2日起限制非付费用户的拉取频率：")]),e._v(" "),a("p",[e._v("匿名用户每6小时允许pull100次，")]),e._v(" "),a("p",[e._v("已登录用户每6小时允许pull200次")]),e._v(" "),a("p",[e._v("方法：修改拉取的镜像源")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" /etc/docker/daemon.json\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("添加中科大的镜像源")]),e._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"registry-mirrors"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://ustc-edu-cn.mirror.aliyuncs.com"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("重启docker服务")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("systemctl daemon-reload "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" systemctl restart docker\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h2",{attrs:{id:"dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[e._v("#")]),e._v(" Dockerfile")]),e._v(" "),a("p",[e._v("Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。通过 "),a("code",[e._v("Dockerfile")]),e._v(" 我们可以更加清晰、明确的给定 "),a("code",[e._v("Docker")]),e._v(" 镜像的制作过程，而由于其仅是简单、小体积的文件，在网络等其他介质中传递的速度极快，能够更快的帮助我们实现容器迁移和集群部署")]),e._v(" "),a("p",[a("code",[e._v("Dockerfile")]),e._v(" 的指令简单分为五大类：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("基础指令")]),e._v("：用于定义新镜像的基础和性质。")]),e._v(" "),a("li",[a("strong",[e._v("控制指令")]),e._v("：是指导镜像构建的核心部分，用于描述镜像在构建过程中需要执行的命令。")]),e._v(" "),a("li",[a("strong",[e._v("引入指令")]),e._v("：用于将外部文件直接引入到构建镜像内部。")]),e._v(" "),a("li",[a("strong",[e._v("执行指令")]),e._v("：能够为基于镜像所创建的容器，指定在启动时需要执行的脚本或命令。")]),e._v(" "),a("li",[a("strong",[e._v("配置指令")]),e._v("：对镜像以及基于镜像所创建的容器，可以通过配置指令对其网络、用户等内容进行配置")])]),e._v(" "),a("p",[e._v("通常来说，我们不会从零开始搭建一个镜像，而是会选择一个已经存在的镜像作为我们新镜像的基础，这种方式能够大幅减少我们的时间。")]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("Dockerfile")]),e._v(" 里，我们可以通过 "),a("code",[e._v("FROM")]),e._v(" 指令指定一个基础镜像，接下来所有的指令都是基于这个镜像所展开的。在镜像构建的过程中，"),a("code",[e._v("Docker")]),e._v(" 也会先获取到这个给出的基础镜像，再从这个镜像上进行构建操作。")]),e._v(" "),a("p",[e._v("实例")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" nginx\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" echo "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'这是一个本地构建的nginx镜像'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")]),e._v(" /usr/share/nginx/html/index.html\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("RUN：用于执行后面跟着的命令行命令。有以下俩种格式：")]),e._v(" "),a("p",[e._v("执行命令 shell格式")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" <命令行命令"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("执行可执行文件 exec格式")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"可执行文件"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"参数1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"参数2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("特别注意，Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。")]),e._v(" "),a("p",[e._v("通过 "),a("code",[e._v("EXPOSE")]),e._v(" 指令就可以为镜像指定要暴露的端口。")]),e._v(" "),a("p",[e._v("VOLUME：定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。")]),e._v(" "),a("p",[e._v("作用：避免重要的数据因容器重启而丢失，避免容器不断变大。")]),e._v(" "),a("p",[e._v("CMD：类似于RUN指令。RUN指令在docker build时运行，CMD是在docker run时运行。")]),e._v(" "),a("p",[e._v("在制作新的镜像的时候，我们可能需要将一些软件配置、程序代码、执行脚本等直接导入到镜像内的文件系统里，使用 "),a("code",[e._v("COPY")]),e._v(" 或"),a("code",[e._v("ADD")]),e._v(" 指令能够帮助我们直接从宿主机的文件系统里拷贝内容到镜像里的文件系统中。")]),e._v(" "),a("p",[e._v("构建镜像")]),e._v(" "),a("div",{staticClass:"language-dock line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker build -t nginx:test .\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("最后的.点是上下文路径，上下文路径是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。")]),e._v(" "),a("p",[e._v("​       优点：在执行 <源文件> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <目标路径>。")]),e._v(" "),a("p",[e._v("​        缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。")]),e._v(" "),a("h3",{attrs:{id:"使用技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用技巧"}},[e._v("#")]),e._v(" 使用技巧")]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("Dockerfile")]),e._v(" 里，我们可以用 "),a("code",[e._v("ARG")]),e._v(" 指令来建立一个参数变量，我们可以在构建时通过构建指令传入这个参数变量，并且在 "),a("code",[e._v("Dockerfile")]),e._v("里使用它。")]),e._v(" "),a("p",[e._v("例如，我们希望通过参数变量控制 "),a("code",[e._v("Dockerfile")]),e._v(" 中某个程序的版本，在构建时安装我们指定版本的软件，我们可以通过 "),a("code",[e._v("ARG")]),e._v(" 定义的参数作为占位符，替换版本定义的部分")]),e._v(" "),a("p",[e._v("环境变量也是用来定义参数的东西，与 "),a("code",[e._v("ARG")]),e._v("指令相类似，环境变量的定义是通过 "),a("code",[e._v("ENV")]),e._v(" 这个指令来完成的")]),e._v(" "),a("h2",{attrs:{id:"容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[e._v("#")]),e._v(" 容器")]),e._v(" "),a("p",[e._v("Docker 容器的生命周期里分为五种状态，其分别代表着")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Created")]),e._v("：容器已经被创建，容器所需的相关资源已经准备就绪，但容器中的程序还未处于运行状态。")]),e._v(" "),a("li",[a("code",[e._v("Running")]),e._v("：容器正在运行，也就是容器中的应用正在运行。")]),e._v(" "),a("li",[a("code",[e._v("Paused")]),e._v("：容器已暂停，表示容器中的所有程序都处于暂停 ( 不是停止 ) 状态。")]),e._v(" "),a("li",[a("code",[e._v("Stopped")]),e._v("：容器处于停止状态，占用的资源和沙盒环境都依然存在，只是容器中的应用程序均已停止。")]),e._v(" "),a("li",[a("code",[e._v("Deleted")]),e._v("：容器已删除，相关占用的资源及存储在 "),a("code",[e._v("Docker")]),e._v(" 中的管理信息也都已释放和移除…")])]),e._v(" "),a("p",[e._v("创建容器")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("sudo docker create "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("name nginx nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("1.12\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("--name后面跟的是指定容器的名称")]),e._v(" "),a("p",[e._v("启动容器")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker start nginx\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("nginx为之前创建容器时指定的名称，启动之后为running状态，只要应用程序还在运行，那么容器的状态就会是 "),a("code",[e._v("Running")]),e._v("，除非进行一些修改容器的操作。")]),e._v(" "),a("p",[e._v("创建容器和启动容器也可以合并为一步run命令，")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker run --name nginx -d nginx:1.12\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("通过 "),a("code",[e._v("docker run")]),e._v(" 创建的容器，在创建完成之后会直接启动起来，不需要我们再使用 "),a("code",[e._v("docker start")]),e._v(" 去启动了。")]),e._v(" "),a("p",[e._v("管理容器")]),e._v(" "),a("p",[e._v("容器创建和启动后，除了关注应用程序是否功能正常外，我们也会关注容器的状态等内容.使用docker ps罗列出 "),a("code",[e._v("Docker")]),e._v(" 中的容器")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("默认情况下，"),a("code",[e._v("docker ps")]),e._v(" 列出的容器是处于运行中的容器，如果要列出所有状态的容器，需要增加 "),a("code",[e._v("-a")]),e._v(" 或 "),a("code",[e._v("--all")]),e._v("选项")]),e._v(" "),a("p",[e._v("docker logs 显示容器的标准输出")]),e._v(" "),a("p",[e._v("停止和删除容器")]),e._v(" "),a("p",[e._v("docker stop 停止正在运行的容器")]),e._v(" "),a("p",[e._v("正在运行中的容器默认情况下是不能被删除的，我们可以通过增加 "),a("code",[e._v("-f")]),e._v(" 或 "),a("code",[e._v("--force")]),e._v(" 选项来让 "),a("code",[e._v("docker rm")]),e._v(" 强制停止并删除容器，不过不建议这样做。")]),e._v(" "),a("p",[e._v("进入容器")]),e._v(" "),a("p",[e._v("很多时间，我们需要的操作并不仅仅是按镜像所给出的命令启动容器而已，我们还会希望进一步操作容器，这时候最佳的方式就是让我们进入到容器了")]),e._v(" "),a("p",[a("code",[e._v("Docker")]),e._v(" 为我们提供了一个命令 "),a("code",[e._v("docker exec")]),e._v(" 来让容器运行我们所给出的命令")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" nginx "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" /etc/hostname\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"容器网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器网络"}},[e._v("#")]),e._v(" 容器网络")]),e._v(" "),a("p",[e._v("容器网络模型为容器引擎提供了一套标准的网络对接范式，而在 "),a("code",[e._v("Docker")]),e._v(" 中，实现这套范式的是 "),a("code",[e._v("Docker")]),e._v(" 所封装的 "),a("code",[e._v("libnetwork")]),e._v(" 模块。")]),e._v(" "),a("p",[a("code",[e._v("Docker")]),e._v(" 官方为我们提供了五种 "),a("code",[e._v("Docker")]),e._v("网络驱动，分别是："),a("code",[e._v("Bridge Driver")]),e._v("、"),a("code",[e._v("Host Driver")]),e._v("、"),a("code",[e._v("Overlay Driver")]),e._v("、"),a("code",[e._v("MacLan Driver")]),e._v("、"),a("code",[e._v("one Driver")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("Bridge Driver")]),e._v(" 和 "),a("code",[e._v("Overlay Driver")]),e._v(" 在开发中使用频率较高。"),a("code",[e._v("Bridge")]),e._v(" 网络是 "),a("code",[e._v("Docker")]),e._v(" 容器的默认网络驱动，简而言之其就是通过网桥来实现网络通讯 ( 网桥网络的实现可以基于硬件，也可以基于软件 )。")]),e._v(" "),a("p",[a("code",[e._v("Overlay")]),e._v(" 网络是借助 "),a("code",[e._v("Docker")]),e._v(" 集群模块 "),a("code",[e._v("Docker Swarm")]),e._v("来搭建的跨 "),a("code",[e._v("Docker Daemon")]),e._v(" 网络，我们可以通过它搭建跨物理主机的虚拟网络，进而让不同物理机中运行的容器感知不到多个物理机的存在。")]),e._v(" "),a("p",[e._v("创建网络")]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("Docker")]),e._v(" 里，我们也能够创建网络，形成自己定义虚拟子网的目的。")]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("docker CLI")]),e._v(" 里与网络相关的命令都以 "),a("code",[e._v("network")]),e._v(" 开头，创建网络的命令是 "),a("code",[e._v("docker network create")])]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker network create -d bridge individual\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("通过 "),a("code",[e._v("-d")]),e._v(" 选项我们可以为新的网络指定驱动的类型，其值可以是刚才我们所提及的 "),a("code",[e._v("bridge")]),e._v("、"),a("code",[e._v("host")]),e._v("、"),a("code",[e._v("overlay")]),e._v("、"),a("code",[e._v("maclan")]),e._v("、"),a("code",[e._v("none")]),e._v("，也可以是其他网络驱动插件所定义的类型。这里我们使用的是 "),a("code",[e._v("Bridge Driver")]),e._v(" ( 当我们不指定网络驱动时，"),a("code",[e._v("Docker")]),e._v("也会默认采用 "),a("code",[e._v("Bridge Driver")]),e._v("作为网络驱动 )")]),e._v(" "),a("p",[e._v("查看网络")]),e._v(" "),a("p",[e._v("通过 "),a("code",[e._v("docker network ls")]),e._v(" 或是 "),a("code",[e._v("docker network list")]),e._v(" 可以查看 "),a("code",[e._v("Docker")]),e._v(" 中已经存在的网络")]),e._v(" "),a("p",[e._v("查看网络详情")]),e._v(" "),a("p",[e._v("我们通过 "),a("code",[e._v("docker inspect")]),e._v(" 观察一下此时的容器网络")]),e._v(" "),a("p",[e._v("端口映射")]),e._v(" "),a("p",[e._v("有一个非常常见的需求，就是我们需要在容器外通过网络访问容器中的应用。最简单的一个例子，我们提供了 Web 服务，那么我们就需要提供一种方式访问运行在容器中的 Web 应用。")]),e._v(" "),a("p",[e._v("通过 "),a("code",[e._v("Docker")]),e._v(" 端口映射功能，我们可以把容器的端口映射到宿主操作系统的端口上，当我们从外部访问宿主操作系统的端口时，数据请求就会自动发送给与之关联的容器端口")]),e._v(" "),a("p",[e._v("要映射端口，我们可以在创建容器时使用 "),a("code",[e._v("-p")]),e._v(" 或者是 "),a("code",[e._v("--publish")]),e._v("选项")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker run -d --name nginx -p "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),e._v(":80 -p "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("443")]),e._v(":443 nginx:1.12\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("使用端口映射选项的格式是 "),a("code",[e._v("-p <ip>:<host-port>:<container-port>")]),e._v("，其中 "),a("code",[e._v("ip")]),e._v(" 是宿主操作系统的监听 "),a("code",[e._v("ip")]),e._v("，可以用来控制监听的网卡，默认为 "),a("code",[e._v("0.0.0.0")]),e._v("，也就是监听所有网卡。"),a("code",[e._v("host-port")]),e._v(" 和 "),a("code",[e._v("container-port")]),e._v(" 分别表示映射到宿主操作系统的端口和容器的端口，这两者是可以不一样的，我们可以将容器的 "),a("code",[e._v("80")]),e._v(" 端口映射到宿主操作系统的 8080 端口，传入 "),a("code",[e._v("-p 8080:80")]),e._v(" 即可。")]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("Docker for Windows")]),e._v(" 或 "),a("code",[e._v("Docker for")]),e._v(" 中，这个端口映射的操作程序会自动帮助我们完成，所以我们不需要做任何额外的事情，就能够直接使用 "),a("code",[e._v("Windows")]),e._v(" 或 "),a("code",[e._v("macOS")]),e._v(" 的端口访问容器端口了。")]),e._v(" "),a("p",[e._v("而当我们使用 "),a("code",[e._v("Docker Toolbox")]),e._v(" 时，由于其自动化能力比较差，所以需要我们在 "),a("code",[e._v("VirtualBox")]),e._v(" 里单独配置这个操作系统端口到 "),a("code",[e._v("Linux")]),e._v(" 端口的映射关系。")]),e._v(" "),a("h3",{attrs:{id:"容器互联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器互联"}},[e._v("#")]),e._v(" 容器互联")]),e._v(" "),a("h2",{attrs:{id:"镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像"}},[e._v("#")]),e._v(" 镜像")]),e._v(" "),a("h3",{attrs:{id:"镜像基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像基本操作"}},[e._v("#")]),e._v(" 镜像基本操作")]),e._v(" "),a("p",[e._v("镜像是由 "),a("code",[e._v("Docker")]),e._v(" 进行管理的，所以它们的存储位置和存储方式等我们并不需要过多的关心，我们只需要利用 "),a("code",[e._v("Docker")]),e._v(" 所提供的一些接口或命令对它们进行控制即可")]),e._v(" "),a("p",[e._v("要查看当前连接的 "),a("code",[e._v("docker daemon")]),e._v(" 中存放和管理了哪些镜像，我们可以使用 "),a("code",[e._v("docker images")]),e._v("这个命令")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker images\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("可以输出镜像的iD、构建时间（created time）、大小（size）等数据")]),e._v(" "),a("p",[a("code",[e._v("username")]),e._v("： 主要用于识别上传镜像的不同用户，与 GitHub 中的用户空间类似。")]),e._v(" "),a("p",[a("code",[e._v("repository")]),e._v("：主要用于识别进行的内容，形成对镜像的表意描述。")]),e._v(" "),a("p",[a("code",[e._v("tag")]),e._v("：主要用户表示镜像的版本，方便区分进行内容的不同细节")]),e._v(" "),a("p",[e._v("查看镜像的详细信息")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker inspect redis:3.2\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("拉取镜像")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker pull ubuntu\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("code",[e._v("Docker")]),e._v(" 会开始从镜像仓库中拉取我们所指定的镜像了，在控制台中，我们可以看到镜像拉取的进度。下载进度会分为几行，其实每一行代表的就是一个镜像层。"),a("code",[e._v("Docker")]),e._v(" 首先会拉取镜像所基于的所有镜像层，之后再单独拉取每一个镜像层并组合成这个镜像。当然，如果在本地已经存在相同的镜像层 ( 共享于其他的镜像 )，那么 "),a("code",[e._v("Docker")]),e._v(" 就直接略过这个镜像层的拉取而直接采用本地的内容。")]),e._v(" "),a("p",[e._v("当我们没有提供镜像的标签时，"),a("code",[e._v("Docker")]),e._v(" 会默认使用 "),a("code",[e._v("latest")]),e._v(" 这个标签")]),e._v(" "),a("p",[e._v("删除镜像")]),e._v(" "),a("p",[e._v("虽然 "),a("code",[e._v("Docker")]),e._v(" 镜像占用的空间比较小，但日渐冗杂的镜像和凌乱的镜像版本会让管理越来越困难，所以有时候我们需要清理一些无用的镜像，将它们从本地的 "),a("code",[e._v("Docker Engine")]),e._v(" 中移除")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker rmi ubuntu:latest\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"保存和共享镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#保存和共享镜像"}},[e._v("#")]),e._v(" 保存和共享镜像")]),e._v(" "),a("p",[a("code",[e._v("Docker")]),e._v(" 镜像的本质是多个基于 "),a("code",[e._v("UnionFS")]),e._v(" 的镜像层依次挂载的结果，而容器的文件系统则是在以只读方式挂载镜像后增加的一个可读可写的沙盒环境。")]),e._v(" "),a("p",[e._v("基于这样的结构，"),a("code",[e._v("Docker")]),e._v(" 中为我们提供了将容器中的这个可读可写的沙盒环境持久化为一个镜像层的方法。更浅显的说，就是我们能够很轻松的在 "),a("code",[e._v("Docker")]),e._v(" 里将容器内的修改记录下来，保存为一个新的镜像。")]),e._v(" "),a("p",[e._v("将容器修改的内容保存为镜像的命令是 "),a("code",[e._v("docker")]),e._v(" commit，由于镜像的结构很像代码仓库里的修改记录，而记录容器修改的过程又像是在提交代码，所以这里我们更形象的称之为提交容器的更改")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Configured"')]),e._v(" webapp\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("我们发现提交容器更新后产生的镜像并没 "),a("code",[e._v("REPOSITORY")]),e._v(" 和 "),a("code",[e._v("TAG")]),e._v(" 的内容，也就是说，这个新的镜像还没有名字。")]),e._v(" "),a("h2",{attrs:{id:"docker-hub"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-hub"}},[e._v("#")]),e._v(" Docker-hub")]),e._v(" "),a("p",[a("code",[e._v("Docker Hub")]),e._v(" 是 "),a("code",[e._v("Docker")]),e._v(" 官方建立的中央镜像仓库，除了普通镜像仓库的功能外，它内部还有更加细致的权限管理，支持构建钩子和自动构建，并且有一套精致的 Web 操作页面")]),e._v(" "),a("p",[e._v("由于定位是 "),a("code",[e._v("Docker")]),e._v(" 的中央镜像仓库系统，同时也是 "),a("code",[e._v("Docker Engine")]),e._v(" 的默认镜像仓库，所以 "),a("code",[e._v("Docker Hub")]),e._v(" 是开发者共享镜像的首选，那么也就意味着其中的镜像足够丰富")]),e._v(" "),a("p",[a("code",[e._v("Docker Hub")]),e._v(" 提供了一套完整的 "),a("code",[e._v("Web")]),e._v(" 操作界面，所以我们搜索其中的镜像会非常方便")]),e._v(" "),a("p",[a("code",[e._v("OFFICIAL")]),e._v("代表镜像为 "),a("code",[e._v("Docker")]),e._v(" 官方提供和维护，相对来说稳定性和安全性较高")]),e._v(" "),a("p",[a("code",[e._v("STARS")]),e._v(" 代表镜像的关注人数，这类似 "),a("code",[e._v("GitHub")]),e._v(" 的 "),a("code",[e._v("Stars")]),e._v("，可以理解为热度")]),e._v(" "),a("p",[a("code",[e._v("PULLS")]),e._v(" 代表镜像被拉取的次数，基本上能够表示镜像被使用的频度")]),e._v(" "),a("p",[e._v("使用docker search能够搜索docker hub中的镜像")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker search ubuntu\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h2",{attrs:{id:"docker-machine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-machine"}},[e._v("#")]),e._v(" Docker-machine")]),e._v(" "),a("h2",{attrs:{id:"docker-compose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[e._v("#")]),e._v(" Docker-compose")]),e._v(" "),a("p",[e._v("是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。")]),e._v(" "),a("p",[e._v("docker compose的三步：")]),e._v(" "),a("p",[e._v("1.编写容器所需镜像的 "),a("code",[e._v("Dockerfile")]),e._v("。（如果必要）。")]),e._v(" "),a("p",[e._v("2.编写用于配置容器的 "),a("code",[e._v("docker-compose.yml")])]),e._v(" "),a("p",[e._v("3.使用docker-compose启动")]),e._v(" "),a("p",[e._v("创建docker-compose.yml文件进行配置")]),e._v(" "),a("div",{staticClass:"language-yml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# yaml 配置")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'3'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("web")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" .\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"5000:5000"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("redis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"redis:alpine"')]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[a("code",[e._v("version")]),e._v(" 这个配置，这代表我们定义的 "),a("code",[e._v("docker-compose.yml")]),e._v(" 文件内容所采用的版本，目前 "),a("code",[e._v("Docker Compose")]),e._v(" 的配置文件已经迭代至了第三版，其所支持的功能也越来越丰富，所以我们建议使用最新的版本来定义。")]),e._v(" "),a("p",[a("code",[e._v("services")]),e._v("这块，是整个 "),a("code",[e._v("-compose.yml")]),e._v(" 的核心部分，其定义了容器的各项细节。")]),e._v(" "),a("p",[a("code",[e._v("docker-compose")]),e._v("命令默认会识别当前控制台所在目录内的 "),a("code",[e._v("docker-compose.yml")]),e._v(" 文件，而会以这个目录的名字作为组装的应用项目的名称。如果我们需要改变它们，可以通过选项 -f 来修改识别的 "),a("code",[e._v("Docker Compose")]),e._v(" 配置文件，通过 -p 选项来定义项目名。")]),e._v(" "),a("p",[e._v("输入docker compose命令启动容器")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("compose up\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("虽然 "),a("code",[e._v("Docker Compose")]),e._v(" 目前也是由 "),a("code",[e._v("Docker")]),e._v("官方主要维护，但其却不属于 "),a("code",[e._v("Docker Engine")]),e._v(" 的一部分，而是一个独立的软件。所以如果我们要在 Linux 中使用它，还必须要单独下载使用。")]),e._v(" "),a("p",[a("code",[e._v("Docker Compose")]),e._v(" 是一个由 "),a("code",[e._v("Python")]),e._v(" 编写的软件，在拥有 "),a("code",[e._v("Python")]),e._v(" 运行环境的机器上，我们可以直接运行它，不需要其它的操作。")]),e._v(" "),a("h2",{attrs:{id:"数据管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据管理"}},[e._v("#")]),e._v(" 数据管理")]),e._v(" "),a("p",[e._v("Docker虽然有很多优势，但也有很多弊端，其中显著的两点就是")]),e._v(" "),a("p",[e._v("沙盒文件系统是跟随容器生命周期所创建和移除的，数据无法直接被持久化存储。")]),e._v(" "),a("p",[e._v("由于容器隔离，我们很难从容器外部获得或操作容器内部文件中的数据")]),e._v(" "),a("p",[a("code",[e._v("Docker")]),e._v(" 容器文件系统是基于 "),a("code",[e._v("UnionFS")]),e._v("。由于 "),a("code",[e._v("UnionFS")]),e._v(" 支持挂载不同类型的文件系统到统一的目录结构中，所以我们只需要将宿主操作系统中，文件系统里的文件或目录挂载到容器中，便能够让容器内外共享这个文件。")]),e._v(" "),a("p",[e._v("基于底层存储实现，"),a("code",[e._v("Docker")]),e._v(" 提供了三种适用于不同场景的文件系统挂载方式：Bind "),a("code",[e._v("Mount")]),e._v("、"),a("code",[e._v("Volume")]),e._v(" 和 "),a("code",[e._v("Tmpfs Mount")])]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Bind Mount")]),e._v(" 能够直接将宿主操作系统中的目录和文件挂载到容器内的文件系统中，通过指定容器外的路径和容器内的路径，就可以形成挂载映射关系，在容器内外对文件的读写，都是相互可见的。")]),e._v(" "),a("li",[a("code",[e._v("Volume")]),e._v(" 也是从宿主操作系统中挂载目录到容器内，只不过这个挂载的目录由 Docker 进行管理，我们只需要指定容器内的目录，不需要关心具体挂载到了宿主操作系统中的哪里。")]),e._v(" "),a("li",[a("code",[e._v("Tmpfs Mount")]),e._v(" 支持挂载系统内存中的一部分到容器的文件系统里，不过由于内存和容器的特征，它的存储并不是持久的，其中的内容会随着容器的停止而消失")])]),e._v(" "),a("h2",{attrs:{id:"docker-swam"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-swam"}},[e._v("#")]),e._v(" Docker-Swam")]),e._v(" "),a("p",[e._v("通常是使用 "),a("code",[e._v("Docker Compose")]),e._v(" 来定义集群，而通过 "),a("code",[e._v("Docker Swarm")]),e._v(" 来部署集群。")]),e._v(" "),a("p",[e._v("要搭建 "),a("code",[e._v("Overlay Network")]),e._v(" 网络，我们就要用到 "),a("code",[e._v("Docker Swarm")]),e._v(" 这个工具了。"),a("code",[e._v("Docker Swarm")]),e._v("是 "),a("code",[e._v("Docker")]),e._v("内置的集群工具，它能够帮助我们更轻松地将服务部署到 "),a("code",[e._v("Docker daemon")]),e._v(" 的集群之中。")]),e._v(" "),a("p",[e._v("对于 "),a("code",[e._v("Docker Swarm")]),e._v("来说，每一个 "),a("code",[e._v("Docker daemon")]),e._v(" 的实例都可以成为集群中的一个节点，而在 "),a("code",[e._v("Docker daemon")]),e._v(" 加入到集群成为其中的一员后，集群的管理节点就能对它进行控制。我们要搭建的 "),a("code",[e._v("Overlay")]),e._v(" 网络正是基于这样的集群实现的。")]),e._v(" "),a("p",[e._v("初始化docker-swam")]),e._v(" "),a("p",[e._v("既然要将 "),a("code",[e._v("Docker")]),e._v("加入到集群，我们就必须先有一个集群，我们在任意一个 "),a("code",[e._v("Docker")]),e._v("实例上都可以通过 "),a("code",[e._v("docker swarm init")]),e._v(" 来初始化集群")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker swarm init\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("在集群初始化后，这个 "),a("code",[e._v("Docker")]),e._v(" 实例就自动成为了集群的管理节点，而其他 "),a("code",[e._v("Docker")]),e._v(" 实例可以通过运行这里所打印的 "),a("code",[e._v("docker swarm join")]),e._v(" 命令来加入集群。")]),e._v(" "),a("p",[e._v("加入到集群的节点默认为普通节点，如果要以管理节点的身份加入到集群中，我们可以通过 "),a("code",[e._v("ocker swarm join-token")]),e._v(" 命令来获得管理节点的加入命令。")]),e._v(" "),a("h3",{attrs:{id:"建立跨主机网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建立跨主机网络"}},[e._v("#")]),e._v(" 建立跨主机网络")]),e._v(" "),a("p",[e._v("通过 "),a("code",[e._v("docker network create")]),e._v(" 命令来建立 "),a("code",[e._v("Overlay")]),e._v(" 网络")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker network create --driver overlay --attachable mesh\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("在创建了这个网络之后，我们可以在任何一个加入到集群的"),a("code",[e._v("Docker")]),e._v("实例上使用 "),a("code",[e._v("docker network ls")]),e._v(" 查看一下其下的网络列表。我们会发现这个网络定义已经同步到了所有集群中的节点")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker network "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("修改 "),a("code",[e._v("Docker Compose")]),e._v(" 的定义，让它使用这个我们已经定义好的网络，而不是再重新创建网络。")]),e._v(" "),a("p",[e._v("只需要在"),a("code",[e._v("Docker Compose")]),e._v(" 配置文件的网络定义部分，将网络的 "),a("code",[e._v("external")]),e._v(" 属性设置为 "),a("code",[e._v("true")]),e._v("，就可以让"),a("code",[e._v("Docker Compose")]),e._v(" 将其建立的容器都连接到这个不属于 "),a("code",[e._v("Docker Compose")]),e._v(" 的项目上了。")]),e._v(" "),a("h2",{attrs:{id:"搭建私有docker仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建私有docker仓库"}},[e._v("#")]),e._v(" 搭建私有docker仓库")]),e._v(" "),a("p",[e._v("通过官方提供的私有仓库镜像"),a("code",[e._v("registry")]),e._v("来搭建私有仓库。通过 "),a("a",{attrs:{href:"https://humpback.github.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("humpback"),a("OutboundLink")],1),e._v(" 快速搭建轻量级的Docker容器云管理平台")]),e._v(" "),a("p",[e._v("拉去registry")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker pull registry:2.6.2\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("为了定制一些配置，和在 "),a("a",{attrs:{href:"https://humpback.github.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("humpback"),a("OutboundLink")],1),e._v(" 中使用，我们还需要提供一个定制化的配置文件（使用yml来编写配置文件），文件放在"),a("code",[e._v("/etc/docker/registry/config.yml")]),e._v("，如下")]),e._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.1")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("fields")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" registry\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("storage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" \n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("cache")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("blobdescriptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" inmemory\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("filesystem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("rootdirectory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /var/lib/registry\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("http")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("addr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("7000")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("secret")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("registry\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("headers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("X-Content-Type-Options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("nosniff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("Access-Control-Allow-Headers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'*'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("Access-Control-Allow-Origin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'*'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("Access-Control-Allow-Methods")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'GET,POST,PUT,DELETE'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("health")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("storagedriver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("enabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("interval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 10s\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("threshold")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br")])]),a("p",[e._v("推送镜像到私有仓库")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 从官方仓库拉取一个镜像")]),e._v("\ndocker pull nginx:1.13\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 为镜像 `nginx:1.13` 创建一个新标签 `192.168.99.100:7000/test-nginx:1.13`")]),e._v("\ndocker tag nginx:1.13 "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".99.100:7000/test-nginx:1.13\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 推送到私有仓库中")]),e._v("\ndocker push "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".99.100:7000/test-nginx:1.13\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The push refers to a repository [192.168.99.100:7000/test-nginx]")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("部署Humpback")]),e._v(" "),a("p",[e._v("首先创建放持久化数据文件夹，"),a("code",[e._v("mkdir -p /opt/app/humpback-web")]),e._v("，里面存放持久化数据文件，会存储站点管理和分组信息，启动后请妥善保存。")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建放持久化数据文件夹")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p /opt/app/humpback-web\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 下载humpback-web镜像到本地")]),e._v("\ndocker pull humpbacks/humpback-web:1.0.0\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 启动 humpback-web \b容器，将容器命名为 humpback-web")]),e._v("\ndocker run -d --net"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("host --restart"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("always "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n -e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("HUMPBACK_LISTEN_PORT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("7001")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n -v /opt/app/humpback-web/dbFiles:/humpback-web/dbFiles "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n --name humpback-web "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n humpbacks/humpback-web:1.0.0\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("p",[e._v("访问站点，打开浏览器输入：·"),a("a",{attrs:{href:"http://192.168.99.100:7001%C2%B7/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://192.168.99.100:7001·"),a("OutboundLink")],1),e._v(" ，默认账户："),a("code",[e._v("admin")]),e._v(" 密码："),a("code",[e._v("123456")])]),e._v(" "),a("h2",{attrs:{id:"镜像批量清理脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像批量清理脚本"}},[e._v("#")]),e._v(" 镜像批量清理脚本")]),e._v(" "),a("p",[e._v("批量删除已经推出的容器")]),e._v(" "),a("div",{staticClass:"language-docker line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-docker"}},[a("code",[e._v("docker ps "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" grep "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Exited"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" awk "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{print $1 }'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" xargs docker rm\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("批量删除带有none字段的镜像")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 方案1： 根据镜像id删除镜像")]),e._v("\ndocker images"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" grep none "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v("awk "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{print $3 }'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v("xargs docker rmi\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 方案2: 根据镜像名删除镜像")]),e._v("\ndocker images "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" grep wecloud "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" awk "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{print $1\":\"$2}'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" xargs docker rmi\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("批量删除镜像定时任务脚本")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#!/bin/bash")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# create by wangduanduan")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# when current free disk less then max free disk, you can remove docker images")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\nGREEN="),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\033[0;32m'")]),e._v("\nRED="),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\033[0;31m'")]),e._v("\nNC="),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\033[0m'")]),e._v("\nmax_free_disk=5 "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 5G. when current free disk less then max free disk, remove docker images")]),e._v("\ncurrent_free_disk=`df "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("lh "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" grep centos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("root "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" awk "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{print strtonum($4)}'")]),e._v("`\ndf "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("lh\necho "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"max_free_disk: $max_free_disk G"')]),e._v("\necho "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("e "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"current_free_disk: ${GREEN} $current_free_disk G ${NC}"')]),e._v("\nif "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" $current_free_disk "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("lt $max_free_disk "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nthen\n\techo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("e "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${RED} need to clean up docker images ${NC}"')]),e._v("\n\tdocker images "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" grep none "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" awk "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{print $3 }'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" xargs docker rmi\n\tdocker images "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" grep wecloud "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" awk "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{print $1\":\"$2}'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" xargs docker rmi\nelse\n\techo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("e "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${GREEN}no need clean${NC}"')]),e._v("\nfi\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br")])]),a("p",[e._v("注意："),a("code",[e._v("为了加快打包的速度，一般不要太频繁的删除镜像")]),e._v("。因为老的镜像中的某些不改变的层，可以作为新的镜像的缓存，从而大大加快构建的速度。")]),e._v(" "),a("h2",{attrs:{id:"实战1-部署mysql和nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实战1-部署mysql和nginx"}},[e._v("#")]),e._v(" 实战1：部署mysql和nginx")]),e._v(" "),a("p",[e._v("部署nginx")]),e._v(" "),a("p",[e._v("步骤：")]),e._v(" "),a("p",[e._v("1.在docker hub中查找nginx镜像")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker search nginx\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("2.拉取官方镜像")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker pull nginx\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("3.利用镜像启动容器")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker run --name my-nginx -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8080")]),e._v(":80 nginx\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("code",[e._v("--name")]),e._v(":为容器取名  -d：后台运行。-p：映射端口，-p host port:container port")]),e._v(" "),a("p",[e._v("4.查看容器运行日志")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker logs my-nginx\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("部署mysql")]),e._v(" "),a("p",[e._v("步骤")]),e._v(" "),a("p",[e._v("拉取mysql镜像文件")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker pull mysql:5.7\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("创建目录")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("data")]),e._v("目录将映射为"),a("code",[e._v("mysql")]),e._v("容器配置的数据文件存放路径")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("logs")]),e._v("目录将映射为"),a("code",[e._v("mysql")]),e._v("容器的日志目录")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("conf")]),e._v("目录里的配置文件将映射为"),a("code",[e._v("mysql")]),e._v("容器的配置文件")])])]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p ~/mysql/data ~/mysql/logs ~/mysql/conf\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("运行容器")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker run --name my-mysql "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v(" \n-p "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3306")]),e._v(":3306 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v(" \n-v "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PWD")]),e._v("/conf/my.cnf:/etc/mysql/my.cnf "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v(" \n-v "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PWD")]),e._v("/logs:/logs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v(" \n-v "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PWD")]),e._v("/data:/mysql_data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v(" \n-e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v(" \n-d mysql:5.7\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[a("code",[e._v("-p 3306:3306")]),e._v("：将容器的"),a("code",[e._v("3306")]),e._v("端口映射到主机的"),a("code",[e._v("3306")]),e._v("端口")]),e._v(" "),a("p",[a("code",[e._v("-v $PWD/conf/my.cnf:/etc/mysql/my.cnf")]),e._v("：将主机当前目录下的"),a("code",[e._v("conf/my.cnf")]),e._v("挂载到容器的"),a("code",[e._v("/etc/mysql/my.cnf")])]),e._v(" "),a("p",[a("code",[e._v("-v $PWD/logs:/logs")]),e._v("：将主机当前目录下的"),a("code",[e._v("logs")]),e._v("目录挂载到容器的"),a("code",[e._v("/logs")])]),e._v(" "),a("p",[a("code",[e._v("-v $PWD/data:/mysql_data")]),e._v("：将主机当前目录下的"),a("code",[e._v("data")]),e._v("目录挂载到容器的"),a("code",[e._v("/mysql_data")])]),e._v(" "),a("p",[a("code",[e._v("-e MYSQL_ROOT_PASSWORD=123456")]),e._v("：初始化root用户的密码")]),e._v(" "),a("h2",{attrs:{id:"实战2-部署php、mysql、nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实战2-部署php、mysql、nginx"}},[e._v("#")]),e._v(" 实战2:部署php、mysql、nginx")]),e._v(" "),a("h2",{attrs:{id:"docker中文资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker中文资源"}},[e._v("#")]),e._v(" docker中文资源")]),e._v(" "),a("ul",[a("li",[e._v("Docker中文网站："),a("a",{attrs:{href:"http://www.docker.org.cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.docker.org.cn"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Docker中文文档：http://www.dockerinfo.net/document")]),e._v(" "),a("li",[e._v("Docker安装手册：http://www.docker.org.cn/book/install.html")]),e._v(" "),a("li",[e._v("一小时Docker教程 ：https://blog.csphere.cn/archives/22")]),e._v(" "),a("li",[e._v("Docker中文指南：http://www.widuu.com/chinese_docker/index.html")])]),e._v(" "),a("p",[e._v("Docker官方资源")]),e._v(" "),a("ul",[a("li",[e._v("Docker官网："),a("a",{attrs:{href:"http://www.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.docker.com"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Docker windows入门：https://docs.docker.com/windows/")]),e._v(" "),a("li",[e._v("Docker Linux 入门：https://docs.docker.com/linux/")]),e._v(" "),a("li",[e._v("Docker mac 入门：https://docs.docker.com/mac/")]),e._v(" "),a("li",[e._v("Docker 用户指引：https://docs.docker.com/engine/userguide/")]),e._v(" "),a("li",[e._v("Docker 官方博客：http://blog.docker.com/")]),e._v(" "),a("li",[e._v("Docker Hub: https://hub.docker.com/")]),e._v(" "),a("li",[e._v("Docker开源： https://www.docker.com/open-source")])]),e._v(" "),a("p",[e._v("其他资源")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/eon01/DockerCheatSheet",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker 快速手册！"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.runoob.com/docker/docker-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker 教程"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://blog.csdn.net/zhangchao19890805/article/details/52756865",target:"_blank",rel:"noopener noreferrer"}},[e._v("MySQL Docker 单一机器上如何配置自动备份"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("https://segmentfault.com/t/docker")]),e._v(" "),a("li",[e._v("https://github.com/docker/docker")]),e._v(" "),a("li",[e._v("https://wiki.openstack.org/wiki/Docker")]),e._v(" "),a("li",[e._v("https://wiki.archlinux.org/index.php/Docker")])])])}),[],!1,null,null,null);s.default=n.exports}}]);